/**
 * api.js - C·∫•u h√¨nh axios client cho g·ªçi API
 *
 * File n√†y t·∫°o v√† c·∫•u h√¨nh m·ªôt instance Axios ƒë·ªÉ th·ª±c hi·ªán c√°c request HTTP
 * ƒë·∫øn backend API v·ªõi c√°c thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh v√† x·ª≠ l√Ω l·ªói nh·∫•t qu√°n.
 *
 * L√Ω do t·∫°o file:
 * - T·∫°o m·ªôt ƒëi·ªÉm truy c·∫≠p API duy nh·∫•t, nh·∫•t qu√°n trong to√†n ·ª©ng d·ª•ng
 * - Cung c·∫•p c√°c c·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho m·ªçi API request
 * - X√¢y d·ª±ng c∆° ch·∫ø x·ª≠ l√Ω l·ªói v√† x√°c th·ª±c JWT t·∫≠p trung
 *
 * T√≠nh nƒÉng ch√≠nh:
 * - C·∫•u h√¨nh baseURL v√† headers m·∫∑c ƒë·ªãnh
 * - Interceptor t·ª± ƒë·ªông th√™m JWT token v√†o c√°c request
 * - X·ª≠ l√Ω l·ªói t·∫≠p trung, bao g·ªìm vi·ªác x·ª≠ l√Ω token h·∫øt h·∫°n
 *
 * =============================
 * üîë ƒê·ªÉ s·ª≠ d·ª•ng backend Cloud (production):
 *   - T·∫°o file .env ·ªü th∆∞ m·ª•c g·ªëc frontend v·ªõi n·ªôi dung:
 *       REACT_APP_API_URL=https://gender-heath-backend-720346160754.asia-southeast1.run.app
 *   - Khi ch·∫°y local, c√≥ th·ªÉ b·ªè d√≤ng n√†y ho·∫∑c ƒë·ªÉ http://localhost:8080
 *
 * =============================
 */

import localStorageUtil from '@/utils/localStorage';
import axios from 'axios';

// L·∫•y baseURL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, ∆∞u ti√™n cloud n·∫øu c√≥
const config = {
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',
  // headers: {
  //   'Content-Type': 'application/json', // ƒê√£ x√≥a ƒë·ªÉ axios t·ª± ƒë·ªông nh·∫≠n di·ªán
  // },
};

const apiClient = axios.create(config);

// ‚úÖ Request interceptor - s·ª≠ d·ª•ng JWT token
apiClient.interceptors.request.use(
  (config) => {
    // Ch·ªâ s·ª≠ d·ª•ng token t·ª´ bi·∫øn token trong localStorage
    var token = localStorageUtil.get('token');

    // Th√™m token v√†o header Authorization n·∫øu c√≥
    if (token && token.accessToken) {
      config.headers.Authorization = `Bearer ${token.accessToken}`;
    }

    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// ‚úÖ Response interceptor - x·ª≠ l√Ω token h·∫øt h·∫°n
apiClient.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error) => {
    // X·ª≠ l√Ω token h·∫øt h·∫°n (401 Unauthorized) ho·∫∑c JWT expired
    if (
      error.response?.status === 401 ||
      (error.response?.data?.message &&
        error.response?.data?.message.includes('JWT expired'))
    ) {
      const token = localStorageUtil.get('token');

      // ‚úÖ KI·ªÇM TRA FLAG ƒê·ªÇ B·ªé QUA AUTO-REDIRECT
      if (error.config?.skipAutoRedirect) {
        return Promise.reject(error);
      }

      // N·∫øu c√≥ refresh token, th·ª≠ refresh
      if (token && token.refreshToken) {
        try {
          if (!window.isRefreshingToken) {
            window.isRefreshingToken = true;

            // S·ª≠ d·ª•ng axios tr·ª±c ti·∫øp thay v√¨ import userService ƒë·ªÉ tr√°nh v√≤ng l·∫∑p tham chi·∫øu
            const noInterceptorClient = axios.create({
              baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',
              headers: {
                'Content-Type': 'application/json',
              },
            });

            const refreshResponse = await noInterceptorClient
              .post('/auth/refresh-token', {
                refreshToken: token.refreshToken,
              })
              .then((res) => res.data);

            // Ki·ªÉm tra c·∫£ tr∆∞·ªùng h·ª£p response tr·ª±c ti·∫øp ho·∫∑c n·∫±m trong .data
            if (
              refreshResponse.success ||
              refreshResponse.accessToken ||
              (refreshResponse.data &&
                (refreshResponse.data.accessToken ||
                  refreshResponse.data.success))
            ) {
              // L·∫•y token t·ª´ response
              const tokenData = refreshResponse.data || refreshResponse;
              const newAccessToken =
                tokenData.accessToken ||
                (tokenData.data && tokenData.data.accessToken);

              // Ch·ªâ c·∫≠p nh·∫≠t refreshToken n·∫øu c√≥ trong response
              const newRefreshToken =
                tokenData.refreshToken ||
                (tokenData.data && tokenData.data.refreshToken) ||
                token.refreshToken;

              // C·∫≠p nh·∫≠t token m·ªõi v√†o localStorage
              const newTokenObject = {
                accessToken: newAccessToken,
                refreshToken: newRefreshToken,
              };
              localStorageUtil.set('token', newTokenObject);

              // Th√™m header authorization m·ªõi v√† th·ª≠ l·∫°i request
              error.config.headers.Authorization = `Bearer ${newAccessToken}`;

              // Tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n n·∫øu token m·ªõi c≈©ng kh√¥ng h·ª£p l·ªá
              error.config._retry = true;

              return apiClient.request(error.config);
            }
          } else {
            // Ch·ªù m·ªôt ch√∫t v√† th·ª≠ l·∫°i n·∫øu m·ªôt qu√° tr√¨nh refresh ƒëang di·ªÖn ra
            await new Promise((resolve) => setTimeout(resolve, 1000));

            const updatedToken = localStorageUtil.get('token');
            if (
              updatedToken &&
              updatedToken.accessToken !== token.accessToken
            ) {
              // Token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi b·ªüi m·ªôt request kh√°c
              error.config.headers.Authorization = `Bearer ${updatedToken.accessToken}`;
              return apiClient.request(error.config);
            }
          }
        } catch (refreshError) {
          // Refresh token c≈©ng h·∫øt h·∫°n, ƒëƒÉng xu·∫•t user
          localStorageUtil.remove('token');

          // N·∫øu c√≥ flag skipAutoRedirect, kh√¥ng redirect v√† kh√¥ng alert
          if (error.config?.skipAutoRedirect) {
            return Promise.reject(error);
          }

          // Th√¥ng b√°o cho ng∆∞·ªùi d√πng
          alert('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');

          // Ch·ªâ redirect n·∫øu kh√¥ng ph·∫£i ƒëang ·ªü trang login
          if (!window.location.pathname.includes('/login')) {
            window.location.href = '/login';
          }
        }
      } else {
        // Kh√¥ng c√≥ refresh token, chuy·ªÉn v·ªÅ trang login
        localStorageUtil.remove('token');

        // Ch·ªâ redirect n·∫øu kh√¥ng ph·∫£i ƒëang ·ªü trang login
        if (!window.location.pathname.includes('/login')) {
          window.location.href = '/login';
        }
      }
    }

    return Promise.reject(error);
  }
);

export default apiClient;
