/**
 * api.js - C·∫•u h√¨nh axios client cho g·ªçi API
 *
 * File n√†y t·∫°o v√† c·∫•u h√¨nh m·ªôt instance Axios ƒë·ªÉ th·ª±c hi·ªán c√°c request HTTP
 * ƒë·∫øn backend API v·ªõi c√°c thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh v√† x·ª≠ l√Ω l·ªói nh·∫•t qu√°n.
 *
 * L√Ω do t·∫°o file:
 * - T·∫°o m·ªôt ƒëi·ªÉm truy c·∫≠p API duy nh·∫•t, nh·∫•t qu√°n trong to√†n ·ª©ng d·ª•ng
 * - Cung c·∫•p c√°c c·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho m·ªçi API request
 * - X√¢y d·ª±ng c∆° ch·∫ø x·ª≠ l√Ω l·ªói v√† x√°c th·ª±c JWT t·∫≠p trung
 *
 * T√≠nh nƒÉng ch√≠nh:
 * - C·∫•u h√¨nh baseURL v√† headers m·∫∑c ƒë·ªãnh
 * - Interceptor t·ª± ƒë·ªông th√™m JWT token v√†o c√°c request
 * - X·ª≠ l√Ω l·ªói t·∫≠p trung, bao g·ªìm vi·ªác x·ª≠ l√Ω token h·∫øt h·∫°n
 */

import localStorageUtil from "@/utils/localStorage";
import axios from "axios";

// T·∫°o config object tr∆∞·ªõc
const config = {
  baseURL: "http://localhost:8080",
  headers: {
    "Content-Type": "application/json",
  },
};

const apiClient = axios.create(config);

// ‚úÖ Request interceptor - s·ª≠ d·ª•ng JWT token
apiClient.interceptors.request.use(
  (config) => {
    var userData = localStorageUtil.get("user");

    // N·∫øu c√≥ userData v√† c√≥ accessToken, th√™m Bearer token v√†o header
    if (userData && userData.accessToken) {
      config.headers.Authorization = `Bearer ${userData.accessToken}`;
    }

    console.log("API Request:", {
      url: config.baseURL + config.url,
      method: config.method.toUpperCase(),
      headers: config.headers,
    });

    return config;
  },
  (error) => {
    console.error("Request interceptor error:", error);
    return Promise.reject(error);
  }
);

// ‚úÖ Response interceptor - x·ª≠ l√Ω token h·∫øt h·∫°n
apiClient.interceptors.response.use(
  (response) => {
    console.log("API Response:", {
      status: response.status,
      url: response.config.url,
      data: response.data,
    });
    return response;
  },
  async (error) => {
    console.error("API Error:", {
      status: error.response?.status,
      statusText: error.response?.statusText,
      url: error.config?.url,
      data: error.response?.data,
      message: error.message,
    }); // X·ª≠ l√Ω token h·∫øt h·∫°n (401 Unauthorized)
    if (error.response?.status === 401) {
      const userData = localStorageUtil.get("user");

      // ‚úÖ KI·ªÇM TRA FLAG ƒê·ªÇ B·ªé QUA AUTO-REDIRECT
      if (error.config?.skipAutoRedirect) {
        console.log("üîÑ Skipping auto-redirect due to skipAutoRedirect flag");
        return Promise.reject(error);
      }

      console.log("üîç 401 Error Debug:", {
        hasUserData: !!userData,
        hasAccessToken: !!userData?.accessToken,
        hasRefreshToken: !!userData?.refreshToken,
        endpoint: error.config?.url,
        errorMessage: error.response?.data?.message,
      });

      // N·∫øu c√≥ refresh token, th·ª≠ refresh
      if (userData && userData.refreshToken) {
        try {
          console.log("üîÑ Attempting token refresh...");
          const { userService } = await import("./userService");
          const refreshResponse = await userService.refreshToken(
            userData.refreshToken
          );

          console.log("üîÑ Refresh response:", refreshResponse);

          if (refreshResponse.success || refreshResponse.accessToken) {
            // C·∫≠p nh·∫≠t token m·ªõi v√†o localStorage
            const newTokenData = refreshResponse.data || refreshResponse;
            const newUserData = {
              ...userData,
              accessToken: newTokenData.accessToken,
              refreshToken: newTokenData.refreshToken,
            };
            localStorageUtil.set("user", newUserData);

            console.log("‚úÖ Token refreshed successfully, retrying request...");
            // Retry request v·ªõi token m·ªõi
            error.config.headers.Authorization = `Bearer ${newTokenData.accessToken}`;
            return apiClient.request(error.config);
          }
        } catch (refreshError) {
          console.error("‚ùå Refresh token failed:", refreshError);
          // Refresh token c≈©ng h·∫øt h·∫°n, ƒëƒÉng xu·∫•t user
          localStorageUtil.remove("user");

          // Ch·ªâ redirect n·∫øu kh√¥ng ph·∫£i ƒëang ·ªü trang login
          if (!window.location.pathname.includes("/login")) {
            window.location.href = "/login";
          }
        }
      } else {
        console.log("‚ùå No refresh token available, redirecting to login");
        // Kh√¥ng c√≥ refresh token, chuy·ªÉn v·ªÅ trang login
        localStorageUtil.remove("user");

        // Ch·ªâ redirect n·∫øu kh√¥ng ph·∫£i ƒëang ·ªü trang login
        if (!window.location.pathname.includes("/login")) {
          window.location.href = "/login";
        }
      }
    }

    return Promise.reject(error);
  }
);

export default apiClient;
