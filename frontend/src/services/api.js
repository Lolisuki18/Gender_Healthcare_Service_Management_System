/**
 * api.js - C·∫•u h√¨nh axios client cho g·ªçi API
 *
 * File n√†y t·∫°o v√† c·∫•u h√¨nh m·ªôt instance Axios ƒë·ªÉ th·ª±c hi·ªán c√°c request HTTP
 * ƒë·∫øn backend API v·ªõi c√°c thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh v√† x·ª≠ l√Ω l·ªói nh·∫•t qu√°n.
 *
 * L√Ω do t·∫°o file:
 * - T·∫°o m·ªôt ƒëi·ªÉm truy c·∫≠p API duy nh·∫•t, nh·∫•t qu√°n trong to√†n ·ª©ng d·ª•ng
 * - Cung c·∫•p c√°c c·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho m·ªçi API request
 * - X√¢y d·ª±ng c∆° ch·∫ø x·ª≠ l√Ω l·ªói v√† x√°c th·ª±c JWT t·∫≠p trung
 *
 * T√≠nh nƒÉng ch√≠nh:
 * - C·∫•u h√¨nh baseURL v√† headers m·∫∑c ƒë·ªãnh
 * - Interceptor t·ª± ƒë·ªông th√™m JWT token v√†o c√°c request
 * - X·ª≠ l√Ω l·ªói t·∫≠p trung, bao g·ªìm vi·ªác x·ª≠ l√Ω token h·∫øt h·∫°n
 * - Proactive token refresh ƒë·ªÉ tr√°nh l·ªói 401
 *
 * =============================
 * üîë ƒê·ªÉ s·ª≠ d·ª•ng backend Cloud (production):
 *   - T·∫°o file .env ·ªü th∆∞ m·ª•c g·ªëc frontend v·ªõi n·ªôi dung:
 *       REACT_APP_API_URL=https://gender-heath-backend-720346160754.asia-southeast1.run.app
 *   - Khi ch·∫°y local, c√≥ th·ªÉ b·ªè d√≤ng n√†y ho·∫∑c ƒë·ªÉ http://localhost:8080
 *
 * =============================
 */

import localStorageUtil from '@/utils/localStorage';
import axios from 'axios';
import { confirmDialog } from '@/utils/confirmDialog';

// L·∫•y baseURL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, ∆∞u ti√™n cloud n·∫øu c√≥
const config = {
  // baseURL: 'http://localhost:8080' || process.env.REACT_APP_API_URL,
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',
  // headers: {
  //   'Content-Type': 'application/json', // ƒê√£ x√≥a ƒë·ªÉ axios t·ª± ƒë·ªông nh·∫≠n di·ªán
  // },
};
const apiClient = axios.create(config);

// Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i refresh token
let isRefreshing = false;
let failedQueue = [];

// H√†m x·ª≠ l√Ω queue c√°c request b·ªã fail
const processQueue = (error, token = null) => {
  failedQueue.forEach(({ resolve, reject }) => {
    if (error) {
      reject(error);
    } else {
      resolve(token);
    }
  });

  failedQueue = [];
};

// H√†m ki·ªÉm tra token c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng
const isTokenExpiringSoon = (token) => {
  if (!token) return true;

  try {
    const tokenParts = token.split('.');
    if (tokenParts.length !== 3) return true;

    const payload = JSON.parse(atob(tokenParts[1]));
    const expiryTime = payload.exp * 1000;
    const currentTime = Date.now();

    // Token s·∫Øp h·∫øt h·∫°n trong 5 ph√∫t (ph√π h·ª£p v·ªõi access token 1 gi·ªù t·ª´ backend)
    return expiryTime - currentTime < 5 * 60 * 1000;
  } catch (error) {
    return true;
  }
};

// H√†m refresh token v·ªõi retry logic
const refreshTokenWithRetry = async (retries = 3) => {
  for (let i = 0; i < retries; i++) {
    try {
      return await refreshToken();
    } catch (error) {
      console.error(`Refresh token attempt ${i + 1} failed:`, error.message);

      // N·∫øu l√† l·ªói cu·ªëi c√πng ho·∫∑c kh√¥ng ph·∫£i network error, throw error
      if (i === retries - 1 || !error.message.includes('Network Error')) {
        throw error;
      }

      // ƒê·ª£i tr∆∞·ªõc khi retry (exponential backoff)
      const delay = Math.pow(2, i) * 1000; // 1s, 2s, 4s
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
  }
};

// H√†m refresh token
const refreshToken = async () => {
  const token = localStorageUtil.get('token');
  if (!token?.refreshToken) {
    throw new Error('No refresh token available');
  }

  try {
    // S·ª≠ d·ª•ng axios tr·ª±c ti·∫øp ƒë·ªÉ tr√°nh v√≤ng l·∫∑p
    const noInterceptorClient = axios.create({
      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 10000, // 10 second timeout
    });

    const response = await noInterceptorClient.post('/auth/refresh-token', {
      refreshToken: token.refreshToken,
    });

    const responseData = response.data;
    const tokenData = responseData.data || responseData;

    const newAccessToken =
      tokenData.accessToken || (tokenData.data && tokenData.data.accessToken);

    const newRefreshToken =
      tokenData.refreshToken ||
      (tokenData.data && tokenData.data.refreshToken) ||
      token.refreshToken;

    const newTokenObject = {
      accessToken: newAccessToken,
      refreshToken: newRefreshToken,
    };

    localStorageUtil.set('token', newTokenObject);
    return newTokenObject;
  } catch (error) {
    // X√≥a token c≈© n·∫øu refresh th·∫•t b·∫°i
    localStorageUtil.remove('token');
    throw error;
  }
};

// ‚úÖ Request interceptor - s·ª≠ d·ª•ng JWT token v·ªõi proactive refresh
apiClient.interceptors.request.use(
  async (config) => {
    // B·ªè qua refresh cho c√°c endpoint kh√¥ng c·∫ßn auth
    if (
      config.url?.includes('/auth/login') ||
      config.url?.includes('/auth/register') ||
      config.url?.includes('/auth/refresh-token')
    ) {
      return config;
    }

    const token = localStorageUtil.get('token');

    if (token?.accessToken) {
      // Ki·ªÉm tra n·∫øu token s·∫Øp h·∫øt h·∫°n v√† ch∆∞a ƒëang refresh
      if (isTokenExpiringSoon(token.accessToken) && !isRefreshing) {
        isRefreshing = true;

        try {
          const newToken = await refreshTokenWithRetry();
          config.headers.Authorization = `Bearer ${newToken.accessToken}`;
          processQueue(null, newToken.accessToken);
        } catch (error) {
          processQueue(error, null);
          localStorageUtil.remove('token');
          localStorageUtil.remove('user');
          localStorageUtil.remove('userProfile');
          // Redirect to login n·∫øu kh√¥ng ph·∫£i ƒëang ·ªü trang login
          if (!window.location.pathname.includes('/login')) {
            window.location.href = '/login';
          }
          return Promise.reject(error);
        } finally {
          isRefreshing = false;
        }
      } else {
        config.headers.Authorization = `Bearer ${token.accessToken}`;
      }
    }

    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// ‚úÖ Response interceptor - x·ª≠ l√Ω token h·∫øt h·∫°n
apiClient.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error) => {
    // X·ª≠ l√Ω c√°c l·ªói HTTP kh√°c nhau
    if (error.response) {
      const { status, data } = error.response;

      switch (status) {
        case 401:
          // Unauthorized - token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
          const errMsg = data?.message;
          if (
            errMsg &&
            typeof errMsg === 'string' &&
            errMsg.toLowerCase().includes('user not found')
          ) {
            await confirmDialog.info(
              'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.',
              { confirmText: 'ƒêƒÉng nh·∫≠p l·∫°i', cancelText: 'ƒê√≥ng' }
            );
            window.location.href = '/login';
          }
          break;

        case 403:
          // Forbidden - kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
          console.error(
            'Access forbidden:',
            data?.message || 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
          );
          break;

        case 500:
        case 502:
        case 503:
        case 504:
          // Server errors
          console.error(
            `Server error (${status}):`,
            data?.message || 'L·ªói server'
          );
          break;

        default:
          console.error(
            `HTTP error (${status}):`,
            data?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
          );
      }
    } else if (error.request) {
      // Network error
      console.error('Network error:', error.message);
    } else {
      // Other errors
      console.error('Request error:', error.message);
    }

    return Promise.reject(error);
  }
);

export default apiClient;
