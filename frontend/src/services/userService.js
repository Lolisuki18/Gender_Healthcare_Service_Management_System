import apiClient from "@services/api";
import axios from "axios";
import localStorageUtil from "@utils/localStorage";

// Service cho c√°c API li√™n quan ƒë·∫øn ng∆∞·ªùi d√πng
export const userService = {
  //ƒëƒÉng xu·∫•t
  logout: async () => {
    try {
      const response = await apiClient.post("/auth/logout");

      localStorageUtil.remove("user");

      return response.data;
    } catch (error) {
      localStorageUtil.remove("user");

      throw error.response?.data || error;
    }
  }, // ƒêƒÉng nh·∫≠p
  login: async (credentials) => {
    try {
      const response = await apiClient.post("/auth/login", credentials);
      console.log("Raw API response:", response); // Debug log
      console.log("Response data:", response.data); // Debug log
      return response.data; // JwtResponse t·ª´ backend
    } catch (error) {
      throw error.response?.data || error;
    }
  },

  // ƒêƒÉng k√Ω
  register: async (userData) => {
    try {
      console.log("Sending registration data:", userData); // ‚úÖ Debug log

      const response = await apiClient.post("/users/register", userData);
      return response.data;
    } catch (error) {
      console.error("Register error:", error);
      console.error("Error response:", error.response?.data); // ‚úÖ Debug log
      throw error;
    }
  },

  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
  getCurrentUser: async () => {
    try {
      const response = await apiClient.get("/users/profile");
      return response.data;
    } catch (error) {
      throw error.response?.data || error;
    }
  },
  // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  updateProfile: async (userData) => {
    try {
      const response = await apiClient.put("/users/profile/basic", userData);
      return response.data;
    } catch (error) {
      throw error.response?.data || error;
    }
  },

  // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng c·∫ßn token (cho staff profile)
  updateProfileNoAuth: async (userData) => {
    try {
      // T·∫°o m·ªôt instance axios ri√™ng kh√¥ng c√≥ interceptor
      const noAuthClient = axios.create({
        baseURL: process.env.REACT_APP_API_URL || "http://localhost:8080/",
        headers: {
          "Content-Type": "application/json",
        },
      });

      const response = await noAuthClient.put("/users/profile/basic", userData);
      return response.data;
    } catch (error) {
      throw error.response?.data || error;
    }
  },
  sendCode: async (email) => {
    try {
      const response = await apiClient.post("/users/send-verification", {
        email,
      });
      return response.data;
    } catch (error) {
      throw error.response?.data || error;
    }
  },
  sendCodeForgotPassword: async (email) => {
    try {
      const response = await apiClient.post("/users/forgot-password", {
        email,
      });
      return response.data;
    } catch (error) {
      throw error.response?.data || error;
    }
  },
  resetPassword: async (email, code, newPassword) => {
    try {
      const response = await apiClient.post("/users/reset-password", {
        email,
        code,
        newPassword,
      });
      return response.data;
    } catch (error) {
      throw error.response?.data || error;
    }
  },

  /**
   * ‚úÖ Send email verification code for email change
   * @param {string} newEmail - New email address
   * @returns {Promise<Object>} API response
   */
  sendEmailVerificationCode: async (newEmail) => {
    try {
      const response = await apiClient.post(
        "/users/profile/email/send-verification",
        {
          email: newEmail,
        }
      );
      console.log("Email verification code sent:", response.data);
      // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
      return {
        success: true,
        data: response.data,
        message: "ƒê√£ g·ª≠i m√£ x√°c nh·∫≠n th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error sending email verification code:", error);
      return {
        success: false,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ g·ª≠i m√£ x√°c nh·∫≠n",
        error: error,
      };
    }
  },

  /**
   * ‚úÖ Verify email change with verification code and update email
   * @param {Object} data - Verification data
   * @param {string} data.newEmail - New email address
   * @param {string} data.verificationCode - 6-digit verification code
   * @returns {Promise<Object>} API response
   */ verifyEmailChange: async (data) => {
    try {
      console.log("üîÑ Verifying email change:", {
        newEmail: data.newEmail,
        hasVerificationCode: !!data.verificationCode,
        codeLength: data.verificationCode?.length,
      });

      const response = await apiClient.put("/users/profile/email", {
        newEmail: data.newEmail,
        verificationCode: data.verificationCode,
      });
      // L∆∞u l·∫°i token m·ªõi n·∫øu server cung c·∫•p
      if (response.data.token) {
        localStorageUtil.set("token", response.data.token);
      }
      console.log("‚úÖ Email change response:", response);

      return {
        success: true,
        data: response.data,
        message: "Email ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error verifying email change:", {
        status: error.response?.status,
        statusText: error.response?.statusText,
        errorData: error.response?.data,
        endpoint: "/users/profile/email",
        requestData: {
          newEmail: data.newEmail,
          hasVerificationCode: !!data.verificationCode,
        },
      });

      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
      let errorMessage = "M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng";

      if (error.response?.status === 401) {
        errorMessage = "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i";
      } else if (error.response?.status === 400) {
        errorMessage = error.response?.data?.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
      } else if (error.response?.status === 404) {
        errorMessage = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng";
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      }

      return {
        success: false,
        message: errorMessage,
        error: error,
        statusCode: error.response?.status,
      };
    }
  },

  /**
   * ‚úÖ Change user password
   * @param {Object} data - Password change data
   * @param {string} data.currentPassword - Current password
   * @param {string} data.newPassword - New password
   * @returns {Promise<Object>} API response
   */
  changePassword: async (passwordData) => {
    try {
      const response = await apiClient.put("/users/profile/password", {
        currentPassword: passwordData.currentPassword,
        newPassword: passwordData.newPassword,
        confirmPassword: passwordData.confirmPassword,
      });

      return {
        success: true,
        data: response.data.data,
        message: response.data.message || "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error changing password:", error);
      return {
        success: false,
        message:
          error.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi ƒë·ªïi m·∫≠t kh·∫©u",
      };
    }
  },
  // Refresh token
  refreshToken: async (refreshTokenValue) => {
    try {
      console.log("Attempting to refresh token...");

      // T·∫°o m·ªôt instance axios ri√™ng kh√¥ng c√≥ interceptor ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
      const noInterceptorClient = axios.create({
        baseURL: process.env.REACT_APP_API_URL || "http://localhost:8080",
        headers: {
          "Content-Type": "application/json",
        },
      });

      const response = await noInterceptorClient.post("/auth/refresh-token", {
        refreshToken: refreshTokenValue,
      });

      console.log("Token refresh successful:", response.data); // C·∫≠p nh·∫≠t token v√†o localStorage ngay t·∫°i ƒë√¢y ƒë·ªÉ ƒë·∫£m b·∫£o token m·ªõi ƒë∆∞·ª£c l∆∞u
      if (
        response.data &&
        (response.data.accessToken ||
          (response.data.data && response.data.data.accessToken))
      ) {
        const tokenData = response.data.data || response.data;

        // T·∫°o object token m·ªõi
        const newToken = {
          accessToken: tokenData.accessToken,
          refreshToken: tokenData.refreshToken || refreshTokenValue,
        };

        // L∆∞u token m·ªõi v√†o bi·∫øn token trong localStorage
        localStorageUtil.set("token", newToken);
        console.log("‚úÖ Token updated in localStorage", newToken);

        // C·∫≠p nh·∫≠t c·∫£ trong user data n·∫øu c√≥
        const userData = localStorageUtil.get("user");
        if (userData) {
          userData.accessToken = tokenData.accessToken;
          if (tokenData.refreshToken) {
            userData.refreshToken = tokenData.refreshToken;
          }
          localStorageUtil.set("user", userData);
        }
      }

      return response.data;
    } catch (error) {
      console.error("Token refresh failed:", error);
      throw error.response?.data || error;
    }
  },

  /**
   * ‚úÖ Upload avatar image   * @param {File} file - Image file to upload
   * @returns {Promise<Object>} API response with uploaded image URL
   */
  uploadAvatar: async (file) => {
    try {
      // ƒê·∫£m b·∫£o token h·ª£p l·ªá tr∆∞·ªõc khi upload
      const isTokenValid = await userService.ensureValidToken();
      if (!isTokenValid) {
        return {
          success: false,
          message:
            "Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        };
      }

      // L·∫•y token m·ªõi nh·∫•t t·ª´ localStorage
      const tokenData = localStorageUtil.get("token");
      if (!tokenData || !tokenData.accessToken) {
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        };
      } // Create form data object for file upload
      const formData = new FormData();
      formData.append("file", file); // S·ª≠ d·ª•ng key "file" theo y√™u c·∫ßu c·ªßa backend

      console.log("Sending avatar upload request with form data...", {
        fileSize: file.size,
        fileType: file.type,
        fileName: file.name,
        hasToken: !!tokenData.accessToken,
        tokenFirstChars: tokenData.accessToken.substring(0, 15) + "...", // Hi·ªán token m·ªôt ph·∫ßn ƒë·ªÉ debug
      });
      console.log("Sending avatar upload request to:", "/users/profile/avatar");

      const response = await apiClient.post("/users/profile/avatar", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
          Authorization: `Bearer ${tokenData.accessToken}`, // ƒê·∫£m b·∫£o token ƒë∆∞·ª£c g·ª≠i ƒëi
        },
        timeout: 30000, // TƒÉng timeout l√™n 30 gi√¢y cho upload file l·ªõn
      });

      console.log("Avatar upload API response:", response);
      console.log("Avatar upload response data:", response.data);
      console.log("Avatar upload response status:", response.status);

      // Ki·ªÉm tra c·∫•u tr√∫c response t·ª´ API
      if (!response.data) {
        console.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ API response");
        return {
          success: false,
          message: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ API",
        };
      } // X·ª≠ l√Ω nhi·ªÅu ƒë·ªãnh d·∫°ng response kh√°c nhau
      let responseData = response.data;
      let avatarData = responseData;

      console.log("Ph√¢n t√≠ch c·∫•u tr√∫c responseData:", responseData);

      // N·∫øu response l√† { success, data, message } format
      if (
        responseData &&
        responseData.success !== undefined &&
        responseData.data
      ) {
        avatarData = responseData.data;
        console.log("Tr√≠ch xu·∫•t data t·ª´ format chu·∫©n:", avatarData);
      }

      // Ki·ªÉm tra n·∫øu avatar n·∫±m tr·ª±c ti·∫øp trong data v√† l√† string
      if (
        typeof responseData === "string" &&
        (responseData.includes("/img/") ||
          responseData.includes("/avatar/") ||
          responseData.includes("/images/"))
      ) {
        avatarData = responseData;
        console.log("Avatar l√† ƒë∆∞·ªùng d·∫´n tr·ª±c ti·∫øp:", avatarData);
      }

      // Tr∆∞·ªùng h·ª£p data.avatar ho·∫∑c data l√† object c√≥ ch·ª©a avatar
      if (typeof avatarData === "object") {
        if (avatarData.avatar) {
          console.log("T√¨m th·∫•y avatar trong data.avatar", avatarData.avatar);
          avatarData = { avatar: avatarData.avatar };
        } else if (responseData.avatar) {
          console.log(
            "T√¨m th·∫•y avatar trong responseData.avatar",
            responseData.avatar
          );
          avatarData = { avatar: responseData.avatar };
        }
      }

      console.log("D·ªØ li·ªáu avatar cu·ªëi c√πng tr∆∞·ªõc khi tr·∫£ v·ªÅ:", avatarData);

      return {
        success: true,
        data: avatarData,
        message: "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error uploading avatar:", error);

      // Ki·ªÉm tra l·ªói token h·∫øt h·∫°n
      if (error.response?.status === 401) {
        console.log("Token h·∫øt h·∫°n, th·ª≠ refresh token...");
        try {
          // Th·ª≠ l√†m m·ªõi token v√† g·ª≠i l·∫°i y√™u c·∫ßu
          const tokenData = localStorageUtil.get("token");
          if (tokenData?.refreshToken) {
            const refreshResponse = await userService.refreshToken(
              tokenData.refreshToken
            );
            if (refreshResponse.accessToken) {
              // Update token v√† th·ª≠ l·∫°i
              localStorageUtil.set("token", {
                ...tokenData,
                accessToken: refreshResponse.accessToken,
                refreshToken:
                  refreshResponse.refreshToken || tokenData.refreshToken,
              });

              // ƒê·ªá quy g·ªçi l·∫°i h√†m upload sau khi refresh token
              return userService.uploadAvatar(file);
            }
          }
        } catch (refreshError) {
          console.error("Kh√¥ng th·ªÉ l√†m m·ªõi token:", refreshError);
          return {
            success: false,
            message: "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
            error: refreshError,
          };
        }
      }

      return {
        success: false,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t avatar",
        error: error,
      };
    }
  },
  /**
   * ‚úÖ Ki·ªÉm tra v√† l√†m m·ªõi token n·∫øu c·∫ßn
   * @returns {Promise<boolean>} Tr·∫£ v·ªÅ true n·∫øu token h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi th√†nh c√¥ng
   */
  ensureValidToken: async () => {
    try {
      const tokenData = localStorageUtil.get("token");
      if (!tokenData || !tokenData.accessToken) {
        console.error("Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c");
        return false;
      }

      // Ph√¢n t√≠ch JWT token ƒë·ªÉ ki·ªÉm tra h·∫øt h·∫°n
      const tokenParts = tokenData.accessToken.split(".");
      if (tokenParts.length !== 3) {
        console.error("Token kh√¥ng h·ª£p l·ªá");
        return false;
      }

      try {
        // Gi·∫£i m√£ ph·∫ßn payload c·ªßa token
        const payload = JSON.parse(atob(tokenParts[1]));
        const expiryTime = payload.exp * 1000; // Chuy·ªÉn sang milliseconds
        const currentTime = Date.now();

        // Ki·ªÉm tra n·∫øu token s·∫Øp h·∫øt h·∫°n (c√≤n d∆∞·ªõi 5 ph√∫t)
        if (expiryTime - currentTime < 5 * 60 * 1000) {
          console.log("Token s·∫Øp h·∫øt h·∫°n, ti·∫øn h√†nh l√†m m·ªõi..."); // G·ªçi h√†m refreshToken
          const refreshResult = await userService.refreshToken(
            tokenData.refreshToken
          );
          return (
            !!refreshResult &&
            (refreshResult.success ||
              refreshResult.accessToken ||
              (refreshResult.data &&
                (refreshResult.data.accessToken || refreshResult.data.success)))
          );
        }

        // Token v·∫´n c√≤n hi·ªáu l·ª±c
        return true;
      } catch (error) {
        console.error("L·ªói khi ph√¢n t√≠ch token:", error);
        return false;
      }
    } catch (error) {
      console.error("L·ªói khi ki·ªÉm tra token:", error);
      return false;
    }
  },
};
export const consultantService = {
  // L·∫•y danh s√°ch b√°c sƒ©
  getConsultants: async () => {
    try {
      const response = await apiClient.get("/consultants");
      return response.data;
    } catch (error) {
      console.error("Error fetching consultants:", error);
      throw error.response?.data || error;
    }
  },

  updateProfile: async (consultantDate) => {
    try {
      const response = await apiClient.put(
        "/consultants/profile",
        consultantDate
      );
      return response.data;
    } catch (error) {
      console.error("Error updating consultant profile:", error);
      throw error.response?.data || error;
    }
  },

  getConsultantProfile: async (consultantId) => {
    try {
      const response = await apiClient.get(`/consultants/${consultantId}`);
      return response.data;
    } catch (error) {
      console.error("Error fetching consultant profile:", error);
      throw error.response?.data || error;
    }
  },
};
