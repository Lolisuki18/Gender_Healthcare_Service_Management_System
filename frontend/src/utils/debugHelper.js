/**
 * debugHelper.js - Utility cho vi·ªác debug ·ª©ng d·ª•ng
 *
 * File n√†y cung c·∫•p c√°c h√†m h·ªó tr·ª£ cho vi·ªác debug ·ª©ng d·ª•ng,
 * ƒë·∫∑c bi·ªát l√† c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn x·ª≠ l√Ω avatar v√† response t·ª´ API
 */

// Bi·∫øn c·∫•u h√¨nh ƒë·ªÉ b·∫≠t/t·∫Øt debug
const DEBUG_CONFIG = {
  API_RESPONSES: true,
  AVATAR_UPDATES: true,
  REDUX_ACTIONS: true,
  LOCAL_STORAGE: true,
};

/**
 * Log th√¥ng tin debug v·ªõi ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc
 * @param {string} category - Danh m·ª•c debug (API_RESPONSES, AVATAR_UPDATES, v.v.)
 * @param {string} message - Th√¥ng ƒëi·ªáp debug
 * @param {any} data - D·ªØ li·ªáu c·∫ßn log
 */
export const debugLog = (category, message, data) => {
  if (process.env.NODE_ENV !== "production" && DEBUG_CONFIG[category]) {
    console.group(`üîç DEBUG [${category}]: ${message}`);

    if (data !== undefined) {
      if (typeof data === "object") {
        console.log(JSON.stringify(data, null, 2));
      } else {
        console.log(data);
      }
    }

    console.groupEnd();
  }
};

/**
 * Ph√¢n t√≠ch c·∫•u tr√∫c object response ƒë·ªÉ t√¨m avatar URL
 * @param {Object} response - Response t·ª´ API
 * @returns {string|null} - ƒê∆∞·ªùng d·∫´n avatar n·∫øu t√¨m th·∫•y, null n·∫øu kh√¥ng
 */
export const extractAvatarFromResponse = (response) => {
  debugLog("API_RESPONSES", "Ph√¢n t√≠ch response ƒë·ªÉ t√¨m avatar:", response);

  if (!response) {
    return null;
  }

  // C√°c v·ªã tr√≠ c√≥ th·ªÉ ch·ª©a avatar trong response
  const possiblePaths = [
    response.data?.data?.avatarUrl,
    response.data?.data?.avatar,
    response.data?.avatarUrl,
    response.data?.avatar,
    response.avatarUrl,
    response.avatar,
  ];

  // Ki·ªÉm tra n·∫øu response.data l√† string v√† c√≥ th·ªÉ l√† ƒë∆∞·ªùng d·∫´n
  if (
    typeof response.data === "string" &&
    (response.data.includes("/img/") ||
      response.data.includes("/avatar/") ||
      response.data.includes("/images/"))
  ) {
    possiblePaths.push(response.data);
  }

  // T√¨m gi√° tr·ªã ƒë·∫ßu ti√™n kh√°c null/undefined
  const avatarPath = possiblePaths.find(
    (path) => path !== undefined && path !== null
  );

  debugLog(
    "AVATAR_UPDATES",
    avatarPath
      ? "T√¨m th·∫•y ƒë∆∞·ªùng d·∫´n avatar:"
      : "Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n avatar",
    avatarPath
  );

  return avatarPath || null;
};

/**
 * In ra tr·∫°ng th√°i c·ªßa localStorage v√† sessionStorage
 */
export const logStorageState = () => {
  if (process.env.NODE_ENV !== "production" && DEBUG_CONFIG.LOCAL_STORAGE) {
    console.group("üóÑÔ∏è DEBUG [LOCAL_STORAGE]: Tr·∫°ng th√°i hi·ªán t·∫°i");

    // LocalStorage
    console.group("localStorage:");
    try {
      const userProfile = JSON.parse(
        localStorage.getItem("userProfile") || "{}"
      );
      console.log("userProfile:", userProfile);

      const token = localStorage.getItem("token")
        ? "‚úì C√≥ token"
        : "‚úó Kh√¥ng c√≥ token";
      console.log("token:", token);

      const user = JSON.parse(localStorage.getItem("user") || "{}");
      console.log("user:", user);
    } catch (e) {
      console.error("L·ªói khi ƒë·ªçc localStorage:", e);
    }
    console.groupEnd();

    // SessionStorage
    console.group("sessionStorage:");
    try {
      const lastUpdatedAvatar = sessionStorage.getItem("last_updated_avatar");
      console.log("last_updated_avatar:", lastUpdatedAvatar);
    } catch (e) {
      console.error("L·ªói khi ƒë·ªçc sessionStorage:", e);
    }
    console.groupEnd();

    console.groupEnd();
  }
};

export default {
  debugLog,
  extractAvatarFromResponse,
  logStorageState,
};
