/**
 * ReviewsContent.js - Component hi·ªÉn th·ªã n·ªôi dung ƒë√°nh gi√° v·ªõi tabs
 *
 * Ch·ª©c nƒÉng:
 * - Hi·ªÉn th·ªã tabs ƒë·ªÉ ph√¢n lo·∫°i ƒë√°nh gi√°: "T·∫•t c·∫£", "ƒê√£ ƒë√°nh gi√°", "Ch∆∞a ƒë√°nh gi√°"
 * - Qu·∫£n l√Ω tr·∫°ng th√°i active tab
 * - Hi·ªÉn th·ªã danh s√°ch ƒë√°nh gi√° t∆∞∆°ng ·ª©ng v·ªõi tab ƒë∆∞·ª£c ch·ªçn
 *
 * Design Pattern:
 * - Material-UI Tabs component v·ªõi custom styling
 * - Tab panels ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung kh√°c nhau
 * - Medical theme v·ªõi m√†u s·∫Øc ph√π h·ª£p
 */

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import {
  Box,
  Tabs,
  Tab,
  Typography,
  Card,
  CardContent,
  Rating,
  Chip,
  Avatar,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  IconButton,
  CircularProgress,
  Tooltip,
  Button,
} from '@mui/material';
import {
  CheckCircle as CheckCircleIcon,
  Schedule as ScheduleIcon,
  StarBorder as StarBorderIcon,
  FilterList as FilterListIcon,
  Science as ScienceIcon,
  Psychology as PsychologyIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  MedicalServices as MedicalServicesIcon,
  Star as StarIcon,
  Add as AddIcon,
} from '@mui/icons-material';
import ReviewForm from '../common/ReviewForm';
import Pagination from '@mui/material/Pagination';

// Import services
import reviewService from '../../services/reviewService';
import stiService from '../../services/stiService';
import consultantService from '../../services/consultantService';

// Import utils
import { notify } from '../../utils/notify';
import localStorageUtil from '@/utils/localStorage';

// Tab Panel Component
function TabPanel({ children, value, index, ...other }) {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`reviews-tabpanel-${index}`}
      aria-labelledby={`reviews-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 2 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

// Accessibility props for tabs
function a11yProps(index) {
  return {
    id: `reviews-tab-${index}`,
    'aria-controls': `reviews-tabpanel-${index}`,
  };
}

// Utility function to convert API date array to Date object
const convertApiDateToDate = (apiDate) => {
  if (!apiDate) return new Date();
  
  // If it's already a string or Date object, use it directly
  if (typeof apiDate === 'string' || apiDate instanceof Date) {
    return new Date(apiDate);
  }
  
  // If it's an array format like [2025, 7, 10, 23, 3, 5, 586396200]
  if (Array.isArray(apiDate) && apiDate.length >= 6) {
    const [year, month, day, hour, minute, second, nanosecond] = apiDate;
    // Note: JavaScript months are 0-indexed, so subtract 1 from month
    const millisecond = nanosecond ? Math.floor(nanosecond / 1000000) : 0;
    return new Date(year, month - 1, day, hour, minute, second, millisecond);
  }
  
  // Fallback to current date
  return new Date();
};

const ReviewsContent = () => {
  const [activeTab, setActiveTab] = useState(0);
  const [reviewDialogOpen, setReviewDialogOpen] = useState(false);
  const [selectedReview, setSelectedReview] = useState(null);
  const [rating, setRating] = useState(0);
  const [feedback, setFeedback] = useState('');
  const [loading, setLoading] = useState(false);
  const [reviews, setReviews] = useState([]);
  const [myRatings, setMyRatings] = useState([]); // ƒê√°nh gi√° ƒë√£ ho√†n th√†nh t·ª´ API
  const [stiTests, setStiTests] = useState([]);
  const [consultations, setConsultations] = useState([]);
  const [isLoadingReviews, setIsLoadingReviews] = useState(true);
  const [serviceFilter, setServiceFilter] = useState('all'); // 'all', 'sti', 'consultation'
  // Th√™m state cho l·ªçc ng√†y ƒë√°nh gi√°
  const [dateFrom, setDateFrom] = useState(null); // Date ho·∫∑c null
  const [dateTo, setDateTo] = useState(null); // Date ho·∫∑c null
  
  // States for edit/delete functionality
  const [isEditMode, setIsEditMode] = useState(false);
  const [editingReviewId, setEditingReviewId] = useState(null);
  const [page, setPage] = useState(1);
  const REVIEWS_PER_PAGE = 6;

  // Load reviews and services on component mount
  useEffect(() => {
    loadAllData();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  // Reset page khi ƒë·ªïi tab ho·∫∑c filter
  useEffect(() => {
    setPage(1);
  }, [activeTab, serviceFilter]);

  const loadAllData = async () => {
    try {
      setIsLoadingReviews(true);
      await Promise.all([
        loadReviews(),
        loadMyRatings(),
        loadSTITests(),
        loadConsultations(),
      ]);
    } catch (error) {
      notify.error('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i!');
    } finally {
      setIsLoadingReviews(false);
    }
  };

  const loadReviews = async () => {
    try {
      const data = await reviewService.getMyReviews();
      setReviews(data?.content || data?.data || data || []);
    } catch (error) {
      setReviews([]);
    }
  };

  const loadMyRatings = async () => {
    try {
      console.log('üîÑ ƒêang t·∫£i danh s√°ch ƒë√°nh gi√° t·ª´ API...');
      const data = await reviewService.getMyReviews(0, 100); // Load more items to get all ratings
      console.log('‚≠ê My Ratings API response:', data);
      const ratings = data?.content || data?.data || data || [];
      console.log('‚úÖ Processed ratings:', ratings);
      setMyRatings(ratings);
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i ratings:', error);
      setMyRatings([]);
    }
  };

  const loadSTITests = async () => {
    try {
      console.log('üîÑ ƒêang t·∫£i danh s√°ch STI tests t·ª´ API...');
      const data = await stiService.getMySTITests();
      console.log('üìä STI Tests API response:', data);
      
      // L·ªçc ch·ªâ nh·ªØng test ƒë√£ ho√†n th√†nh v·ªõi nhi·ªÅu tr·∫°ng th√°i kh√°c nhau
      const completedStatuses = ['COMPLETED', 'RESULTED', 'FINISHED', 'DONE', 'SUCCESS', 'ANALYZED'];
      const allTests = data?.data || data || [];
      console.log('üß™ All STI tests:', allTests);
      
      const completedTests = allTests.filter(test => {
        const hasValidId = test.id || test.serviceId;
        const hasValidStatus = test.status && completedStatuses.includes(test.status.toUpperCase());
        
        console.log(`üîç STI Test ${test.id || 'Unknown'}: hasValidId=${hasValidId}, status=${test.status}, hasValidStatus=${hasValidStatus}`);
        
        return hasValidId && hasValidStatus;
      });
      
      console.log('‚úÖ Completed STI tests:', completedTests);
      setStiTests(completedTests);
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i STI tests:', error);
      setStiTests([]);
    }
  };

  const loadConsultations = async () => {
    try {
      console.log('üîÑ ƒêang t·∫£i danh s√°ch consultations t·ª´ API...');
      const data = await consultantService.getMyConsultations();
      console.log('üí¨ Consultations API response:', data);
      
      // L·ªçc ch·ªâ nh·ªØng consultation ƒë√£ ho√†n th√†nh v·ªõi nhi·ªÅu tr·∫°ng th√°i kh√°c nhau
      const completedStatuses = ['COMPLETED', 'RESULTED', 'FINISHED', 'DONE', 'SUCCESS', 'CLOSED'];
      const allConsultations = data?.data || data || [];
      console.log('üíº All consultations:', allConsultations);
      
      const completedConsultations = allConsultations.filter(consultation => {
        const hasValidId = consultation.id || consultation.consultantId;
        const hasValidStatus = consultation.status && completedStatuses.includes(consultation.status.toUpperCase());
        
        console.log(`üîç Consultation ${consultation.id || 'Unknown'}: hasValidId=${hasValidId}, status=${consultation.status}, hasValidStatus=${hasValidStatus}`);
        
        return hasValidId && hasValidStatus;
      });
      
      console.log('‚úÖ Completed consultations:', completedConsultations);
      setConsultations(completedConsultations);
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i consultations:', error);
      setConsultations([]);
    }
  };


  // Refactor: L·∫•y t·∫•t c·∫£ d·ªãch v·ª• ƒë√£ ho√†n th√†nh, sau ƒë√≥ so s√°nh v·ªõi ƒë√°nh gi√° c·ªßa t√¥i
  const createReviewableServices = useCallback(() => {
    // 1. Gom t·∫•t c·∫£ d·ªãch v·ª• ƒë√£ ho√†n th√†nh (STI + Consultation)
    const completedServices = [];
    const completedStatusesSTI = ['COMPLETED', 'RESULTED', 'FINISHED', 'DONE', 'SUCCESS', 'ANALYZED'];
    const completedStatusesConsult = ['COMPLETED', 'RESULTED', 'FINISHED', 'DONE', 'SUCCESS', 'CLOSED'];

    stiTests.forEach((test, index) => {
      if (!test || (!test.testId && !test.id) || !test.serviceName) return;
      if (!test.status || !completedStatusesSTI.includes(test.status.toUpperCase())) return;
      // testId l√† duy nh·∫•t cho m·ªói l·∫ßn x√©t nghi·ªám, ∆∞u ti√™n test.testId, fallback test.id
      const uniqueTestId = test.testId || test.id;
      completedServices.push({
        id: `sti_${uniqueTestId}`,
        type: 'STI_SERVICE',
        serviceId: test.serviceId,
        serviceName: test.serviceName,
        consultantName: test.consultantName || 'Chuy√™n vi√™n STI',
        date: test.completedDate || test.updatedAt || new Date().toISOString(),
        testId: uniqueTestId,
        raw: test,
      });
    });

    consultations.forEach((consultation, index) => {
      if (!consultation || !consultation.consultantId || !consultation.consultantName) return;
      if (!consultation.status || !completedStatusesConsult.includes(consultation.status.toUpperCase())) return;
      completedServices.push({
        id: `consultation_${consultation.consultationId || consultation.consultantId}`,
        type: 'CONSULTANT',
        consultantId: consultation.consultantId,
        serviceName: `T∆∞ v·∫•n v·ªõi ${consultation.consultantName}`,
        consultantName: consultation.consultantName,
        date: consultation.completedDate || consultation.updatedAt || new Date().toISOString(),
        consultationId: consultation.consultationId,
        raw: consultation,
      });
    });

    // 2. L·∫•y danh s√°ch ƒë√°nh gi√° c·ªßa t√¥i (reviews)
    // So s√°nh t·ª´ng d·ªãch v·ª• ƒë√£ ho√†n th√†nh v·ªõi danh s√°ch ƒë√°nh gi√°
    const reviewableServices = completedServices.map((service) => {
      let matchedReview = null;
      if (service.type === 'STI_SERVICE') {
        // So s√°nh ch√≠nh x√°c theo testId (m·ªói l·∫ßn test l√† m·ªôt ƒë√°nh gi√° ri√™ng)
        matchedReview = reviews.find(
          (r) =>
            (r.targetType === 'STI_SERVICE' && r.testId && String(r.testId) === String(service.testId))
        );
      } else if (service.type === 'CONSULTANT') {
        matchedReview = reviews.find(
          (r) =>
            (r.targetType === 'CONSULTANT' && String(r.targetId) === String(service.consultantId)) ||
            (r.consultationId && String(r.consultationId) === String(service.consultationId))
        );
      }
      return {
        ...service,
        status: matchedReview ? 'completed' : 'pending',
        rating: matchedReview?.rating || 0,
        comment: matchedReview?.comment || '',
        reviewId: matchedReview?.id,
        isEligible: !matchedReview, // Ch·ªâ cho ph√©p ƒë√°nh gi√° n·∫øu ch∆∞a c√≥ review
        // debugInfo: matchedReview ? { ...matchedReview } : undefined,
      };
    });
    return reviewableServices;
  }, [stiTests, consultations, reviews]);

  const allReviewableServices = useMemo(() => {
    return createReviewableServices();
  }, [createReviewableServices]);
  
  // ...existing code...

  
  // Apply service filter with memoized services
  const filteredServices = allReviewableServices.filter(service => {
    if (serviceFilter === 'all') return true;
    if (serviceFilter === 'sti') return service.type === 'STI_SERVICE';
    if (serviceFilter === 'consultation') return service.type === 'CONSULTANT';
    return true;
  });

  // H√†m l·ªçc theo ng√†y ƒë√°nh gi√° (√°p d·ª•ng cho completed reviews)
  const isWithinDateRange = (date) => {
    if (!date) return true;
    let reviewDate = null;
    if (typeof date === 'string' || date instanceof Date) {
      reviewDate = new Date(date);
    } else if (Array.isArray(date) && date.length >= 6) {
      reviewDate = new Date(date[0], date[1] - 1, date[2], date[3], date[4], date[5]);
    } else {
      reviewDate = new Date();
    }
    if (dateFrom && reviewDate < new Date(dateFrom)) return false;
    if (dateTo && reviewDate > new Date(dateTo)) return false;
    return true;
  };

  // S·ª≠ d·ª•ng myRatings t·ª´ API cho completed reviews, c√≥ l·ªçc ng√†y
  const filteredMyRatings = useMemo(() => {
    return myRatings.filter(rating => {
      if (serviceFilter === 'all') return isWithinDateRange(rating.createdAt);
      if (serviceFilter === 'sti') return (rating.targetType === 'STI_SERVICE' || rating.serviceType === 'STI') && isWithinDateRange(rating.createdAt);
      if (serviceFilter === 'consultation') return (rating.targetType === 'CONSULTANT' || rating.serviceType === 'CONSULTATION') && isWithinDateRange(rating.createdAt);
      return isWithinDateRange(rating.createdAt);
    });
  }, [myRatings, serviceFilter, dateFrom, dateTo]);

  // Create unique service counts to avoid duplicates - only count current user's services
  const uniqueSTIServices = new Set();
  const uniqueConsultationServices = new Set();
  
  // Add completed reviews (t·ª´ API ƒë√£ filter theo user)
  filteredMyRatings.forEach(rating => {
    if (rating.targetType === 'STI_SERVICE' || rating.serviceType === 'STI') {
      // S·ª≠ d·ª•ng targetId ho·∫∑c serviceId l√†m unique identifier
      const identifier = rating.targetId || rating.serviceId || `rating_${rating.id}`;
      uniqueSTIServices.add(identifier);
    } else if (rating.targetType === 'CONSULTANT' || rating.serviceType === 'CONSULTATION') {
      // S·ª≠ d·ª•ng targetId ho·∫∑c consultantId + consultationId l√†m unique identifier
      const identifier = rating.targetId || `consultant_${rating.consultantId}_${rating.consultationId || 'unknown'}` || `rating_${rating.id}`;
      uniqueConsultationServices.add(identifier);
    }
  });
  
  // Add pending services (ch·ªâ nh·ªØng d·ªãch v·ª• ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√° v√† thu·ªôc v·ªÅ user hi·ªán t·∫°i)
  allReviewableServices.forEach(service => {
    if (service.type === 'STI_SERVICE' && service.status === 'pending') {
      // So s√°nh b·∫±ng stiTestId (FE truy·ªÅn testId, BE tr·∫£ stiTestId)
      const serviceTestId = service.testId;
      const hasReview = filteredMyRatings.some(rating =>
        (rating.targetType === 'STI_SERVICE' || rating.serviceType === 'STI') &&
        (
          (rating.stiTestId && String(rating.stiTestId) === String(serviceTestId)) ||
          (rating.testId && String(rating.testId) === String(serviceTestId)) // fallback n·∫øu BE tr·∫£ testId
        )
      );
      if (!hasReview && serviceTestId) {
        uniqueSTIServices.add(serviceTestId);
      }
    } else if (service.type === 'CONSULTANT' && service.status === 'pending') {
      // So s√°nh b·∫±ng consultationId
      const consultationIdentifier = service.consultationId;
      const hasReview = filteredMyRatings.some(rating =>
        (rating.targetType === 'CONSULTANT' || rating.serviceType === 'CONSULTATION') &&
        (
          (rating.consultationId && String(rating.consultationId) === String(consultationIdentifier))
        )
      );
      if (!hasReview && consultationIdentifier) {
        const identifier = `consultant_${service.consultantId}_${consultationIdentifier}`;
        uniqueConsultationServices.add(identifier);
      }
    }
  });

  // ...existing code...

  const completedReviews = filteredMyRatings; // S·ª≠ d·ª•ng API data (ƒë√£ filter theo user v√† ng√†y)
  // L·ªçc l·∫°i pendingReviews: ch·ªâ l·∫•y nh·ªØng d·ªãch v·ª• ch∆∞a c√≥ ƒë√°nh gi√° (so s√°nh consultationId ho·∫∑c stiTestId/testId)
  // Kh√¥ng l·ªçc theo ng√†y cho pending
  const pendingReviews = filteredServices.filter(service => {
    if (service.type === 'STI_SERVICE') {
      // So s√°nh v·ªõi t·∫•t c·∫£ review ƒë√£ c√≥ b·∫±ng stiTestId ho·∫∑c testId
      return !filteredMyRatings.some(rating =>
        (rating.targetType === 'STI_SERVICE' || rating.serviceType === 'STI') &&
        (
          (rating.stiTestId && String(rating.stiTestId) === String(service.testId)) ||
          (rating.testId && String(rating.testId) === String(service.testId))
        )
      );
    } else if (service.type === 'CONSULTANT') {
      return !filteredMyRatings.some(rating =>
        (rating.targetType === 'CONSULTANT' || rating.serviceType === 'CONSULTATION') &&
        (
          (rating.consultationId && String(rating.consultationId) === String(service.consultationId))
        )
      );
    }
    return true;
  });
  const allReviews = [...completedReviews, ...pendingReviews];
  
  // ...existing code...

  // T√≠nh to√°n d·ªØ li·ªáu ph√¢n trang cho t·ª´ng tab
  const paginatedAllReviews = allReviews.slice((page - 1) * REVIEWS_PER_PAGE, page * REVIEWS_PER_PAGE);
  const paginatedCompletedReviews = completedReviews.slice((page - 1) * REVIEWS_PER_PAGE, page * REVIEWS_PER_PAGE);
  const paginatedPendingReviews = pendingReviews.slice((page - 1) * REVIEWS_PER_PAGE, page * REVIEWS_PER_PAGE);

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };

  /**
   * Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë√°nh gi√° v√† m·ªü form - Ch·ª©c nƒÉng n√†y ƒë∆∞·ª£c chuy·ªÉn v√†o handleEditReview 
   * sau khi t√°ch component ReviewForm ƒë·ªÉ tr√°nh code tr√πng l·∫∑p
   */

  // Close review dialog and reset related state
  const handleCloseReviewDialog = () => {
    console.log('üîí Closing review dialog and resetting state');
    setReviewDialogOpen(false);
    setSelectedReview(null);
    setRating(0);
    setFeedback('');
    setIsEditMode(false);
    setEditingReviewId(null);
  };

  // Handle edit or add review action
  const handleEditReview = async (review) => {
    console.log('‚úèÔ∏è Starting edit/add review:', review);
    try {
      // L·∫•y t√™n kh√°ch h√†ng t·ª´ localStorage
      const userData = localStorageUtil.getUserData();
      const customerName = userData?.fullName || userData?.name || '';
      // Merge customerName v√†o review object
      const reviewWithCustomer = { ...review, customerName };

      // Determine if this is a pending review with a temporary ID
      const isPendingTempReview = reviewWithCustomer.id && typeof reviewWithCustomer.id === 'string' && 
        (reviewWithCustomer.id.includes('temp') || reviewWithCustomer.id.includes('consultation_') || 
          reviewWithCustomer.id.includes('sti_'));
      // Check if the review has a valid ID for editing
      const hasValidRatingId = reviewWithCustomer.ratingId && !isNaN(parseInt(reviewWithCustomer.ratingId));
      const hasValidId = reviewWithCustomer.id && typeof reviewWithCustomer.id === 'number' && !isNaN(reviewWithCustomer.id);
      // For pending reviews without valid IDs, this is an "add" operation
      const isAddOperation = isPendingTempReview && !hasValidRatingId && !hasValidId;
      // Prepare form data
      setSelectedReview(reviewWithCustomer);
      setRating(reviewWithCustomer.rating || 0);
      setFeedback(reviewWithCustomer.comment || '');
      // Set edit mode based on whether this is an add or edit operation
      setIsEditMode(!isAddOperation);
      // For edit operations, ensure we have a valid numeric ID
      if (!isAddOperation) {
        const numericId = hasValidRatingId ? reviewWithCustomer.ratingId : (hasValidId ? reviewWithCustomer.id : null);
        if (!numericId) {
          throw new Error("Kh√¥ng t√¨m th·∫•y ID ƒë√°nh gi√° h·ª£p l·ªá. B·∫°n c·∫ßn g·ª≠i ƒë√°nh gi√° tr∆∞·ªõc khi c√≥ th·ªÉ ch·ªânh s·ª≠a.");
        }
        setEditingReviewId(numericId);
        console.log('‚úÖ Edit review dialog opened with valid ID:', numericId);
      } else {
        // For add operations, check eligibility
        if (!reviewWithCustomer.isEligible) {
          throw new Error("D·ªãch v·ª• n√†y ch∆∞a ho√†n th√†nh ho·∫∑c kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ ƒë√°nh gi√°.");
        }
        setEditingReviewId(null);
        console.log('‚úÖ Add review dialog opened for new review');
      }
      // Open the review dialog
      setReviewDialogOpen(true);
    } catch (error) {
      console.error('‚ùå Error opening review dialog:', error);
      notify.error('L·ªói', error.message || 'Kh√¥ng th·ªÉ m·ªü form ƒë√°nh gi√°');
    }
  };

  // ...existing code...

  /**
   * X·ª≠ l√Ω submit ƒë√°nh gi√° (t·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
   * Form ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi component ReviewForm ƒë√£ t√°ch
   */
  const handleSubmitReview = async () => {
    // ...existing code...
    
    if (rating === 0) {
      notify.warning('Th√¥ng b√°o', 'Vui l√≤ng ch·ªçn s·ªë sao ƒë√°nh gi√°!');
      return;
    }

    if (feedback.trim().length < 10) {
      notify.warning('Th√¥ng b√°o', 'Vui l√≤ng nh·∫≠p √≠t nh·∫•t 10 k√Ω t·ª± cho ph·∫ßn ƒë√°nh gi√°!');
      return;
    }

    try {
      setLoading(true);
      // T·∫°o payload ƒë√∫ng chu·∫©n y√™u c·∫ßu backend: ch·ªâ truy·ªÅn rating (b·∫Øt bu·ªôc), comment (n·∫øu c√≥), consultationId ho·∫∑c stiTestId n·∫øu c√≥
      const reviewData = {
        rating: rating
      };
      if (feedback && feedback.trim().length > 0) {
        reviewData.comment = feedback.trim();
      }
      if (selectedReview.type === 'STI_SERVICE' && selectedReview.testId) {
        reviewData.stiTestId = selectedReview.testId;
      }
      if (selectedReview.type === 'CONSULTANT' && selectedReview.consultationId) {
        reviewData.consultationId = selectedReview.consultationId;
      }

      // ...existing code...

      // Ki·ªÉm tra xem ƒë√¢y l√† edit mode hay create mode
      if (isEditMode && editingReviewId) {
        // ...existing code...
        
        // Ki·ªÉm tra ID ph·∫£i l√† s·ªë h·ª£p l·ªá
        if (isNaN(parseInt(editingReviewId))) {
          throw new Error("ID ƒë√°nh gi√° kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi m·ªôt ƒë√°nh gi√° kh√°c.");
        }
        
        await reviewService.updateReview(editingReviewId, reviewData);
        console.log('‚úÖ Review updated successfully');
        notify.success('Th√†nh c√¥ng', 'ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
      } else {
        // ...existing code...
        
        // Ki·ªÉm tra chi ti·∫øt ƒëi·ªÅu ki·ªán tr∆∞·ªõc khi g·ª≠i (ch·ªâ cho create mode)
        if (!selectedReview.isEligible) {
          let reason = 'B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ ƒë√°nh gi√° d·ªãch v·ª• n√†y.';
          
          if (selectedReview.debugInfo) {
            const debug = selectedReview.debugInfo;
            if (!debug.isCompleted) {
              reason = `D·ªãch v·ª• ch∆∞a ho√†n th√†nh (tr·∫°ng th√°i hi·ªán t·∫°i: "${debug.originalStatus}"). Ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° sau khi d·ªãch v·ª• ƒë√£ ho√†n th√†nh.`;
            } else if (debug.hasExistingReview) {
              reason = 'B·∫°n ƒë√£ ƒë√°nh gi√° d·ªãch v·ª• n√†y r·ªìi. M·ªói d·ªãch v·ª• ch·ªâ ƒë∆∞·ª£c ƒë√°nh gi√° m·ªôt l·∫ßn.';
            } else if (!debug.hasRequiredInfo) {
              reason = 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ ƒë√°nh gi√° d·ªãch v·ª• n√†y.';
            }
          }
          
          throw new Error(reason);
        }

      // Ki·ªÉm tra th√™m ƒëi·ªÅu ki·ªán c·ª• th·ªÉ cho t·ª´ng lo·∫°i ƒë√°nh gi√°
      if (selectedReview.type === 'STI_SERVICE') {
        // Ki·ªÉm tra serviceId v√† testId
        if (!selectedReview.serviceId) {
          throw new Error('Thi·∫øu th√¥ng tin serviceId. Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√° cho d·ªãch v·ª• STI.');
        }
        if (!selectedReview.testId) {
          throw new Error('Thi·∫øu th√¥ng tin stiTestId. Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√° cho d·ªãch v·ª• STI.');
        }
        // Ki·ªÉm tra th√™m xem c√≥ ph·∫£i l√† d·ªãch v·ª• c·ªßa user n√†y kh√¥ng
        const originalTest = stiTests.find(test => 
          test.serviceId === selectedReview.serviceId || test.id === selectedReview.testId
        );
        if (!originalTest) {
          throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin d·ªãch v·ª• STI t∆∞∆°ng ·ª©ng. Vui l√≤ng th·ª≠ l·∫°i.');
        }
        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán v·ªõi backend tr∆∞·ªõc khi g·ª≠i (n·∫øu API h·ªó tr·ª£)
        try {
          const eligibilityCheck = await reviewService.checkSTIServiceEligibility(selectedReview.serviceId);
          console.log('üîç STI Service Eligibility Check Response:', eligibilityCheck);
          if (eligibilityCheck && eligibilityCheck.success) {
            const eligibilityData = eligibilityCheck.data;
            if (eligibilityData && !eligibilityData.canRate) {
              throw new Error(`Backend t·ª´ ch·ªëi: ${eligibilityData.reason || eligibilityCheck.message || 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë√°nh gi√° d·ªãch v·ª• n√†y'}`);
            }
            if (eligibilityData && eligibilityData.hasRated) {
              throw new Error('B·∫°n ƒë√£ ƒë√°nh gi√° d·ªãch v·ª• n√†y r·ªìi. M·ªói d·ªãch v·ª• ch·ªâ ƒë∆∞·ª£c ƒë√°nh gi√° m·ªôt l·∫ßn.');
            }
          } else if (eligibilityCheck && !eligibilityCheck.eligible) {
            // Fallback cho format c≈©
            throw new Error(`Backend t·ª´ ch·ªëi: ${eligibilityCheck.message || 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë√°nh gi√° d·ªãch v·ª• n√†y'}`);
          }
        } catch (eligibilityError) {
          if (eligibilityError.message?.includes('not available') || 
              eligibilityError.message?.includes('404') ||
              eligibilityError.message?.includes('No static resource') ||
              eligibilityError.response?.status === 404 ||
              eligibilityError.response?.status === 500) {
            // Skip eligibility check
          } else {
            throw eligibilityError;
          }
        }
        // ƒê√°nh gi√° cho d·ªãch v·ª• STI
        // Lu√¥n truy·ªÅn sti_test_id (snake_case cho backend Java)
        const stiServiceReviewData = {
          rating: reviewData.rating,
          comment: reviewData.comment,
          sti_test_id: selectedReview.testId
        };
        // Log payload g·ª≠i l√™n backend
        console.log('[DEBUG] Payload g·ª≠i ƒë√°nh gi√° STI:', stiServiceReviewData);
        // URL endpoint: /ratings/sti-service/{serviceId}
        await reviewService.createSTIServiceReview(selectedReview.serviceId, stiServiceReviewData);
        // ...existing code...
        
      } else if (selectedReview.type === 'STI_PACKAGE') {
        // Ki·ªÉm tra packageId
        if (!selectedReview.packageId) {
          throw new Error('Thi·∫øu th√¥ng tin packageId. Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√° cho g√≥i STI.');
        }
        
        // ƒê√°nh gi√° cho g√≥i STI
        // ...existing code...
        
        // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë√°nh gi√° theo format m·∫´u JSON
        const stiPackageReviewData = {
          rating: reviewData.rating,
          comment: reviewData.comment
        };
        
        // URL endpoint: /ratings/sti-package/{packageId}
        await reviewService.createSTIPackageReview(selectedReview.packageId, stiPackageReviewData);
        // ...existing code...
        
      } else if (selectedReview.type === 'CONSULTANT') {
        // Ki·ªÉm tra consultantId v√† consultationId
        if (!selectedReview.consultantId) {
          throw new Error('Thi·∫øu th√¥ng tin consultantId. Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√° cho t∆∞ v·∫•n vi√™n.');
        }
        if (!selectedReview.consultationId) {
          // Thi·∫øu consultationId, nh∆∞ng c√≥ consultantId n√™n v·∫´n ti·∫øp t·ª•c
        }
        // Ki·ªÉm tra th√™m xem c√≥ ph·∫£i l√† consultation c·ªßa user n√†y kh√¥ng
        const originalConsultation = consultations.find(consultation => 
          consultation.consultantId === selectedReview.consultantId || consultation.consultationId === selectedReview.consultationId
        );
        if (!originalConsultation) {
          throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin bu·ªïi t∆∞ v·∫•n t∆∞∆°ng ·ª©ng. Vui l√≤ng th·ª≠ l·∫°i.');
        }
        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán v·ªõi backend tr∆∞·ªõc khi g·ª≠i (n·∫øu API h·ªó tr·ª£)
        try {
          const eligibilityCheck = await reviewService.checkConsultantEligibility(selectedReview.consultantId);
          console.log('üîç Consultant Eligibility Check Response:', eligibilityCheck);
          if (eligibilityCheck && eligibilityCheck.success) {
            const eligibilityData = eligibilityCheck.data;
            if (eligibilityData && !eligibilityData.canRate) {
              throw new Error(`Backend t·ª´ ch·ªëi: ${eligibilityData.reason || eligibilityCheck.message || 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë√°nh gi√° t∆∞ v·∫•n vi√™n n√†y'}`);
            }
            if (eligibilityData && eligibilityData.hasRated) {
              throw new Error('B·∫°n ƒë√£ ƒë√°nh gi√° t∆∞ v·∫•n vi√™n n√†y r·ªìi. M·ªói t∆∞ v·∫•n vi√™n ch·ªâ ƒë∆∞·ª£c ƒë√°nh gi√° m·ªôt l·∫ßn cho m·ªói bu·ªïi t∆∞ v·∫•n.');
            }
          } else if (eligibilityCheck && !eligibilityCheck.eligible) {
            // Fallback cho format c≈©
            throw new Error(`Backend t·ª´ ch·ªëi: ${eligibilityCheck.message || 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë√°nh gi√° t∆∞ v·∫•n vi√™n n√†y'}`);
          }
        } catch (eligibilityError) {
          if (eligibilityError.message?.includes('not available') || 
              eligibilityError.message?.includes('404') ||
              eligibilityError.message?.includes('No static resource') ||
              eligibilityError.response?.status === 404 ||
              eligibilityError.response?.status === 500) {
            // Skip eligibility check
          } else {
            throw eligibilityError;
          }
        }
        // ƒê√°nh gi√° cho t∆∞ v·∫•n vi√™n
        // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë√°nh gi√° theo format m·∫´u JSON
        const consultantReviewData = {
          rating: reviewData.rating,
          comment: reviewData.comment
        };
        if (selectedReview.consultationId) {
          consultantReviewData.consultationId = selectedReview.consultationId;
        }
        // Log payload g·ª≠i l√™n backend
        console.log('[DEBUG] Payload g·ª≠i ƒë√°nh gi√° t∆∞ v·∫•n:', consultantReviewData);
        // URL endpoint: /ratings/consultant/{consultantId}
        await reviewService.createConsultantReview(selectedReview.consultantId, consultantReviewData);
        // ...existing code...
        
      } else {
        throw new Error(`Lo·∫°i ƒë√°nh gi√° kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${selectedReview.type}`);
      }
      } // K·∫øt th√∫c else block for create mode

      // ...existing code...
      
      // Th√¥ng b√°o th√†nh c√¥ng kh√°c nhau cho edit vs create
      if (isEditMode) {
        notify.success('Th√†nh c√¥ng', 'ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
      } else {
        notify.success('Th√†nh c√¥ng', 'ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª tr·∫£i nghi·ªám.');
      }
      
      // Reload data to update the list
      await loadAllData();
      
      handleCloseReviewDialog();
    } catch (error) {
      // Handle specific error messages
      let errorMessage = 'C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i!';
      let errorTitle = 'Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°';
      
      if (error.message) {
        // Ki·ªÉm tra c√°c l·ªói t·ª´ frontend validation
        if (error.message.includes('B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán') || 
            error.message.includes('D·ªãch v·ª• ch∆∞a ho√†n th√†nh') ||
            error.message.includes('B·∫°n ƒë√£ ƒë√°nh gi√°') ||
            error.message.includes('Thi·∫øu th√¥ng tin')) {
          errorMessage = error.message;
          errorTitle = 'ƒêi·ªÅu ki·ªán kh√¥ng ƒë∆∞·ª£c ƒë√°p ·ª©ng';
        }
        // Ki·ªÉm tra l·ªói t·ª´ backend
        else if (error.message.includes('not eligible to rate') || 
            error.message.includes('You are not eligible')) {
          errorMessage = 'Backend x√°c nh·∫≠n b·∫°n kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë√°nh gi√° d·ªãch v·ª• n√†y. C√≥ th·ªÉ do:\n‚Ä¢ D·ªãch v·ª• ch∆∞a ho√†n th√†nh\n‚Ä¢ B·∫°n ƒë√£ ƒë√°nh gi√° r·ªìi\n‚Ä¢ D·ªãch v·ª• kh√¥ng thu·ªôc v·ªÅ t√†i kho·∫£n c·ªßa b·∫°n\n‚Ä¢ Th·ªùi gian ƒë√°nh gi√° ƒë√£ h·∫øt h·∫°n';
          errorTitle = 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë√°nh gi√°';
        } else if (error.message.includes('already reviewed') || 
                   error.message.includes('already rated') ||
                   error.message.includes('duplicate')) {
          errorMessage = 'B·∫°n ƒë√£ ƒë√°nh gi√° d·ªãch v·ª• n√†y r·ªìi. M·ªói d·ªãch v·ª• ch·ªâ ƒë∆∞·ª£c ƒë√°nh gi√° m·ªôt l·∫ßn.';
          errorTitle = 'ƒê√°nh gi√° tr√πng l·∫∑p';
        } else if (error.message.includes('service not found') || 
                   error.message.includes('not found') ||
                   error.message.includes('consultant not found')) {
          errorMessage = 'Kh√¥ng t√¨m th·∫•y th√¥ng tin d·ªãch v·ª• ho·∫∑c t∆∞ v·∫•n vi√™n. Vui l√≤ng l√†m m·ªõi trang v√† th·ª≠ l·∫°i.';
          errorTitle = 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu';
        } else if (error.message.includes('unauthorized') || 
                   error.message.includes('Unauthorized') ||
                   error.message.includes('authentication') ||
                   error.message.includes('permission')) {
          errorMessage = 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
          errorTitle = 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p';
        } else if (error.message.includes('network') || 
                   error.message.includes('Network') ||
                   error.message.includes('connection')) {
          errorMessage = 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.';
          errorTitle = 'L·ªói k·∫øt n·ªëi';
        } else if (error.message.includes('timeout') || 
                   error.message.includes('Timeout')) {
          errorMessage = 'Y√™u c·∫ßu qu√° th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i sau.';
          errorTitle = 'H·∫øt th·ªùi gian ch·ªù';
        } else {
          errorMessage = error.message;
        }
      }
      
      // Ki·ªÉm tra l·ªói t·ª´ response backend
      if (error.response?.data?.message) {
        const backendMessage = error.response.data.message;
        
        // ∆Øu ti√™n s·ª≠ d·ª•ng message t·ª´ backend n·∫øu c√≥ th√¥ng tin c·ª• th·ªÉ
        if (backendMessage.includes('not eligible') || 
            backendMessage.includes('kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán') ||
            backendMessage.includes('You are not eligible')) {
          errorMessage = `Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë√°nh gi√°: ${backendMessage}`;
          errorTitle = 'Backend t·ª´ ch·ªëi y√™u c·∫ßu';
        } else if (backendMessage.includes('already')) {
          errorMessage = `ƒê√£ t·ªìn t·∫°i: ${backendMessage}`;
          errorTitle = 'D·ªØ li·ªáu tr√πng l·∫∑p';
        } else if (backendMessage.includes('not found')) {
          errorMessage = `Kh√¥ng t√¨m th·∫•y: ${backendMessage}`;
          errorTitle = 'D·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i';
        } else if (backendMessage.trim()) {
          errorMessage = backendMessage;
        }
      }
      
      notify.error(errorTitle, errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // H√†m ki·ªÉm tra c√≤n trong th·ªùi gian cho ph√©p ch·ªânh s·ª≠a (v√≠ d·ª•: 7 ng√†y)
  // Cho ph√©p ch·ªânh s·ª≠a n·∫øu v·∫´n c√πng ng√†y (theo local time) ho·∫∑c ch∆∞a qu√° 24h
  // S·ª≠ d·ª•ng updatedAt (n·∫øu c√≥), n·∫øu kh√¥ng th√¨ d√πng createdAt. H·ªó tr·ª£ c·∫£ ki·ªÉu m·∫£ng [yyyy,mm,dd,hh,mm,ss,ms]
  const getApiDate = (dateField) => {
    if (!dateField) return null;
    if (Array.isArray(dateField) && dateField.length >= 6) {
      // [yyyy, mm, dd, hh, mm, ss, ms?] (mm: 1-12)
      const [y, m, d, h, min, s] = dateField;
      return new Date(y, m - 1, d, h, min, s);
    }
    return new Date(dateField);
  };

  const isEditAllowed = (review) => {
    // Ch·ªâ d√πng ng√†y t·∫°o (createdAt)
    const baseDate = getApiDate(review.createdAt);
    if (!baseDate) return false;
    const now = new Date();
    // So s√°nh theo ng√†y th√°ng nƒÉm local
    if (
      baseDate.getFullYear() === now.getFullYear() &&
      baseDate.getMonth() === now.getMonth() &&
      baseDate.getDate() === now.getDate()
    ) {
      return true;
    }
    // N·∫øu kh√°c ng√†y, v·∫´n cho ph√©p n·∫øu ch∆∞a qu√° 24h th·ª±c t·∫ø
    const diffMs = now - baseDate;
    const diffHours = diffMs / (1000 * 60 * 60);
    return diffHours <= 24;
  };

  const renderCompletedReview = (review, uniqueKey) => (
    <Card 
      key={uniqueKey} 
      sx={{ 
        mb: 3,
        borderRadius: '16px',
        boxShadow: '0 4px 20px rgba(74, 144, 226, 0.08)',
        border: '1px solid rgba(74, 144, 226, 0.1)',
        background: 'rgba(255, 255, 255, 0.95)',
        backdropFilter: 'blur(10px)',
        transition: 'all 0.3s ease',
        position: 'relative',
        minHeight: '200px',
        // B·ªè maxHeight ƒë·ªÉ cho ph√©p card m·ªü r·ªông theo n·ªôi dung
        maxWidth: '100%',
        width: '100%',
        display: 'flex',
        flexDirection: 'column',
        '&:hover': {
          transform: 'translateY(-2px)',
          boxShadow: '0 8px 30px rgba(74, 144, 226, 0.15)',
        }
      }}
    >
      <CardContent sx={{ p: { xs: 2, md: 3 }, flex: 1, display: 'flex', flexDirection: 'column' }}>
        <Grid container spacing={{ xs: 2, md: 5 }} sx={{ width: '100%', m: 0, justifyContent: 'space-between' }}>
          <Grid xs={12} md={6.5} sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start' }}>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
              <Avatar 
                sx={{ 
                  width: 48, 
                  height: 48, 
                  mr: 2,
                  alignSelf: 'flex-start',
                  background: 'linear-gradient(135deg, #4A90E2, #1ABC9C)',
                  fontSize: '18px',
                  fontWeight: 600,
                  boxShadow: '0 4px 12px rgba(74, 144, 226, 0.3)',
                }}
              >
                {(review.consultantName || review.providerName || 'N/A').split(' ').pop()[0]}
              </Avatar>
              <Box>
                {/* Th√¥ng tin d·ªãch v·ª• */}
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
                  <Typography variant="h6" sx={{ fontWeight: 600, color: '#2D3748', fontSize: '18px' }}>
                    {/* L·∫•y t√™n d·ªãch v·ª• ho·∫∑c t√™n t∆∞ v·∫•n vi√™n t·ª´ API */}
                    {review.targetType === 'STI_SERVICE' ? (review.targetName || 'D·ªãch v·ª•') : review.targetType === 'CONSULTANT' ? (review.targetName || 'T∆∞ v·∫•n vi√™n') : (review.serviceName || review.consultantName || 'D·ªãch v·ª•')}
                  </Typography>
                  {/* Hi·ªÉn th·ªã ID d·ªãch v·ª•
                  {review.targetType === 'STI_SERVICE' && (
                    <Typography variant="caption" sx={{ color: '#888', ml: 1 }}>
                      (ID: {review.stiTestId || review.testId || review.targetId || 'N/A'})
                    </Typography>
                  )}
                  {review.targetType === 'CONSULTANT' && (
                    <Typography variant="caption" sx={{ color: '#888', ml: 1 }}>
                      (ID: {review.consultationId || review.targetId || 'N/A'})
                    </Typography>
                  )} */}
                  {review.targetType === 'STI_SERVICE' && (
                    <Chip
                      icon={<ScienceIcon sx={{ fontSize: '12px !important' }} />}
                      label="STI"
                      size="small"
                      sx={{
                        background: 'rgba(255, 152, 0, 0.1)',
                        color: '#FF9800',
                        border: '1px solid rgba(255, 152, 0, 0.3)',
                        fontSize: '10px',
                        fontWeight: 600,
                        height: '20px',
                        '& .MuiChip-icon': {
                          color: '#FF9800'
                        }
                      }}
                    />
                  )}
                  {review.targetType === 'CONSULTANT' && (
                    <Chip
                      icon={<PsychologyIcon sx={{ fontSize: '12px !important' }} />}
                      label="T∆∞ v·∫•n"
                      size="small"
                      sx={{
                        background: 'rgba(76, 175, 80, 0.1)',
                        color: '#4CAF50',
                        border: '1px solid rgba(76, 175, 80, 0.3)',
                        fontSize: '10px',
                        fontWeight: 600,
                        height: '20px',
                        '& .MuiChip-icon': {
                          color: '#4CAF50'
                        }
                      }}
                    />
                  )}
                </Box>
                {/* T√™n ng∆∞·ªùi ƒë√°nh gi√° */}
                <Typography variant="body2" sx={{ color: '#4A5568', fontSize: '14px', fontWeight: 500, mb: 0.5 }}>
                  {review.maskedUserName || review.userFullName || review.customerName || review.userName || ''}
                </Typography>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
                  <Typography 
                    variant="body1" 
                    sx={{ 
                      color: '#2D3748',
                      fontSize: '15px',
                      lineHeight: 1.6,
                      fontStyle: 'italic',
                      pl: 1,
                      borderLeft: '3px solid #4A90E2',
                      background: 'rgba(74, 144, 226, 0.05)',
                      p: 2,
                      borderRadius: '8px',
                      mb: 1,
                      display: 'block',
                      wordWrap: 'break-word',
                      whiteSpace: 'pre-line',
                      width: { xs: '100%', md: '850px' },
                      minWidth: { xs: '100%', md: '850px' },
                      maxWidth: { xs: '100%', md: '850px' },
                      overflow: 'auto',
                      // height: { xs: 'auto', md: '120px' },
                      // maxHeight: { xs: 'none', md: '120px' },
                      // minHeight: { xs: '60px', md: '120px' },
                      boxSizing: 'border-box',
                    }}
                  >
                    "{review.comment || 'Kh√¥ng c√≥ b√¨nh lu·∫≠n'}"
                  </Typography>
                </Box>
                {/* Hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ staff n·∫øu c√≥ */}
                {review.staffReply && (
                  <Box sx={{ mt: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Avatar 
                        sx={{ 
                          width: 24, 
                          height: 24, 
                          mr: 1,
                          background: 'linear-gradient(135deg, #1ABC9C, #4A90E2)',
                          fontSize: '12px',
                          fontWeight: 600,
                        }}
                      >
                        <MedicalServicesIcon sx={{ fontSize: '14px', color: 'white' }} />
                      </Avatar>
                      <Typography 
                        variant="body2" 
                        sx={{ 
                          color: '#1ABC9C',
                          fontSize: '13px',
                          fontWeight: 600
                        }}
                      >
                        Ph·∫£n h·ªìi t·ª´ nh√¢n vi√™n y t·∫ø
                        {review.repliedAt && (
                          <Typography 
                            component="span" 
                            variant="caption" 
                            sx={{ 
                              color: '#6B7280',
                              fontSize: '11px',
                              fontWeight: 400,
                              ml: 1
                            }}
                          >
                            ‚Ä¢ {convertApiDateToDate(review.repliedAt).toLocaleDateString('vi-VN')}
                          </Typography>
                        )}
                      </Typography>
                    </Box>
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        color: '#2D3748',
                        fontSize: '14px',
                        lineHeight: 1.5,
                        pl: 1,
                        borderLeft: '3px solid #1ABC9C',
                        background: 'rgba(26, 188, 156, 0.05)',
                        p: 1.5,
                        borderRadius: '8px',
                        fontStyle: 'normal'
                      }}
                    >
                      {review.staffReply}
                    </Typography>
                  </Box>
                )}
              </Box>
            </Box>
          </Grid>
          
          <Grid xs={12} md={5.5} sx={{ 
            display: 'flex', 
            flexDirection: 'column', 
            justifyContent: 'flex-start',
            alignItems: { xs: 'flex-start', md: 'flex-end' },
            textAlign: { xs: 'left', md: 'right' },
            pl: { xs: 0, md: 2 },
            pr: 0,
            mt: { xs: 2, md: 0 },
            pt: { xs: 0, md: 0 }, // Th√™m padding top ƒë·ªÉ th·∫≥ng h√†ng
            minHeight: 'fit-content'
          }}>
            {/* Status v√† Date Section */}
            <Box sx={{ 
              display: 'flex', 
              flexDirection: 'column', 
              alignItems: { xs: 'flex-start', md: 'flex-end' }, 
              mb: 2,
              width: '100%',
              mr: { xs: 0, md: -1 }
            }}>
              <Box sx={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: 1, 
                mb: 1,
                justifyContent: { xs: 'flex-start', md: 'flex-end' },
                width: '100%',
                mr: { xs: 0, md: -1 }
              }}>
                <Chip
                  icon={<CheckCircleIcon sx={{ fontSize: '16px !important' }} />}
                  label="ƒê√£ ƒë√°nh gi√°"
                  sx={{
                    background: 'linear-gradient(45deg, #4CAF50, #2ECC71)',
                    color: '#fff',
                    fontWeight: 600,
                    fontSize: '12px',
                    height: '32px',
                    minWidth: '120px',
                    boxShadow: '0 4px 12px rgba(76, 175, 80, 0.3)',
                    '& .MuiChip-icon': {
                      color: '#fff'
                    }
                  }}
                />
              </Box>
              {review.createdAt && (
                <Box sx={{ 
                  width: '100%',
                  display: 'flex',
                  justifyContent: { xs: 'flex-start', md: 'flex-end' },
                  mr: { xs: 0, md: -1 }
                }}>
                  <Typography 
                    variant="caption" 
                    sx={{ 
                      color: '#6B7280',
                      fontSize: '12px',
                      fontWeight: 500
                    }}
                  >
                    {convertApiDateToDate(review.createdAt).toLocaleDateString('vi-VN')}
                  </Typography>
                </Box>
              )}
            </Box>
            
            {/* Action Buttons Section - Hi·ªÉn th·ªã tr·ª±c ti·∫øp */}
            <Box sx={{ 
              display: 'flex', 
              justifyContent: { xs: 'flex-start', md: 'flex-end' },
              alignItems: 'center',
              gap: 0.5,
              mt: 0.5, // Gi·∫£m margin top ƒë·ªÉ g·∫ßn h∆°n v·ªõi status
              width: '100%',
              mr: { xs: 0, md: -1 }
            }}>
              {/* Lu√¥n hi·ªÉn th·ªã n√∫t ch·ªânh s·ª≠a, nh∆∞ng disable n·∫øu qu√° 24h */}
              <IconButton
                size="small"
                onClick={() => isEditAllowed(review) && handleEditReview(review)}
                disabled={!isEditAllowed(review)}
                sx={{
                  color: '#4A90E2',
                  background: 'rgba(74, 144, 226, 0.1)',
                  border: '1px solid rgba(74, 144, 226, 0.2)',
                  borderRadius: '8px',
                  width: 40,
                  height: 40,
                  transition: 'all 0.2s ease',
                  '&:hover': {
                    background: 'rgba(74, 144, 226, 0.2)',
                    border: '1px solid rgba(74, 144, 226, 0.3)',
                    transform: 'scale(1.05)',
                  },
                  '&.Mui-disabled': {
                    color: '#BDBDBD',
                    background: 'rgba(189, 189, 189, 0.1)',
                    border: '1px solid rgba(189, 189, 189, 0.2)',
                  }
                }}
              >
                <EditIcon sx={{ fontSize: '20px' }} />
              </IconButton>
            </Box>
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );

  const renderPendingReview = (review, uniqueKey) => (
    <Card 
      key={uniqueKey} 
      sx={{ 
        mb: 3,
        borderRadius: '16px',
        boxShadow: '0 4px 20px rgba(255, 152, 0, 0.08)',
        border: '1px solid rgba(255, 152, 0, 0.2)',
        background: 'rgba(255, 255, 255, 0.95)',
        backdropFilter: 'blur(10px)',
        transition: 'all 0.3s ease',
        position: 'relative',
        minHeight: '200px',
        // B·ªè maxHeight ƒë·ªÉ cho ph√©p card m·ªü r·ªông theo n·ªôi dung
        maxWidth: '100%',
        width: '100%',
        display: 'flex',
        flexDirection: 'column',
        '&:hover': {
          transform: 'translateY(-2px)',
          boxShadow: '0 8px 30px rgba(255, 152, 0, 0.15)',
        }
      }}
    >
      <CardContent sx={{ p: { xs: 2, md: 3 }, flex: 1, display: 'flex', flexDirection: 'column' }}>
        <Grid container spacing={{ xs: 2, md: 5 }} sx={{ width: '100%', m: 0, justifyContent: 'space-between' }}>
          <Grid xs={12} md={6.5} sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start' }}>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
              <Avatar 
                sx={{ 
                  width: 48, 
                  height: 48, 
                  mr: 2,
                  alignSelf: 'flex-start',
                  background: 'linear-gradient(135deg, #FF9800, #FFB74D)',
                  fontSize: '18px',
                  fontWeight: 600,
                  boxShadow: '0 4px 12px rgba(255, 152, 0, 0.3)',
                }}
              >
                {(review.consultantName || 'N/A').split(' ').pop()[0]}
              </Avatar>
              <Box>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
                  <Typography 
                    variant="h6" 
                    sx={{ 
                      fontWeight: 600, 
                      color: '#2D3748', 
                      fontSize: '18px'
                    }}
                  >
                    {review.serviceName}
                  </Typography>
                  {/* Hi·ªÉn th·ªã ID d·ªãch v·ª•
                  {review.type === 'STI_SERVICE' && (
                    <Typography variant="caption" sx={{ color: '#888', ml: 1 }}>
                      (ID: {review.testId || review.serviceId || 'N/A'})
                    </Typography>
                  )}
                  {review.type === 'CONSULTANT' && (
                    <Typography variant="caption" sx={{ color: '#888', ml: 1 }}>
                      (ID: {review.consultationId || review.consultantId || 'N/A'})
                    </Typography>
                  )} */}
                  {review.type === 'STI_SERVICE' && (
                    <Chip
                      icon={<ScienceIcon sx={{ fontSize: '12px !important' }} />}
                      label="STI"
                      size="small"
                      sx={{
                        background: 'rgba(255, 152, 0, 0.1)',
                        color: '#FF9800',
                        border: '1px solid rgba(255, 152, 0, 0.3)',
                        fontSize: '10px',
                        fontWeight: 600,
                        height: '20px',
                        '& .MuiChip-icon': {
                          color: '#FF9800'
                        }
                      }}
                    />
                  )}
                  {review.type === 'CONSULTANT' && (
                    <Chip
                      icon={<PsychologyIcon sx={{ fontSize: '12px !important' }} />}
                      label="T∆∞ v·∫•n"
                      size="small"
                      sx={{
                        background: 'rgba(76, 175, 80, 0.1)',
                        color: '#4CAF50',
                        border: '1px solid rgba(76, 175, 80, 0.3)',
                        fontSize: '10px',
                        fontWeight: 600,
                        height: '20px',
                        '& .MuiChip-icon': {
                          color: '#4CAF50'
                        }
                      }}
                    />
                  )}
                </Box>
                <Typography 
                  variant="body2" 
                  sx={{ 
                    color: '#4A5568',
                    fontSize: '14px',
                    fontWeight: 500
                  }}
                >
                  {review.consultantName}
                </Typography>
                
                {/* Hi·ªÉn th·ªã tr·∫°ng th√°i v√† ƒëi·ªÅu ki·ªán cho pending review */}
                <Box sx={{ mt: 1, display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>
                  <Chip
                    label={review.type === 'STI_SERVICE' ? 
                      `X√©t nghi·ªám: ${review.isEligible ? 'Ho√†n th√†nh' : 'ƒêang x·ª≠ l√Ω'}` :
                      `T∆∞ v·∫•n: ${review.isEligible ? 'Ho√†n th√†nh' : 'ƒêang x·ª≠ l√Ω'}`
                    }
                    size="small"
                    sx={{
                      fontSize: '11px',
                      height: '20px',
                      backgroundColor: review.isEligible ? '#E8F5E8' : '#FFF3E0',
                      color: review.isEligible ? '#4CAF50' : '#FF9800',
                      border: `1px solid ${review.isEligible ? '#4CAF50' : '#FF9800'}`,
                    }}
                  />
                  {!review.isEligible && (
                    <Typography variant="caption" sx={{ color: '#757575', fontSize: '11px' }}>
                      {review.type === 'STI_SERVICE' ? 
                        '‚Ä¢ C·∫ßn c√≥ k·∫øt qu·∫£ x√©t nghi·ªám v√† tr·∫°ng th√°i COMPLETED/RESULTED/ANALYZED' : 
                        '‚Ä¢ C·∫ßn ho√†n th√†nh bu·ªïi t∆∞ v·∫•n v√† tr·∫°ng th√°i COMPLETED/FINISHED/CLOSED'
                      }
                    </Typography>
                  )}

                </Box>
              </Box>
            </Box>
            
            <Box 
              sx={{ 
                background: review.isEligible 
                  ? 'linear-gradient(135deg, #FFF3E0, #FFE0B2)'
                  : 'linear-gradient(135deg, #FAFAFA, #F5F5F5)',
                p: 2.5,
                borderRadius: '12px',
                border: review.isEligible 
                  ? '1px solid rgba(255, 152, 0, 0.2)'
                  : '1px solid rgba(158, 158, 158, 0.2)',
                mb: 2,
                flex: 1, // Chi·∫øm ph·∫ßn c√≤n l·∫°i c·ªßa kh√¥ng gian
                minHeight: '60px', // ƒê·∫£m b·∫£o chi·ªÅu cao t·ªëi thi·ªÉu
                display: 'flex',
                alignItems: 'center'
              }}
            >
              <Typography 
                variant="body1" 
                sx={{ 
                  color: review.isEligible ? '#E65100' : '#757575',
                  fontSize: '15px',
                  fontWeight: 600,
                  textAlign: 'center',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: 1,
                  width: '100%'
                }}
              >
                <StarBorderIcon sx={{ fontSize: '20px' }} />
                {review.isEligible 
                  ? 'H√£y chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ d·ªãch v·ª• n√†y'
                  : 'D·ªãch v·ª• c·∫ßn ƒë∆∞·ª£c ho√†n th√†nh tr∆∞·ªõc khi ƒë√°nh gi√°'
                }
              </Typography>
            </Box>
          </Grid>
          
          <Grid xs={12} md={5.5} sx={{
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'flex-start',
            alignItems: { xs: 'flex-start', md: 'flex-end' },
            textAlign: { xs: 'left', md: 'right' },
            pl: { xs: 0, md: 2 },
            pr: { xs: 2, md: 3 },
            mt: { xs: 2, md: 0 },
            pt: { xs: 0, md: 0 }, // Th√™m padding top ƒë·ªÉ th·∫≥ng h√†ng
            minHeight: 'fit-content'
          }}>
            {/* Status Section */}
            <Box sx={{ 
              display: 'flex', 
              flexDirection: 'column',
              alignItems: { xs: 'flex-start', md: 'flex-end' }, 
              gap: 1.5,
              mb: 2,
              width: '100%',
              pr: 0,
            }}>
              <Box sx={{
                display: 'flex',
                justifyContent: 'flex-end',
                width: '100%',
                pr: 0,
              }}>
                <Chip
                  icon={<ScheduleIcon sx={{ fontSize: '18px !important' }} />}
                  label={<span style={{ display: 'inline-block', minWidth: 110, fontSize: 15, fontWeight: 700, letterSpacing: 0.5 }}>Ch∆∞a ƒë√°nh gi√°</span>}
                  sx={{
                    background: 'linear-gradient(45deg, #FF9800, #FFB74D)',
                    color: '#fff',
                    fontWeight: 800,
                    fontSize: '15px',
                    height: '36px',
                    minWidth: '130px',
                    boxShadow: '0 4px 12px rgba(255, 152, 0, 0.3)',
                    letterSpacing: 0.5,
                    borderRadius: '18px',
                    '& .MuiChip-icon': {
                      color: '#fff',
                      fontSize: '18px !important'
                    }
                  }}
                />
              </Box>
            </Box>

            {/* Action Button Section - Lu√¥n ·ªü cu·ªëi */}
            <Box sx={{
              display: 'flex',
              justifyContent: { xs: 'flex-start', md: 'flex-end' },
              alignItems: 'center',
              gap: 1.5,
              mt: 0.5, // Gi·∫£m margin top ƒë·ªÉ g·∫ßn h∆°n v·ªõi status
              width: '100%',
              mr: 0,
              pr: 0
            }}>
              <Box sx={{
                display: 'flex',
                justifyContent: { xs: 'flex-start', md: 'flex-end' },
                alignItems: 'center',
                gap: 1.5,
                mt: 0.5,
                width: '100%',
                mr: 0,
                pr: 0
              }}>
                <IconButton
                  size="large"
                  onClick={() => handleEditReview(review)}
                  disabled={!review.isEligible}
                  sx={{
                    color: '#FF9800',
                    background: 'rgba(255, 152, 0, 0.1)',
                    border: '1px solid rgba(255, 152, 0, 0.2)',
                    borderRadius: '10px',
                    width: 46,
                    height: 46,
                    transition: 'all 0.2s ease',
                    '&:hover': {
                      background: 'rgba(255, 152, 0, 0.2)',
                      border: '1px solid rgba(255, 152, 0, 0.3)',
                      transform: 'scale(1.05)',
                    },
                    '&:disabled': {
                      color: '#BDBDBD',
                      background: 'rgba(189, 189, 189, 0.1)',
                      border: '1px solid rgba(189, 189, 189, 0.2)',
                    }
                  }}
                >
                  <AddIcon sx={{ fontSize: '24px' }} />
                </IconButton>
              </Box>
            </Box>
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );

  return (
    <Box sx={{ 
      width: '100%', 
      maxWidth: '1200px', // Gi·ªõi h·∫°n chi·ªÅu r·ªông t·ªëi ƒëa to√†n b·ªô component
      margin: '0 auto', // CƒÉn gi·ªØa
      px: { xs: 1, sm: 2, md: 3 } // Padding responsive
    }}>
      {/* Filter Section + L·ªçc ng√†y ƒë√°nh gi√° */}
      <Box sx={{ mb: 3 }}>
        <Box sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          gap: 2.5,
          p: 2.5,
          background: 'rgba(255, 255, 255, 0.8)',
          borderRadius: '16px',
          border: '1px solid rgba(74, 144, 226, 0.1)',
          boxShadow: '0 4px 20px rgba(74, 144, 226, 0.05)',
          flexWrap: 'nowrap',
          overflowX: 'auto',
          minHeight: 80,
          scrollbarWidth: 'thin',
        }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <FilterListIcon sx={{ color: '#4A90E2', fontSize: '20px' }} />
            <Typography variant="body2" sx={{ fontWeight: 600, color: '#2D3748' }}>
              L·ªçc theo lo·∫°i d·ªãch v·ª•:
            </Typography>
          </Box>
          <FormControl size="small" sx={{ minWidth: 200 }}>
            <InputLabel 
              sx={{ 
                color: '#4A90E2',
                '&.Mui-focused': { color: '#4A90E2' }
              }}
            >
              Lo·∫°i d·ªãch v·ª•
            </InputLabel>
            <Select
              value={serviceFilter}
              label="Lo·∫°i d·ªãch v·ª•"
              onChange={(e) => setServiceFilter(e.target.value)}
              sx={{
                borderRadius: '12px',
                '& .MuiOutlinedInput-notchedOutline': {
                  borderColor: 'rgba(74, 144, 226, 0.2)',
                },
                '&:hover .MuiOutlinedInput-notchedOutline': {
                  borderColor: '#4A90E2',
                },
                '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                  borderColor: '#4A90E2',
                },
              }}
            >
              <MenuItem value="all">
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <StarIcon sx={{ fontSize: '18px', color: '#4A90E2' }} />
                  T·∫•t c·∫£ d·ªãch v·ª•
                </Box>
              </MenuItem>
              <MenuItem value="sti">
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <ScienceIcon sx={{ fontSize: '18px', color: '#FF9800' }} />
                  X√©t nghi·ªám STI
                </Box>
              </MenuItem>
              <MenuItem value="consultation">
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <PsychologyIcon sx={{ fontSize: '18px', color: '#4CAF50' }} />
                  T∆∞ v·∫•n chuy√™n vi√™n
                </Box>
              </MenuItem>
            </Select>
          </FormControl>

          {/* L·ªçc theo ng√†y ƒë√°nh gi√° */}
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, ml: 2, minWidth: 320, flexShrink: 0 }}>
            <Typography variant="body2" sx={{ fontWeight: 600, color: '#2D3748' }}>
              L·ªçc theo ng√†y ƒë√°nh gi√°:
            </Typography>
            <input
              type="date"
              value={dateFrom ? new Date(dateFrom).toISOString().slice(0, 10) : ''}
              onChange={e => setDateFrom(e.target.value ? e.target.value : null)}
              style={{
                borderRadius: 8,
                border: '1px solid #B0BEC5',
                padding: '4px 8px',
                fontSize: 14,
                marginRight: 8,
                outline: 'none',
                minWidth: 120,
                maxWidth: 160,
                width: '100%',
                flex: 1
              }}
              placeholder="T·ª´ ng√†y"
            />
            <span style={{ fontWeight: 600, color: '#4A90E2' }}>-</span>
            <input
              type="date"
              value={dateTo ? new Date(dateTo).toISOString().slice(0, 10) : ''}
              onChange={e => setDateTo(e.target.value ? e.target.value : null)}
              style={{
                borderRadius: 8,
                border: '1px solid #B0BEC5',
                padding: '4px 8px',
                fontSize: 14,
                minWidth: 120,
                maxWidth: 160,
                width: '100%',
                flex: 1
              }}
              placeholder="ƒê·∫øn ng√†y"
            />
            {(dateFrom || dateTo) && (
              <IconButton size="small" onClick={() => { setDateFrom(null); setDateTo(null); }} sx={{ ml: 1 }}>
                <span style={{ fontSize: 18, color: '#F44336', fontWeight: 700 }}>&times;</span>
              </IconButton>
            )}
          </Box>

          {/* Statistics */}
          <Box sx={{ display: 'flex', gap: 2, ml: 'auto' }}>
            <Chip
              icon={<ScienceIcon sx={{ fontSize: '16px !important' }} />}
              label={`STI: ${uniqueSTIServices.size}`}
              size="small"
              sx={{
                background: 'rgba(255, 152, 0, 0.1)',
                color: '#FF9800',
                fontWeight: 600,
                border: '1px solid rgba(255, 152, 0, 0.2)',
                '& .MuiChip-icon': { color: '#FF9800' }
              }}
            />
            <Chip
              icon={<PsychologyIcon sx={{ fontSize: '16px !important' }} />}
              label={`T∆∞ v·∫•n: ${uniqueConsultationServices.size}`}
              size="small"
              sx={{
                background: 'rgba(76, 175, 80, 0.1)',
                color: '#4CAF50',
                fontWeight: 600,
                border: '1px solid rgba(76, 175, 80, 0.2)',
                '& .MuiChip-icon': { color: '#4CAF50' }
              }}
            />
          </Box>
        </Box>
      </Box>

      {/* Loading State */}
      {isLoadingReviews ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>
          <CircularProgress size={40} sx={{ color: '#4A90E2' }} />
        </Box>
      ) : (
        <>
          {/* Tabs */}
          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
        <Tabs
          value={activeTab}
          onChange={handleTabChange}
          aria-label="reviews tabs"
          sx={{
            '& .MuiTab-root': {
              textTransform: 'none',
              fontWeight: 600,
              fontSize: '14px',
              minHeight: 48,
              '&.Mui-selected': {
                color: '#4A90E2',
              },
            },
            '& .MuiTabs-indicator': {
              backgroundColor: '#4A90E2',
              height: 3,
            },
          }}
        >
          <Tab
            label={
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <StarIcon fontSize="small" />
                T·∫§T C·∫¢
                <Chip
                  label={allReviews.length}
                  size="small"
                  sx={{
                    height: 20,
                    fontSize: '11px',
                    bgcolor: '#E3F2FD',
                    color: '#4A90E2',
                  }}
                />
              </Box>
            }
            {...a11yProps(0)}
          />
          <Tab
            label={
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <CheckCircleIcon fontSize="small" />
                ƒê√É ƒê√ÅNH GI√Å
                <Chip
                  label={completedReviews.length}
                  size="small"
                  sx={{
                    height: 20,
                    fontSize: '11px',
                    bgcolor: '#E8F5E8',
                    color: '#4CAF50',
                  }}
                />
              </Box>
            }
            {...a11yProps(1)}
          />
          <Tab
            label={
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <ScheduleIcon fontSize="small" />
                CH∆ØA ƒê√ÅNH GI√Å
                <Chip
                  label={pendingReviews.length}
                  size="small"
                  sx={{
                    height: 20,
                    fontSize: '11px',
                    bgcolor: '#FFF3E0',
                    color: '#FF9800',
                  }}
                />
              </Box>
            }
            {...a11yProps(2)}
          />
        </Tabs>
      </Box>

      {/* Tab Panels */}
      <TabPanel value={activeTab} index={0}>
        {paginatedAllReviews.length > 0 ? (
          paginatedAllReviews.map((review, index) => {
            // Ki·ªÉm tra xem review c√≥ ph·∫£i t·ª´ API myRatings kh√¥ng (c√≥ createdAt v√† rating)
            const isCompletedReview = review.rating !== undefined && review.createdAt;
            const uniqueKey = review.id || review.ratingId || `review_${index}_${review.type || 'unknown'}`;
            return isCompletedReview 
              ? renderCompletedReview(review, uniqueKey) 
              : renderPendingReview(review, uniqueKey);
          })
        ) : (
          <Box sx={{ textAlign: 'center', py: 4 }}>
            {serviceFilter === 'sti' && <ScienceIcon sx={{ fontSize: 64, color: '#E0E0E0', mb: 2 }} />}
            {serviceFilter === 'consultation' && <PsychologyIcon sx={{ fontSize: 64, color: '#E0E0E0', mb: 2 }} />}
            {serviceFilter === 'all' && <StarIcon sx={{ fontSize: 64, color: '#E0E0E0', mb: 2 }} />}
            <Typography variant="h6" color="text.secondary">
              {serviceFilter === 'sti' && 'Ch∆∞a c√≥ ƒë√°nh gi√° x√©t nghi·ªám STI n√†o'}
              {serviceFilter === 'consultation' && 'Ch∆∞a c√≥ ƒë√°nh gi√° t∆∞ v·∫•n n√†o'}
              {serviceFilter === 'all' && 'Ch∆∞a c√≥ ƒë√°nh gi√° n√†o'}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {serviceFilter === 'sti' && 'C√°c ƒë√°nh gi√° x√©t nghi·ªám STI s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y sau khi b·∫°n s·ª≠ d·ª•ng d·ªãch v·ª•'}
              {serviceFilter === 'consultation' && 'C√°c ƒë√°nh gi√° t∆∞ v·∫•n s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y sau khi b·∫°n s·ª≠ d·ª•ng d·ªãch v·ª•'}
              {serviceFilter === 'all' && 'C√°c ƒë√°nh gi√° s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y sau khi b·∫°n s·ª≠ d·ª•ng d·ªãch v·ª•'}
            </Typography>
          </Box>
        )}
        {allReviews.length > REVIEWS_PER_PAGE && (
          <Box display="flex" justifyContent="center" mt={2}>
            <Pagination
              count={Math.ceil(allReviews.length / REVIEWS_PER_PAGE)}
              page={page}
              onChange={(e, value) => setPage(value)}
              color="primary"
              shape="rounded"
            />
          </Box>
        )}
      </TabPanel>

      <TabPanel value={activeTab} index={1}>
        {paginatedCompletedReviews.length > 0 ? (
          paginatedCompletedReviews.map((review, index) => {
            const uniqueKey = review.id || review.ratingId || `completed_${index}_${Date.now()}`;
            return renderCompletedReview(review, uniqueKey);
          })
        ) : (
          <Box sx={{ textAlign: 'center', py: 4 }}>
            <CheckCircleIcon sx={{ fontSize: 64, color: '#E0E0E0', mb: 2 }} />
            <Typography variant="h6" color="text.secondary">
              {serviceFilter === 'sti' && 'Ch∆∞a c√≥ ƒë√°nh gi√° x√©t nghi·ªám STI n√†o ho√†n th√†nh'}
              {serviceFilter === 'consultation' && 'Ch∆∞a c√≥ ƒë√°nh gi√° t∆∞ v·∫•n n√†o ho√†n th√†nh'}
              {serviceFilter === 'all' && 'Ch∆∞a c√≥ ƒë√°nh gi√° n√†o ho√†n th√†nh'}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              C√°c ƒë√°nh gi√° ƒë√£ ho√†n th√†nh s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y
            </Typography>
          </Box>
        )}
        {completedReviews.length > REVIEWS_PER_PAGE && (
          <Box display="flex" justifyContent="center" mt={2}>
            <Pagination
              count={Math.ceil(completedReviews.length / REVIEWS_PER_PAGE)}
              page={page}
              onChange={(e, value) => setPage(value)}
              color="primary"
              shape="rounded"
            />
          </Box>
        )}
      </TabPanel>

      <TabPanel value={activeTab} index={2}>
        {paginatedPendingReviews.length > 0 ? (
          paginatedPendingReviews.map((review, index) => {
            const uniqueKey = review.id || `pending_${index}_${Date.now()}`;
            return renderPendingReview(review, uniqueKey);
          })
        ) : (
          <Box sx={{ textAlign: 'center', py: 4 }}>
            <ScheduleIcon sx={{ fontSize: 64, color: '#E0E0E0', mb: 2 }} />
            <Typography variant="h6" color="text.secondary">
              {serviceFilter === 'sti' && 'Kh√¥ng c√≥ x√©t nghi·ªám STI n√†o ƒëang ch·ªù ƒë√°nh gi√°'}
              {serviceFilter === 'consultation' && 'Kh√¥ng c√≥ t∆∞ v·∫•n n√†o ƒëang ch·ªù ƒë√°nh gi√°'}
              {serviceFilter === 'all' && 'Kh√¥ng c√≥ ƒë√°nh gi√° ƒëang ch·ªù'}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              C√°c d·ªãch v·ª• c·∫ßn ƒë√°nh gi√° s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y
            </Typography>
          </Box>
        )}
        {pendingReviews.length > REVIEWS_PER_PAGE && (
          <Box display="flex" justifyContent="center" mt={2}>
            <Pagination
              count={Math.ceil(pendingReviews.length / REVIEWS_PER_PAGE)}
              page={page}
              onChange={(e, value) => setPage(value)}
              color="primary"
              shape="rounded"
            />
          </Box>
        )}
      </TabPanel>

      {/* Review Dialog - ƒê√£ t√°ch th√†nh component ri√™ng */}
      <ReviewForm 
        open={reviewDialogOpen}
        onClose={handleCloseReviewDialog}
        review={selectedReview}
        rating={rating}
        setRating={setRating}
        feedback={feedback}
        setFeedback={setFeedback}
        onSubmit={handleSubmitReview}
        isEditMode={isEditMode}
        loading={loading}
      />

        </>
      )}
    </Box>
  );
};

export default ReviewsContent;
