import React, { useState } from 'react';
import PropTypes from 'prop-types';
import {
  Box,
  Typography,
  RadioGroup,
  FormControlLabel,
  Radio,
  TextField,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Grid,
  Alert,
} from '@mui/material';
import { bookSTITest } from '@/services/stiService';

// ===== COMPONENT THANH TO√ÅN V√Ä ƒê·∫∂T L·ªäCH =====
// Component n√†y x·ª≠ l√Ω vi·ªác ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n v√† g·ª≠i y√™u c·∫ßu ƒë·∫∑t l·ªãch kh√°m
const PaymentSection = ({
  selectedService,  // D·ªãch v·ª• ƒë∆∞·ª£c ch·ªçn
  selectedDate,     // Ng√†y kh√°m ƒë∆∞·ª£c ch·ªçn
  selectedTime,     // Gi·ªù kh√°m ƒë∆∞·ª£c ch·ªçn
  note,            // Ghi ch√∫ t·ª´ ng∆∞·ªùi d√πng
  onSuccess,       // Callback khi ƒë·∫∑t l·ªãch th√†nh c√¥ng
}) => {
  // ===== C√ÅC STATE QU·∫¢N L√ù TR·∫†NG TH√ÅI COMPONENT =====
  const [paymentMethod, setPaymentMethod] = useState('cash'); // Ph∆∞∆°ng th·ª©c thanh to√°n ƒë∆∞·ª£c ch·ªçn (m·∫∑c ƒë·ªãnh: ti·ªÅn m·∫∑t)
  
  // State cho th√¥ng tin th·∫ª Visa/Master
  const [visaInfo, setVisaInfo] = useState({
    cardNumber: '',  // S·ªë th·∫ª (16 ch·ªØ s·ªë)
    cardName: '',    // T√™n ch·ªß th·∫ª
    expiry: '',      // Ng√†y h·∫øt h·∫°n (MM/YY)
    cvv: '',         // M√£ CVV (3-4 ch·ªØ s·ªë)
  });
  
  const [visaErrors, setVisaErrors] = useState({}); // L·ªói validation cho th√¥ng tin th·∫ª
  const [openVisaDialog, setOpenVisaDialog] = useState(false); // ƒêi·ªÅu khi·ªÉn dialog nh·∫≠p th√¥ng tin th·∫ª
  const [openBankDialog, setOpenBankDialog] = useState(false); // ƒêi·ªÅu khi·ªÉn dialog th√¥ng tin chuy·ªÉn kho·∫£n
  const [loading, setLoading] = useState(false); // Tr·∫°ng th√°i ƒëang x·ª≠ l√Ω booking
  const [error, setError] = useState(''); // Th√¥ng b√°o l·ªói khi booking th·∫•t b·∫°i

  // ===== H√ÄM X·ª¨ L√ù THAY ƒê·ªîI PH∆Ø∆†NG TH·ª®C THANH TO√ÅN =====
  const handlePaymentMethodChange = (event) => {
    setPaymentMethod(event.target.value);
    
    // M·ªü dialog t∆∞∆°ng ·ª©ng khi ch·ªçn ph∆∞∆°ng th·ª©c c·∫ßn nh·∫≠p th√¥ng tin
    if (event.target.value === 'visa') {
      setOpenVisaDialog(true); // M·ªü dialog nh·∫≠p th√¥ng tin th·∫ª
    } else if (event.target.value === 'bank') {
      setOpenBankDialog(true); // M·ªü dialog th√¥ng tin chuy·ªÉn kho·∫£n
    }
  };

  // ===== H√ÄM VALIDATION TH√îNG TIN TH·∫∫ VISA =====
  // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c√°c th√¥ng tin th·∫ª t√≠n d·ª•ng
  const validateVisaInfo = () => {
    const errors = {};
    
    // Ki·ªÉm tra s·ªë th·∫ª: ph·∫£i l√† 16 ch·ªØ s·ªë
    if (!/^[0-9]{16}$/.test(visaInfo.cardNumber)) {
      errors.cardNumber = 'S·ªë th·∫ª kh√¥ng h·ª£p l·ªá (ph·∫£i c√≥ 16 ch·ªØ s·ªë)';
    }
    
    // Ki·ªÉm tra t√™n ch·ªß th·∫ª: kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng
    if (!visaInfo.cardName.trim()) {
      errors.cardName = 'Vui l√≤ng nh·∫≠p t√™n ch·ªß th·∫ª';
    }
    
    // Ki·ªÉm tra ng√†y h·∫øt h·∫°n: ƒë·ªãnh d·∫°ng MM/YY
    if (!/^(0[1-9]|1[0-2])\/([0-9]{2})$/.test(visaInfo.expiry)) {
      errors.expiry = 'ƒê·ªãnh d·∫°ng MM/YY kh√¥ng h·ª£p l·ªá (v√≠ d·ª•: 12/25)';
    }
    
    // Ki·ªÉm tra m√£ CVV: 3-4 ch·ªØ s·ªë
    if (!/^[0-9]{3,4}$/.test(visaInfo.cvv)) {
      errors.cvv = 'CVV kh√¥ng h·ª£p l·ªá (3-4 ch·ªØ s·ªë)';
    }
    
    return errors;
  };

  // ===== H√ÄM X·ª¨ L√ù SUBMIT TH√îNG TIN TH·∫∫ VISA =====
  const handleVisaSubmit = () => {
    const errors = validateVisaInfo(); // Validate th√¥ng tin th·∫ª
    
    if (Object.keys(errors).length === 0) {
      // N·∫øu kh√¥ng c√≥ l·ªói, ƒë√≥ng dialog v√† ti·∫øn h√†nh booking
      setOpenVisaDialog(false);
      handleBooking('VISA');
    } else {
      // N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      setVisaErrors(errors);
    }
  };

  // ===== H√ÄM X·ª¨ L√ù X√ÅC NH·∫¨N CHUY·ªÇN KHO·∫¢N =====
  const handleBankConfirm = () => {
    setOpenBankDialog(false); // ƒê√≥ng dialog
    handleBooking('BANK_TRANSFER'); // Ti·∫øn h√†nh booking v·ªõi ph∆∞∆°ng th·ª©c chuy·ªÉn kho·∫£n
  };

  // ===== H√ÄM X·ª¨ L√ù ƒê·∫∂T L·ªäCH CH√çNH =====
  // H√†m n√†y g·ª≠i y√™u c·∫ßu ƒë·∫∑t l·ªãch kh√°m l√™n server
  const handleBooking = async (paymentMethodApi) => {
    try {
      setLoading(true); // B·∫≠t tr·∫°ng th√°i loading
      setError(''); // Reset l·ªói c≈©

      // ===== CHU·∫®N B·ªä D·ªÆ LI·ªÜU G·ª¨I L√äN SERVER =====
      const bookingData = {
        serviceId: selectedService.id,           // ID d·ªãch v·ª•
        date: selectedDate.toISOString(),        // Ng√†y kh√°m (chuy·ªÉn sang ISO string)
        time: selectedTime,                      // Gi·ªù kh√°m
        note,                                    // Ghi ch√∫
        paymentMethod: paymentMethodApi,         // Ph∆∞∆°ng th·ª©c thanh to√°n
        // Ch·ªâ g·ª≠i th√¥ng tin th·∫ª khi thanh to√°n b·∫±ng VISA
        ...(paymentMethodApi === 'VISA' && { visaInfo }),
      };

      // ===== G·ª¨I REQUEST L√äN SERVER =====
      const response = await bookSTITest(bookingData);
      
      if (response.success) {
        // N·∫øu th√†nh c√¥ng, g·ªçi callback onSuccess
        onSuccess(response.message);
      } else {
        // N·∫øu th·∫•t b·∫°i, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        setError(response.message || 'ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·ªãch');
      }
    } catch (err) {
      // X·ª≠ l√Ω l·ªói khi g·ªçi API
      console.error('Booking error:', err);
      setError(err.message || 'ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·ªãch');
    } finally {
      setLoading(false); // T·∫Øt tr·∫°ng th√°i loading
    }
  };

  // ===== GIAO DI·ªÜN COMPONENT =====
  return (
    <Box sx={{ 
      backgroundColor: '#f8faff', // N·ªÅn xanh r·∫•t nh·∫°t
      borderRadius: 3, // Bo g√≥c 24px
      p: 3 // Padding 24px
    }}>
      
      {/* ===== TI√äU ƒê·ªÄ PH·∫¶N THANH TO√ÅN ===== */}
      <Typography 
        variant="h5" 
        sx={{ 
          mb: 4, // Margin bottom 32px
          fontWeight: 600,
          color: 'primary.main', // M√†u ch·ªß ƒë·∫°o c·ªßa theme
          textAlign: 'center'
        }}
      >
        Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
      </Typography>

      {/* ===== HI·ªÇN TH·ªä TH√îNG B√ÅO L·ªñI ===== */}
      {/* Ch·ªâ hi·ªÉn th·ªã khi c√≥ l·ªói x·∫£y ra */}
      {error && (
        <Alert 
          severity="error" 
          sx={{ 
            mb: 3,
            borderRadius: 2, // Bo g√≥c 16px
            '& .MuiAlert-icon': {
              fontSize: '1.5rem' // Icon l·ªõn h∆°n
            }
          }}
        >
          {error}
        </Alert>
      )}

      {/* ===== KHUNG CH·ª®A C√ÅC OPTION THANH TO√ÅN ===== */}
      <Box sx={{ 
        backgroundColor: 'white', // N·ªÅn tr·∫Øng
        borderRadius: 2, // Bo g√≥c 16px
        boxShadow: '0 2px 12px rgba(0,0,0,0.08)', // ƒê·ªï b√≥ng nh·∫π
        p: 3 // Padding 24px
      }}>
        
        {/* ===== RADIO GROUP C√ÅC PH∆Ø∆†NG TH·ª®C THANH TO√ÅN ===== */}
        <RadioGroup 
          value={paymentMethod} 
          onChange={handlePaymentMethodChange}
          sx={{
            // Style cho t·ª´ng FormControlLabel
            '& .MuiFormControlLabel-root': {
              mb: 2, // Margin bottom gi·ªØa c√°c option
              mx: 1, // Margin horizontal
              '&:last-child': {
                mb: 0 // Option cu·ªëi kh√¥ng c√≥ margin bottom
              }
            },
            // Style cho radio button
            '& .MuiRadio-root': {
              color: 'primary.main', // M√†u ch·ªß ƒë·∫°o
              '&.Mui-checked': {
                color: 'primary.main' // M√†u khi ƒë∆∞·ª£c ch·ªçn
              }
            }
          }}
        >
          {/* ===== OPTION 1: TI·ªÄN M·∫∂T ===== */}
          <FormControlLabel 
            value="cash" 
            control={<Radio />} 
            label={
              <Typography sx={{ fontWeight: 500 }}>
                üíµ Thanh to√°n ti·ªÅn m·∫∑t t·∫°i ph√≤ng kh√°m
              </Typography>
            } 
          />
          
          {/* ===== OPTION 2: TH·∫∫ T√çN D·ª§NG ===== */}
          <FormControlLabel 
            value="visa" 
            control={<Radio />} 
            label={
              <Typography sx={{ fontWeight: 500 }}>
                üí≥ Thanh to√°n b·∫±ng th·∫ª Visa/Master
              </Typography>
            }
          />
          
          {/* ===== OPTION 3: CHUY·ªÇN KHO·∫¢N ===== */}
          <FormControlLabel 
            value="bank" 
            control={<Radio />} 
            label={
              <Typography sx={{ fontWeight: 500 }}>
                üè¶ Chuy·ªÉn kho·∫£n ng√¢n h√†ng
              </Typography>
            }
          />
        </RadioGroup>
      </Box>

      {/* ===== DIALOG NH·∫¨P TH√îNG TIN TH·∫∫ VISA ===== */}
      {/* Dialog n√†y m·ªü khi ng∆∞·ªùi d√πng ch·ªçn thanh to√°n b·∫±ng th·∫ª */}
      <Dialog open={openVisaDialog} onClose={() => setOpenVisaDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle sx={{ textAlign: 'center', fontWeight: 600 }}>
          üí≥ Nh·∫≠p th√¥ng tin th·∫ª t√≠n d·ª•ng
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            
            {/* ===== FIELD S·ªê TH·∫∫ ===== */}
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="S·ªë th·∫ª *"
                placeholder="1234 5678 9012 3456"
                value={visaInfo.cardNumber}
                onChange={(e) => {
                  // Ch·ªâ cho ph√©p nh·∫≠p s·ªë v√† gi·ªõi h·∫°n 16 k√Ω t·ª±
                  const value = e.target.value.replace(/\D/g, '').slice(0, 16);
                  setVisaInfo({ ...visaInfo, cardNumber: value });
                }}
                error={!!visaErrors.cardNumber}
                helperText={visaErrors.cardNumber}
                inputProps={{ maxLength: 16 }}
              />
            </Grid>
            
            {/* ===== FIELD T√äN CH·ª¶ TH·∫∫ ===== */}
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="T√™n ch·ªß th·∫ª *"
                placeholder="NGUYEN VAN A"
                value={visaInfo.cardName}
                onChange={(e) => setVisaInfo({ ...visaInfo, cardName: e.target.value.toUpperCase() })}
                error={!!visaErrors.cardName}
                helperText={visaErrors.cardName}
              />
            </Grid>
            
            {/* ===== FIELD NG√ÄY H·∫æT H·∫†N ===== */}
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="H·∫°n th·∫ª *"
                placeholder="MM/YY"
                value={visaInfo.expiry}
                onChange={(e) => {
                  // Format t·ª± ƒë·ªông MM/YY
                  let value = e.target.value.replace(/\D/g, '');
                  if (value.length >= 2) {
                    value = value.slice(0, 2) + '/' + value.slice(2, 4);
                  }
                  setVisaInfo({ ...visaInfo, expiry: value });
                }}
                error={!!visaErrors.expiry}
                helperText={visaErrors.expiry}
                inputProps={{ maxLength: 5 }}
              />
            </Grid>
            
            {/* ===== FIELD CVV ===== */}
            <Grid item xs={6}>
              <TextField
                fullWidth
                label="CVV *"
                placeholder="123"
                value={visaInfo.cvv}
                onChange={(e) => {
                  // Ch·ªâ cho ph√©p nh·∫≠p s·ªë v√† gi·ªõi h·∫°n 4 k√Ω t·ª±
                  const value = e.target.value.replace(/\D/g, '').slice(0, 4);
                  setVisaInfo({ ...visaInfo, cvv: value });
                }}
                error={!!visaErrors.cvv}
                helperText={visaErrors.cvv}
                inputProps={{ maxLength: 4 }}
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions sx={{ p: 3, pt: 1 }}>
          <Button 
            onClick={() => {
              setOpenVisaDialog(false);
              setPaymentMethod('cash'); // Reset v·ªÅ ti·ªÅn m·∫∑t n·∫øu h·ªßy
            }}
          >
            H·ªßy
          </Button>
          <Button onClick={handleVisaSubmit} variant="contained">
            X√°c nh·∫≠n thanh to√°n
          </Button>
        </DialogActions>
      </Dialog>

      {/* ===== DIALOG TH√îNG TIN CHUY·ªÇN KHO·∫¢N NG√ÇN H√ÄNG ===== */}
      {/* Dialog n√†y hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n ƒë·ªÉ ng∆∞·ªùi d√πng chuy·ªÉn kho·∫£n */}
      <Dialog 
        open={openBankDialog} 
        onClose={() => {
          setOpenBankDialog(false);
          setPaymentMethod('cash'); // Reset v·ªÅ ti·ªÅn m·∫∑t n·∫øu ƒë√≥ng dialog
        }}
        maxWidth="sm" 
        fullWidth
      >
        <DialogTitle sx={{ textAlign: 'center', fontWeight: 600 }}>
          üè¶ Th√¥ng tin chuy·ªÉn kho·∫£n ng√¢n h√†ng
        </DialogTitle>
        <DialogContent sx={{ pt: 2 }}>
          {/* H∆∞·ªõng d·∫´n chuy·ªÉn kho·∫£n */}
          <Typography variant="body1" gutterBottom sx={{ fontWeight: 500, color: 'primary.main' }}>
            Vui l√≤ng chuy·ªÉn kho·∫£n theo th√¥ng tin sau:
          </Typography>
          
          {/* ===== TH√îNG TIN T√ÄI KHO·∫¢N NG√ÇN H√ÄNG ===== */}
          <Box sx={{ 
            backgroundColor: '#f8faff', 
            borderRadius: 2, 
            p: 2, 
            mt: 2,
            border: '1px solid rgba(33, 150, 243, 0.2)'
          }}>
            <Typography variant="body2" sx={{ lineHeight: 2, fontFamily: 'monospace' }}>
              <strong>üèõÔ∏è Ng√¢n h√†ng:</strong> VietinBank
              <br />
              <strong>üí≥ S·ªë t√†i kho·∫£n:</strong> 123456789
              <br />
              <strong>üë§ Ch·ªß t√†i kho·∫£n:</strong> C√îNG TY TNHH D·ªäCH V·ª§ Y T·∫æ ABC
              <br />
              <strong>üìù N·ªôi dung:</strong> XN_[H·ªç t√™n]_[S·ªë ƒëi·ªán tho·∫°i]
            </Typography>
          </Box>
          
          {/* L∆∞u √Ω quan tr·ªçng */}
          <Typography variant="caption" sx={{ 
            mt: 2, 
            display: 'block', 
            color: 'error.main',
            fontStyle: 'italic' 
          }}>
            ‚ö†Ô∏è L∆∞u √Ω: Vui l√≤ng ghi ƒë√∫ng n·ªôi dung chuy·ªÉn kho·∫£n ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ x√°c nh·∫≠n thanh to√°n nhanh ch√≥ng
          </Typography>
        </DialogContent>
        <DialogActions sx={{ p: 3, pt: 1 }}>
          <Button 
            onClick={() => {
              setOpenBankDialog(false);
              setPaymentMethod('cash'); // Reset v·ªÅ ti·ªÅn m·∫∑t n·∫øu h·ªßy
            }}
          >
            H·ªßy
          </Button>
          <Button onClick={handleBankConfirm} variant="contained">
            ‚úÖ T√¥i ƒë√£ chuy·ªÉn kho·∫£n
          </Button>
        </DialogActions>
      </Dialog>

      {/* ===== N√öT X√ÅC NH·∫¨N ƒê·∫∂T L·ªäCH ===== */}
      {/* N√∫t ch√≠nh ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒë·∫∑t l·ªãch kh√°m */}
      <Button
        variant="contained"
        onClick={() => handleBooking(
          // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã paymentMethod sang format API
          paymentMethod === 'cash' ? 'CASH' :           // Ti·ªÅn m·∫∑t
          paymentMethod === 'visa' ? 'VISA' :           // Th·∫ª t√≠n d·ª•ng  
          'BANK_TRANSFER'                               // Chuy·ªÉn kho·∫£n
        )}
        disabled={loading} // V√¥ hi·ªáu h√≥a khi ƒëang x·ª≠ l√Ω
        sx={{ 
          mt: 3, // Margin top 24px
          width: '100%', // Chi·∫øm to√†n b·ªô chi·ªÅu r·ªông
          py: 1.5, // Padding vertical ƒë·ªÉ n√∫t cao h∆°n
          fontSize: '1.1rem', // Ch·ªØ l·ªõn h∆°n
          fontWeight: 600,
          borderRadius: 2, // Bo g√≥c 16px
          boxShadow: loading ? 'none' : '0 4px 12px rgba(33, 150, 243, 0.3)', // ƒê·ªï b√≥ng khi kh√¥ng loading
          '&:hover': {
            boxShadow: loading ? 'none' : '0 6px 16px rgba(33, 150, 243, 0.4)', // ƒê·ªï b√≥ng ƒë·∫≠m h∆°n khi hover
          }
        }}
      >
        {/* Text thay ƒë·ªïi t√πy theo tr·∫°ng th√°i loading */}
        {loading ? '‚è≥ ƒêang x·ª≠ l√Ω...' : 'üéØ X√°c nh·∫≠n ƒë·∫∑t l·ªãch kh√°m'}
      </Button>
    </Box>
  );
};

// ===== ƒê·ªäNH NGHƒ®A PROP TYPES =====
// X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu cho c√°c props ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ch√≠nh x√°c v√† d·ªÖ debug
PaymentSection.propTypes = {
  selectedService: PropTypes.object.isRequired,       // D·ªãch v·ª• ƒë∆∞·ª£c ch·ªçn (b·∫Øt bu·ªôc, object)
  selectedDate: PropTypes.instanceOf(Date).isRequired, // Ng√†y kh√°m (b·∫Øt bu·ªôc, Date object)
  selectedTime: PropTypes.string.isRequired,           // Gi·ªù kh√°m (b·∫Øt bu·ªôc, string nh∆∞ "14:30")
  note: PropTypes.string.isRequired,                   // Ghi ch√∫ (b·∫Øt bu·ªôc, c√≥ th·ªÉ l√† string r·ªóng)
  onSuccess: PropTypes.func.isRequired,                // Callback khi ƒë·∫∑t l·ªãch th√†nh c√¥ng (b·∫Øt bu·ªôc, function)
};

// Export component ƒë·ªÉ s·ª≠ d·ª•ng ·ªü c√°c file kh√°c
export default PaymentSection;
