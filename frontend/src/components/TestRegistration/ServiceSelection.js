import React from 'react';
import PropTypes from 'prop-types';
import {
  Box,
  TextField,
  InputAdornment,
  Card,
  CardContent,
  Typography,
  Chip,
  Button
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import CheckCircleRoundedIcon from '@mui/icons-material/CheckCircleRounded';

// ===== COMPONENT CH·ªåN D·ªäCH V·ª§ X√âT NGHI·ªÜM =====
// Component n√†y hi·ªÉn th·ªã danh s√°ch c√°c d·ªãch v·ª• x√©t nghi·ªám (l·∫ª v√† g√≥i) ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
const ServiceSelection = ({
  activeTab,              // Tab ƒëang active: 'single' (x√©t nghi·ªám l·∫ª) ho·∫∑c 'package' (g√≥i x√©t nghi·ªám)
  setActiveTab,           // H√†m thay ƒë·ªïi tab active
  searchQuery,            // T·ª´ kh√≥a t√¨m ki·∫øm
  setSearchQuery,         // H√†m c·∫≠p nh·∫≠t t·ª´ kh√≥a t√¨m ki·∫øm
  paginatedSingleTests,   // Danh s√°ch x√©t nghi·ªám l·∫ª ƒë√£ ph√¢n trang
  paginatedPackages,      // Danh s√°ch g√≥i x√©t nghi·ªám ƒë√£ ph√¢n trang
  selectedService,        // D·ªãch v·ª• ƒëang ƒë∆∞·ª£c ch·ªçn {type: 'single'|'package', idx: number}
  onSelectService,        // H√†m x·ª≠ l√Ω khi ch·ªçn d·ªãch v·ª•
  onOpenDetail           // H√†m m·ªü chi ti·∫øt d·ªãch v·ª•
}) => {

  // ===== GIAO DI·ªÜN COMPONENT =====
  return (
    <Box sx={{ 
      background: '#fff',                                      // N·ªÅn tr·∫Øng
      borderRadius: 5,                                         // Bo g√≥c 40px
      p: { xs: 3, md: 5 },                                    // Padding responsive: mobile 24px, desktop 40px
      boxShadow: '0 8px 32px rgba(74,144,226,0.10)',          // ƒê·ªï b√≥ng xanh nh·∫π
      my: 2,                                                   // Margin vertical 16px
      fontFamily: 'inherit'                                    // K·∫ø th·ª´a font t·ª´ parent
    }}>
      
      {/* ===== PH·∫¶N HEADER - TI√äU ƒê·ªÄ V√Ä M√î T·∫¢ ===== */}
      <Box sx={{ textAlign: 'center', mb: 4 }}>
        {/* Ti√™u ƒë·ªÅ ch√≠nh v·ªõi gradient text */}
        <Typography
          variant="h4"
          fontWeight={800}
          sx={{
            background: 'linear-gradient(90deg, #4A90E2 0%, #1ABC9C 100%)', // Gradient xanh d∆∞∆°ng sang xanh ng·ªçc
            backgroundClip: 'text',                            // C·∫Øt background theo text
            WebkitBackgroundClip: 'text',                      // Webkit prefix cho Safari
            WebkitTextFillColor: 'transparent',                // L√†m text trong su·ªët ƒë·ªÉ hi·ªán gradient
            mb: 2,                                             // Margin bottom 16px
            fontSize: { xs: '1.8rem', md: '2.2rem' }          // Font size responsive
          }}
        >
          Ch·ªçn lo·∫°i d·ªãch v·ª•
        </Typography>
        
        {/* M√¥ t·∫£ ng·∫Øn g·ªçn */}
        <Typography
          sx={{ 
            color: '#757575',                                  // M√†u x√°m
            fontWeight: 400,                                   // Font weight normal
            fontSize: { xs: 16, md: 18 },                     // Font size responsive
            fontFamily: 'inherit',
            maxWidth: 600,                                     // Gi·ªõi h·∫°n chi·ªÅu r·ªông
            mx: 'auto',                                        // CƒÉn gi·ªØa
            lineHeight: 1.6                                    // Kho·∫£ng c√°ch d√≤ng
          }}
        >
          Ch·ªçn lo·∫°i x√©t nghi·ªám ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n. Ch√∫ng t√¥i cung c·∫•p c·∫£ x√©t nghi·ªám l·∫ª v√† g√≥i x√©t nghi·ªám t·ªïng h·ª£p.
        </Typography>
      </Box>

      {/* ===== PH·∫¶N TAB NAVIGATION - CHUY·ªÇN ƒê·ªîI GI·ªÆA X√âT NGHI·ªÜM L·∫∫ V√Ä G√ìI ===== */}
      <Box sx={{ 
        display: 'flex',                                       // Layout flexbox
        gap: 1,                                                // Kho·∫£ng c√°ch gi·ªØa c√°c tab
        mb: 4,                                                 // Margin bottom 32px
        justifyContent: 'center',                              // CƒÉn gi·ªØa
        bgcolor: '#f8faff',                                    // N·ªÅn xanh r·∫•t nh·∫°t
        borderRadius: 3,                                       // Bo g√≥c 24px
        p: 1,                                                  // Padding 8px
        maxWidth: 400,                                         // Chi·ªÅu r·ªông t·ªëi ƒëa
        mx: 'auto'                                             // CƒÉn gi·ªØa
      }}>
        
        {/* ===== TAB X√âT NGHI·ªÜM L·∫∫ ===== */}
        <Box
          sx={{
            flex: 1,                                           // Chi·∫øm 1 ph·∫ßn trong flex container
            py: 2,                                             // Padding vertical 16px
            px: 3,                                             // Padding horizontal 24px
            borderRadius: 2,                                   // Bo g√≥c 16px
            fontWeight: 700,                                   // Font weight bold
            fontSize: { xs: 14, md: 16 },                     // Font size responsive
            textAlign: 'center',                               // CƒÉn gi·ªØa text
            cursor: 'pointer',                                 // Con tr·ªü th√†nh pointer khi hover
            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)', // Animation m∆∞·ª£t
            
            // ===== STYLE THEO TR·∫†NG TH√ÅI ACTIVE =====
            background: activeTab === 'single' 
              ? 'linear-gradient(135deg, #4A90E2 0%, #1ABC9C 100%)'  // Gradient khi active
              : 'transparent',                                        // Trong su·ªët khi kh√¥ng active
            color: activeTab === 'single' ? '#fff' : '#666',          // M√†u text: tr·∫Øng khi active, x√°m khi kh√¥ng
            boxShadow: activeTab === 'single' ? '0 8px 25px rgba(74,144,226,0.25)' : 'none', // ƒê·ªï b√≥ng khi active
            transform: activeTab === 'single' ? 'translateY(-2px)' : 'none', // N√¢ng l√™n khi active
            
            // ===== HI·ªÜU ·ª®NG HOVER =====
            '&:hover': {
              background: activeTab === 'single' 
                ? 'linear-gradient(135deg, #4A90E2 0%, #1ABC9C 100%)' // Gi·ªØ nguy√™n gradient khi active
                : 'rgba(74,144,226,0.1)',                             // N·ªÅn xanh nh·∫π khi kh√¥ng active
              transform: 'translateY(-2px)',                          // Lu√¥n n√¢ng l√™n khi hover
            }
          }}
          onClick={() => setActiveTab('single')} // Chuy·ªÉn sang tab x√©t nghi·ªám l·∫ª
        >
          üî¨ X√©t nghi·ªám l·∫ª
        </Box>
        
        {/* ===== TAB G√ìI X√âT NGHI·ªÜM ===== */}
        <Box
          sx={{
            flex: 1,
            py: 2,
            px: 3,
            borderRadius: 2,
            fontWeight: 700,
            fontSize: { xs: 14, md: 16 },
            textAlign: 'center',
            cursor: 'pointer',
            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
            
            // Style t∆∞∆°ng t·ª± nh∆∞ tab x√©t nghi·ªám l·∫ª nh∆∞ng check activeTab === 'package'
            background: activeTab === 'package' 
              ? 'linear-gradient(135deg, #4A90E2 0%, #1ABC9C 100%)' 
              : 'transparent',
            color: activeTab === 'package' ? '#fff' : '#666',
            boxShadow: activeTab === 'package' ? '0 8px 25px rgba(74,144,226,0.25)' : 'none',
            transform: activeTab === 'package' ? 'translateY(-2px)' : 'none',
            '&:hover': {
              background: activeTab === 'package' 
                ? 'linear-gradient(135deg, #4A90E2 0%, #1ABC9C 100%)' 
                : 'rgba(74,144,226,0.1)',
              transform: 'translateY(-2px)',
            }
          }}
          onClick={() => setActiveTab('package')} // Chuy·ªÉn sang tab g√≥i x√©t nghi·ªám
        >
          üì¶ G√≥i x√©t nghi·ªám
        </Box>
      </Box>

      {/* ===== THANH T√åM KI·∫æM ===== */}
      <Box sx={{ mb: 4, maxWidth: 500, mx: 'auto' }}>
        <TextField
          fullWidth
          placeholder={`T√¨m ki·∫øm ${activeTab === 'single' ? 'x√©t nghi·ªám' : 'g√≥i x√©t nghi·ªám'}...`} // Placeholder ƒë·ªông theo tab
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)} // C·∫≠p nh·∫≠t t·ª´ kh√≥a t√¨m ki·∫øm
          sx={{
            // ===== STYLE CHO INPUT =====
            '& .MuiOutlinedInput-root': {
              borderRadius: 3,                                 // Bo g√≥c 24px
              bgcolor: '#f8faff',                             // N·ªÅn xanh nh·∫°t
              fontSize: 16,                                    // Font size 16px
              
              // ===== STYLE CHO VI·ªÄN =====
              '& fieldset': {
                borderColor: 'rgba(74,144,226,0.2)',          // Vi·ªÅn xanh nh·∫°t
                borderWidth: 2                                 // ƒê·ªô d√†y vi·ªÅn 2px
              },
              
              // ===== STYLE KHI HOVER =====
              '&:hover fieldset': {
                borderColor: 'rgba(74,144,226,0.4)',          // Vi·ªÅn xanh ƒë·∫≠m h∆°n khi hover
              },
              
              // ===== STYLE KHI FOCUS =====
              '&.Mui-focused fieldset': {
                borderColor: '#4A90E2',                        // Vi·ªÅn xanh ƒë·∫≠m khi focus
              },
            },
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon sx={{ color: '#4A90E2', mr: 1 }} /> {/* Icon t√¨m ki·∫øm m√†u xanh */}
              </InputAdornment>
            ),
          }}
        />
      </Box>

      {/* ===== DANH S√ÅCH D·ªäCH V·ª§ - HI·ªÇN TH·ªä THEO TAB ===== */}
      {activeTab === 'single' ? (
        <>
          {/* ===== TR∆Ø·ªúNG H·ª¢P KH√îNG T√åM TH·∫§Y X√âT NGHI·ªÜM L·∫∫ ===== */}
          {paginatedSingleTests.length === 0 ? (
            <Box sx={{ textAlign: 'center', py: 6 }}>
              <Typography variant="h6" color="text.secondary" sx={{ mb: 2 }}>
                üîç Kh√¥ng t√¨m th·∫•y x√©t nghi·ªám n√†o
              </Typography>
              <Typography color="text.secondary">
                H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c
              </Typography>
            </Box>
          ) : (
            /* ===== DANH S√ÅCH X√âT NGHI·ªÜM L·∫∫ ===== */
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1.5 }}>
              {/* Ki·ªÉm tra an to√†n tr∆∞·ªõc khi map ƒë·ªÉ tr√°nh l·ªói runtime */}
              {Array.isArray(paginatedSingleTests) && paginatedSingleTests.map((service, idx) => (
                <Card
                  key={service.id}
                  sx={{
                    borderRadius: 4,                           // Bo g√≥c 32px
                    
                    // ===== LOGIC STYLE THEO TR·∫†NG TH√ÅI CH·ªåN =====
                    boxShadow: selectedService?.type === 'single' && selectedService?.idx === idx
                      ? '0 8px 32px rgba(74,144,226,0.25)'     // ƒê·ªï b√≥ng ƒë·∫≠m khi ƒë∆∞·ª£c ch·ªçn
                      : '0 4px 20px rgba(0,0,0,0.08)',        // ƒê·ªï b√≥ng nh·∫π khi kh√¥ng ƒë∆∞·ª£c ch·ªçn
                    border: selectedService?.type === 'single' && selectedService?.idx === idx
                      ? '2px solid #4A90E2'                    // Vi·ªÅn xanh khi ƒë∆∞·ª£c ch·ªçn
                      : '1px solid rgba(0,0,0,0.08)',          // Vi·ªÅn m·ªèng khi kh√¥ng ƒë∆∞·ª£c ch·ªçn
                    background: selectedService?.type === 'single' && selectedService?.idx === idx
                      ? 'linear-gradient(135deg, #f0f7ff 0%, #e8f4ff 100%)' // N·ªÅn gradient xanh khi ƒë∆∞·ª£c ch·ªçn
                      : 'linear-gradient(135deg, #ffffff 0%, #fafbff 100%)', // N·ªÅn tr·∫Øng khi kh√¥ng ƒë∆∞·ª£c ch·ªçn
                    
                    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)', // Animation m∆∞·ª£t
                    cursor: 'pointer',                         // Con tr·ªè pointer
                    position: 'relative',                      // ƒê·ªÉ ƒë·ªãnh v·ªã c√°c element con absolute
                    overflow: 'hidden',                        // ·∫®n n·ªôi dung tr√†n
                    
                    // ===== HI·ªÜU ·ª®NG HOVER =====
                    '&:hover': {
                      transform: 'translateY(-4px)',            // N√¢ng l√™n 4px
                      boxShadow: '0 12px 40px rgba(74,144,226,0.2)', // ƒê·ªï b√≥ng ƒë·∫≠m h∆°n
                      border: '1px solid #4A90E2',             // Vi·ªÅn xanh
                    },
                    
                    // ===== THANH TRANG TR√ç PH√çA TR√äN =====
                    '&::before': {
                      content: '""',                           // T·∫°o pseudo element
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      right: 0,
                      height: 4,                               // Chi·ªÅu cao 4px
                      background: selectedService?.type === 'single' && selectedService?.idx === idx
                        ? 'linear-gradient(90deg, #4A90E2 0%, #1ABC9C 100%)' // Gradient xanh khi ƒë∆∞·ª£c ch·ªçn
                        : 'linear-gradient(90deg, #e0e7ff 0%, #f0f7ff 100%)', // Gradient nh·∫°t khi kh√¥ng ƒë∆∞·ª£c ch·ªçn
                    }
                  }}
                  onClick={() => onSelectService('single', idx)} // X·ª≠ l√Ω khi click ch·ªçn d·ªãch v·ª•
                >
                  
                  {/* ===== ICON CH·ªà TH·ªä ƒê∆Ø·ª¢C CH·ªåN ===== */}
                  {/* Ch·ªâ hi·ªÉn th·ªã khi d·ªãch v·ª• n√†y ƒë∆∞·ª£c ch·ªçn */}
                  {selectedService?.type === 'single' && selectedService?.idx === idx && (
                    <Box
                      sx={{
                        position: 'absolute',                  // ƒê·ªãnh v·ªã tuy·ªát ƒë·ªëi
                        bottom: 20,                            // C√°ch bottom 20px
                        right: 20,                             // C√°ch right 20px
                        width: 32,                             // K√≠ch th∆∞·ªõc 32x32px
                        height: 32,
                        borderRadius: '50%',                   // H√¨nh tr√≤n
                        background: 'linear-gradient(135deg, #4A90E2, #1ABC9C)', // N·ªÅn gradient
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        boxShadow: '0 4px 12px rgba(74,144,226,0.3)', // ƒê·ªï b√≥ng
                        zIndex: 2,                             // N·∫±m tr√™n c√°c element kh√°c
                      }}
                    >
                      <CheckCircleRoundedIcon sx={{ color: 'white', fontSize: 20 }} />
                    </Box>
                  )}

                  {/* ===== N·ªòI DUNG CARD X√âT NGHI·ªÜM L·∫∫ ===== */}
                  <CardContent sx={{ p: 2.5 }}>
                    {/* Layout ch√≠nh: n·ªôi dung b√™n tr√°i, gi√° v√† n√∫t b√™n ph·∫£i */}
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1.5 }}>
                      
                      {/* ===== PH·∫¶N N·ªòI DUNG CH√çNH B√äN TR√ÅI ===== */}
                      <Box sx={{ flex: 1, pr: 2 }}>
                        
                        {/* ===== HEADER: ICON + T√äN D·ªäCH V·ª§ ===== */}
                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>
                          {/* Icon container v·ªõi gradient background */}
                          <Box
                            sx={{
                              width: 40,                         // K√≠ch th∆∞·ªõc 40x40px
                              height: 40,
                              borderRadius: 2,                   // Bo g√≥c 16px
                              background: 'linear-gradient(135deg, rgba(74,144,226,0.1), rgba(26,188,156,0.1))', // N·ªÅn gradient xanh nh·∫π
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              mr: 1.5,                           // Margin right 12px
                              border: '1px solid rgba(74,144,226,0.2)' // Vi·ªÅn xanh nh·∫π
                            }}
                          >
                            <Typography sx={{ fontSize: 18 }}>üî¨</Typography> {/* Icon x√©t nghi·ªám */}
                          </Box>
                          
                          {/* Th√¥ng tin t√™n v√† lo·∫°i d·ªãch v·ª• */}
                          <Box>
                            {/* T√™n d·ªãch v·ª• */}
                            <Typography 
                              variant="h6"
                              fontWeight={700} 
                              sx={{ 
                                fontSize: { xs: 16, md: 18 },    // Font size responsive
                                color: '#2d3748',                // M√†u x√°m ƒë·∫≠m
                                lineHeight: 1.2                  // Kho·∫£ng c√°ch d√≤ng
                              }}
                            >
                              {service.name}
                            </Typography>
                            
                            {/* Label lo·∫°i d·ªãch v·ª• */}
                            <Typography 
                              variant="body2" 
                              sx={{ 
                                color: '#4A90E2',                // M√†u xanh
                                fontWeight: 600,
                                fontSize: 12
                              }}
                            >
                              X√©t nghi·ªám l·∫ª
                            </Typography>
                          </Box>
                        </Box>
                        
                        {/* ===== M√î T·∫¢ D·ªäCH V·ª§ ===== */}
                        <Typography 
                          color="text.secondary" 
                          sx={{ 
                            fontSize: 14,
                            lineHeight: 1.5,
                            mb: 2,                               // Margin bottom 16px
                            display: '-webkit-box',             // Hi·ªÉn th·ªã d·∫°ng box
                            WebkitLineClamp: 2,                  // Gi·ªõi h·∫°n 2 d√≤ng
                            WebkitBoxOrient: 'vertical',         // H∆∞·ªõng d·ªçc
                            overflow: 'hidden'                   // ·∫®n ph·∫ßn tr√†n
                          }}
                        >
                          {/* Hi·ªÉn th·ªã m√¥ t·∫£ ho·∫∑c text m·∫∑c ƒë·ªãnh */}
                          {service.description || 'X√©t nghi·ªám chuy√™n s√¢u v·ªõi k·∫øt qu·∫£ ch√≠nh x√°c v√† nhanh ch√≥ng'}
                        </Typography>

                        {/* ===== DANH S√ÅCH CHIP TH√îNG TIN ===== */}
                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1.5, mb: 1.5 }}>
                          
                          {/* Chip th·ªùi gian th·ª±c hi·ªán */}
                          <Chip
                            icon={<AccessTimeIcon />}           // Icon ƒë·ªìng h·ªì
                            label={service.duration}            // Th·ªùi gian (VD: "30 ph√∫t")
                            size="small"
                            sx={{
                              bgcolor: 'rgba(74,144,226,0.1)',  // N·ªÅn xanh nh·∫π
                              color: '#4A90E2',                 // Text xanh
                              fontWeight: 600,
                              '& .MuiChip-icon': { color: '#4A90E2' } // Icon m√†u xanh
                            }}
                          />
                          
                          {/* Chip ph∆∞∆°ng ph√°p x√©t nghi·ªám */}
                          <Chip
                            label={service.method}              // Ph∆∞∆°ng ph√°p (VD: "PCR", "ELISA")
                            size="small"
                            sx={{
                              bgcolor: 'rgba(26,188,156,0.1)',  // N·ªÅn xanh ng·ªçc nh·∫π
                              color: '#1ABC9C',                 // Text xanh ng·ªçc
                              fontWeight: 600
                            }}
                          />
                          
                          {/* Chip ƒë·ªô ch√≠nh x√°c */}
                          <Chip
                            label={`${service.accuracy} ch√≠nh x√°c`} // ƒê·ªô ch√≠nh x√°c (VD: "99% ch√≠nh x√°c")
                            size="small"
                            sx={{
                              bgcolor: 'rgba(34,197,94,0.1)',   // N·ªÅn xanh l√° nh·∫π
                              color: '#22c55e',                 // Text xanh l√°
                              fontWeight: 600
                            }}
                          />
                          
                          {/* Chip lo·∫°i m·∫´u (ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥) */}
                          {service.sampleType && (
                            <Chip
                              label={service.sampleType}        // Lo·∫°i m·∫´u (VD: "M√°u", "N∆∞·ªõc ti·ªÉu")
                              size="small"
                              sx={{
                                bgcolor: 'rgba(245,158,11,0.1)', // N·ªÅn cam nh·∫π
                                color: '#f59e0b',               // Text cam
                                fontWeight: 600
                              }}
                            />
                          )}
                        </Box>
                      </Box>

                      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end', gap: 1 }}>
                        <Box sx={{ display: 'flex', gap: 1 }}>
                          <Box
                            sx={{
                              bgcolor: 'rgba(74,144,226,0.1)',
                              borderRadius: 2,
                              px: 2,
                              py: 1,
                              border: '1px solid rgba(74,144,226,0.2)',
                              minWidth: 90
                            }}
                          >
                            <Typography 
                              fontWeight={800} 
                              sx={{ 
                                fontSize: { xs: 14, md: 16 },
                                background: 'linear-gradient(90deg, #4A90E2 0%, #1ABC9C 100%)',
                                backgroundClip: 'text',
                                WebkitBackgroundClip: 'text',
                                WebkitTextFillColor: 'transparent',
                                textAlign: 'center'
                              }}
                            >
                              {service.price ? service.price.toLocaleString('vi-VN') + ' ƒë' : 'Li√™n h·ªá'}
                            </Typography>
                          </Box>

                          {onOpenDetail && (
                            <Button
                              variant="outlined"
                              onClick={(e) => {
                                e.stopPropagation();
                                onOpenDetail(service.id, 'single');
                              }}
                              sx={{
                                borderRadius: 2,
                                px: 2,
                                py: 1,
                                fontWeight: 600,
                                fontSize: 12,
                                borderWidth: 1.5,
                                borderColor: '#4A90E2',
                                color: '#4A90E2',
                                minWidth: 80,
                                height: 'auto',
                                '&:hover': {
                                  borderWidth: 1.5,
                                  bgcolor: 'rgba(74,144,226,0.1)',
                                  transform: 'translateY(-1px)',
                                },
                              }}
                            >
                              Chi ti·∫øt
                            </Button>
                          )}
                        </Box>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              ))}
            </Box>
          )}
        </>
      ) : (
        <>
          {paginatedPackages.length === 0 ? (
            <Box sx={{ textAlign: 'center', py: 6 }}>
              <Typography variant="h6" color="text.secondary" sx={{ mb: 2 }}>
                üì¶ Kh√¥ng t√¨m th·∫•y g√≥i x√©t nghi·ªám n√†o
              </Typography>
              <Typography color="text.secondary">
                H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c
              </Typography>
            </Box>
          ) : (
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1.5 }}>
              {/* Ki·ªÉm tra an to√†n tr∆∞·ªõc khi map ƒë·ªÉ tr√°nh l·ªói runtime */}
              {Array.isArray(paginatedPackages) && paginatedPackages.map((service, idx) => (
                <Card
                  key={service.id}
                  sx={{
                    borderRadius: 4,
                    boxShadow: selectedService?.type === 'package' && selectedService?.idx === idx
                      ? '0 8px 32px rgba(74,144,226,0.25)'
                      : '0 4px 20px rgba(0,0,0,0.08)',
                    border: selectedService?.type === 'package' && selectedService?.idx === idx
                      ? '2px solid #4A90E2'
                      : '1px solid rgba(0,0,0,0.08)',
                    background: selectedService?.type === 'package' && selectedService?.idx === idx
                      ? 'linear-gradient(135deg, #f0f7ff 0%, #e8f4ff 100%)'
                      : 'linear-gradient(135deg, #ffffff 0%, #fafbff 100%)',
                    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                    cursor: 'pointer',
                    position: 'relative',
                    overflow: 'hidden',
                    '&:hover': {
                      transform: 'translateY(-4px)',
                      boxShadow: '0 12px 40px rgba(74,144,226,0.2)',
                      border: '1px solid #4A90E2',
                    },
                    '&::before': {
                      content: '""',
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      right: 0,
                      height: 4,
                      background: selectedService?.type === 'package' && selectedService?.idx === idx
                        ? 'linear-gradient(90deg, #4A90E2 0%, #1ABC9C 100%)'
                        : 'linear-gradient(90deg, #e0e7ff 0%, #f0f7ff 100%)',
                    }
                  }}
                  onClick={() => onSelectService('package', idx)}
                >
                  {/* Selection Indicator */}
                  {selectedService?.type === 'package' && selectedService?.idx === idx && (
                    <Box
                      sx={{
                        position: 'absolute',
                        bottom: 20,
                        right: 20,
                        width: 32,
                        height: 32,
                        borderRadius: '50%',
                        background: 'linear-gradient(135deg, #4A90E2, #1ABC9C)',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        boxShadow: '0 4px 12px rgba(74,144,226,0.3)',
                        zIndex: 2,
                      }}
                    >
                      <CheckCircleRoundedIcon sx={{ color: 'white', fontSize: 20 }} />
                    </Box>
                  )}

                  {/* Popular Badge */}
                  {/* <Box
                    sx={{
                      position: 'absolute',
                      bottom: 15,
                      left: 15,
                      bgcolor: 'linear-gradient(90deg, #4A90E2 0%, #1ABC9C 100%)',
                      background: 'linear-gradient(90deg, #4A90E2 0%, #1ABC9C 100%)',
                      color: 'white',
                      px: 2,
                      py: 0.5,
                      borderRadius: 2,
                      fontSize: 12,
                      fontWeight: 700,
                      zIndex: 3,
                      boxShadow: '0 2px 8px rgba(74,144,226,0.3)',
                    }}
                  >
                    üî• PH·ªî BI·∫æN
                  </Box> */}

                  <CardContent sx={{ p: 2.5, pt: 3.5 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1.5 }}>
                      <Box sx={{ flex: 1, pr: 2 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>
                          <Box
                            sx={{
                              width: 40,
                              height: 40,
                              borderRadius: 2,
                              background: 'linear-gradient(135deg, rgba(245,158,11,0.1), rgba(249,115,22,0.1))',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              mr: 1.5,
                              border: '1px solid rgba(245,158,11,0.2)'
                            }}
                          >
                            <Typography sx={{ fontSize: 18 }}>üì¶</Typography>
                          </Box>
                          <Box>
                            <Typography 
                              variant="h6" 
                              fontWeight={700} 
                              sx={{ 
                                fontSize: { xs: 16, md: 18 },
                                color: '#2d3748',
                                lineHeight: 1.2
                              }}
                            >
                              {service.name}
                            </Typography>
                            <Typography 
                              variant="body2" 
                              sx={{ 
                                color: '#4A90E2',
                                fontWeight: 600,
                                fontSize: 12
                              }}
                            >
                              G√≥i x√©t nghi·ªám t·ªïng h·ª£p
                            </Typography>
                          </Box>
                        </Box>
                        
                        <Typography 
                          color="text.secondary" 
                          sx={{ 
                            fontSize: 14,
                            lineHeight: 1.5,
                            mb: 2,
                            display: '-webkit-box',
                            WebkitLineClamp: 2,
                            WebkitBoxOrient: 'vertical',
                            overflow: 'hidden'
                          }}
                        >
                          {service.description || 'G√≥i x√©t nghi·ªám t·ªïng h·ª£p v·ªõi nhi·ªÅu d·ªãch v·ª• v√† gi√° ∆∞u ƒë√£i'}
                        </Typography>

                        {/* Services count indicator */}
                        {service.services && (
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, mb: 1.5 }}>
                            <Chip
                              label={`${service.totalServices || service.services.length} d·ªãch v·ª•`}
                              size="small"
                              sx={{
                                bgcolor: 'rgba(74,144,226,0.1)',
                                color: '#4A90E2',
                                fontWeight: 600,
                              }}
                            />
                            <Chip
                              icon={<AccessTimeIcon />}
                              label={service.duration}
                              size="small"
                              sx={{
                                bgcolor: 'rgba(74,144,226,0.1)',
                                color: '#4A90E2',
                                fontWeight: 600,
                                '& .MuiChip-icon': { color: '#4A90E2' }
                              }}
                            />
                            <Chip
                              label={`${service.accuracy} ch√≠nh x√°c`}
                              size="small"
                              sx={{
                                bgcolor: 'rgba(34,197,94,0.1)',
                                color: '#22c55e',
                                fontWeight: 600
                              }}
                            />
                            <Chip
                              label={service.savings}
                              size="small"
                              sx={{
                                bgcolor: 'rgba(245,158,11,0.1)',
                                color: '#f59e0b',
                                fontWeight: 600
                              }}
                            />
                          </Box>
                        )}
                      </Box>

                      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end', gap: 1 }}>
                        <Box sx={{ display: 'flex', gap: 1 }}>
                          <Box
                            sx={{
                              bgcolor: 'rgba(74,144,226,0.1)',
                              borderRadius: 2,
                              px: 2,
                              py: 1,
                              border: '1px solid rgba(74,144,226,0.2)',
                              minWidth: 90
                            }}
                          >
                            <Typography 
                              fontWeight={800} 
                              sx={{ 
                                fontSize: { xs: 14, md: 16 },
                                background: 'linear-gradient(90deg, #4A90E2 0%, #1ABC9C 100%)',
                                backgroundClip: 'text',
                                WebkitBackgroundClip: 'text',
                                WebkitTextFillColor: 'transparent',
                                textAlign: 'center'
                              }}
                            >
                              {service.price ? service.price.toLocaleString('vi-VN') + ' ƒë' : 'Li√™n h·ªá'}
                            </Typography>
                          </Box>

                          {onOpenDetail && (
                            <Button
                              variant="outlined"
                              onClick={(e) => {
                                e.stopPropagation();
                                onOpenDetail(service.id, 'package');
                              }}
                              sx={{
                                borderRadius: 2,
                                px: 2,
                                py: 1,
                                fontWeight: 600,
                                fontSize: 12,
                                borderWidth: 1.5,
                                borderColor: '#4A90E2',
                                color: '#4A90E2',
                                minWidth: 80,
                                height: 'auto',
                                '&:hover': {
                                  borderWidth: 1.5,
                                  bgcolor: 'rgba(74,144,226,0.1)',
                                  transform: 'translateY(-1px)',
                                },
                              }}
                            >
                              Chi ti·∫øt
                            </Button>
                          )}
                        </Box>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              ))}
            </Box>
          )}
        </>
      )}
    </Box>
  );
};

// ===== ƒê·ªäNH NGHƒ®A PROP TYPES =====
// X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu cho c√°c props ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ch√≠nh x√°c v√† d·ªÖ debug
ServiceSelection.propTypes = {
  activeTab: PropTypes.string.isRequired,               // Tab ƒëang active (b·∫Øt bu·ªôc, string: 'single' ho·∫∑c 'package')
  setActiveTab: PropTypes.func.isRequired,              // H√†m thay ƒë·ªïi tab (b·∫Øt bu·ªôc, function)
  searchQuery: PropTypes.string.isRequired,             // T·ª´ kh√≥a t√¨m ki·∫øm (b·∫Øt bu·ªôc, string)
  setSearchQuery: PropTypes.func.isRequired,            // H√†m c·∫≠p nh·∫≠t t·ª´ kh√≥a t√¨m ki·∫øm (b·∫Øt bu·ªôc, function)
  paginatedSingleTests: PropTypes.array.isRequired,     // Danh s√°ch x√©t nghi·ªám l·∫ª (b·∫Øt bu·ªôc, array)
  paginatedPackages: PropTypes.array.isRequired,        // Danh s√°ch g√≥i x√©t nghi·ªám (b·∫Øt bu·ªôc, array)
  selectedService: PropTypes.object,                    // D·ªãch v·ª• ƒëang ƒë∆∞·ª£c ch·ªçn (t√πy ch·ªçn, object: {type, idx})
  onSelectService: PropTypes.func.isRequired,           // H√†m x·ª≠ l√Ω khi ch·ªçn d·ªãch v·ª• (b·∫Øt bu·ªôc, function)
  onOpenDetail: PropTypes.func                          // H√†m m·ªü chi ti·∫øt d·ªãch v·ª• (t√πy ch·ªçn, function)
};

// Export component ƒë·ªÉ s·ª≠ d·ª•ng ·ªü c√°c file kh√°c
export default ServiceSelection;
