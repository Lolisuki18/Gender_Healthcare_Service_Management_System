/**
 * UserManagementContent.js - Admin User Management
 *
 * Trang qu·∫£n l√Ω ng∆∞·ªùi d√πng cho Admin
 */
import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  Card,
  CardContent,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Avatar,
  Chip,
  Button,
  TextField,
  IconButton,
  Tabs,
  Tab,
  FormControl,
  InputLabel,
  Select,
  Grid,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  CircularProgress,
} from "@mui/material";
import {
  Edit as EditIcon,
  Delete as DeleteIcon,
  Search as SearchIcon,
  ManageAccounts as ManageAccountsIcon,
  People as PeopleIcon,
  BusinessCenter as BusinessIcon,
  Security as SecurityIcon,
  Person as PersonIcon,
  Support as SupportIcon,
  Visibility as VisibilityIcon,
  Add as AddIcon,
} from "@mui/icons-material";
import AddUserModal from "./modals/AddUserModal";
import ViewUserModal from "./modals/ViewUserModal";
import EditUserModal from "./modals/EditUserModal";
import { confirmDialog } from "@/utils/confirmDialog";
import { userService } from "@/services/userService";
import { adminService } from "@/services/adminService";
import notify from "@/utils/notification";

const UserManagementContent = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedTab, setSelectedTab] = useState(0);
  const [roleFilter, setRoleFilter] = useState("all");
  const [statusFilter, setStatusFilter] = useState("all");
  const [openModal, setOpenModal] = useState(false);
  const [modalType, setModalType] = useState("");
  const [openViewModal, setOpenViewModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [openEditModal, setOpenEditModal] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [openRoleSelection, setOpenRoleSelection] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [users, setUsers] = useState([]);
  const [loadingUserDetails, setLoadingUserDetails] = useState(false);

  // ‚úÖ Fetch users t·ª´ API khi component mount
  useEffect(() => {
    fetchUsers();
  }, []);

  // ‚úÖ Function ƒë·ªÉ fetch users t·ª´ API
  const fetchUsers = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log("ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...");
      const response = await adminService.getAllUsers();
      console.log("Response t·ª´ API:", response);

      if (response && response.data) {
        setUsers(response.data);
        console.log("ƒê√£ t·∫£i th√†nh c√¥ng:", response.data.length, "ng∆∞·ªùi d√πng");
      } else if (Array.isArray(response)) {
        setUsers(response);
        console.log("ƒê√£ t·∫£i th√†nh c√¥ng:", response.length, "ng∆∞·ªùi d√πng");
      } else {
        console.warn("Format response kh√¥ng nh∆∞ mong ƒë·ª£i:", response);
        setUsers([]);
      }
    } catch (error) {
      console.error("L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", error);
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau.");
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ C·∫≠p nh·∫≠t userCategories ƒë·ªÉ s·ª≠ d·ª•ng role t·ª´ API
  const userCategories = [
    {
      label: "T·∫•t c·∫£",
      value: "all",
      icon: <PeopleIcon />,
      count: users.length,
    },
    {
      label: "Qu·∫£n tr·ªã vi√™n",
      value: "ADMIN",
      icon: <SecurityIcon />,
      count: users.filter((u) => u.role === "ADMIN").length,
    },
    {
      label: "Nh√¢n vi√™n",
      value: "STAFF",
      icon: <BusinessIcon />,
      count: users.filter((u) => u.role === "STAFF").length,
    },
    {
      label: "Kh√°ch h√†ng",
      value: "CUSTOMER",
      icon: <PersonIcon />,
      count: users.filter((u) => u.role === "CUSTOMER").length,
    },
    {
      label: "T∆∞ v·∫•n vi√™n",
      value: "CONSULTANT",
      icon: <SupportIcon />,
      count: users.filter((u) => u.role === "CONSULTANT").length,
    },
  ];

  // ‚úÖ C·∫≠p nh·∫≠t handleEdit
  const handleEdit = async (userId) => {
    const user = users.find((u) => u.id === userId);
    if (!user) return;

    if (user.role === "ADMIN") {
      const isConfirmed = await confirmDialog.warning(
        `B·∫°n ƒëang s·ª≠a th√¥ng tin Qu·∫£n tr·ªã vi√™n "${
          user.fullName || user.username || "Kh√¥ng c√≥ t√™n"
        }". H√£y c·∫©n th·∫≠n v·ªõi c√°c thay ƒë·ªïi!`,
        {
          title: "‚ö†Ô∏è Ch·ªânh s·ª≠a Qu·∫£n tr·ªã vi√™n",
          confirmText: "Ti·∫øp t·ª•c ch·ªânh s·ª≠a",
          cancelText: "H·ªßy",
        }
      );

      if (!isConfirmed) return;
    }

    setEditingUser(user);
    setOpenEditModal(true);
  };
  // * ‚úÖ Th√™m handler ri√™ng cho c·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n
  //H√†m n√†y ch∆∞a g·∫Øn API
  const handleUpdateBasicInfo = async (formData) => {
    try {
      console.log("üîÑ ƒêang c·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n:", formData);

      // G·ªçi API ri√™ng cho th√¥ng tin c∆° b·∫£n
      const response = await userService.updateBasicInfo(formData.id, {
        fullName: formData.fullName,
        username: formData.username,
        email: formData.email,
        phone: formData.phone,
      });

      // C·∫≠p nh·∫≠t state local
      setUsers((prevUsers) =>
        prevUsers.map((u) => (u.id === formData.id ? { ...u, ...formData } : u))
      );

      notify.success(
        "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
        `ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n c·ªßa ${
          formData.fullName || formData.username
        }`
      );

      // Refresh data t·ª´ server
      await fetchUsers();

      console.log("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n th√†nh c√¥ng");
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n:", error);
      const errorMessage =
        error.response?.data?.message ||
        error.message ||
        "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n";

      notify.error("L·ªói c·∫≠p nh·∫≠t", errorMessage);
    }
  };

  /**
   * ‚úÖ Th√™m handler ri√™ng cho c·∫≠p nh·∫≠t vai tr√≤ & tr·∫°ng th√°i
   */
  const handleUpdateRole = async (formData) => {
    const user = editingUser;

    // X√°c nh·∫≠n thay ƒë·ªïi vai tr√≤
    if (formData.role !== user.role) {
      const isConfirmed = await confirmDialog.warning(
        `B·∫°n ƒëang thay ƒë·ªïi vai tr√≤ t·ª´ "${getRoleDisplayName(
          user.role
        )}" th√†nh "${getRoleDisplayName(
          formData.role
        )}". ƒêi·ªÅu n√†y c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn quy·ªÅn truy c·∫≠p c·ªßa ng∆∞·ªùi d√πng.`,
        {
          title: "üîÑ Thay ƒë·ªïi vai tr√≤",
          confirmText: "X√°c nh·∫≠n thay ƒë·ªïi",
          cancelText: "Gi·ªØ nguy√™n",
        }
      );

      if (!isConfirmed) return;
    }

    try {
      console.log("üîê ƒêang c·∫≠p nh·∫≠t vai tr√≤ & tr·∫°ng th√°i:", formData);

      // G·ªçi API ri√™ng cho vai tr√≤ & tr·∫°ng th√°i
      const response = await adminService.updateUserStatus(formData.id, {
        role: formData.role,
        isActive: formData.isActive,
      });

      // C·∫≠p nh·∫≠t state local
      setUsers((prevUsers) =>
        prevUsers.map((u) =>
          u.id === formData.id
            ? { ...u, role: formData.role, isActive: formData.isActive }
            : u
        )
      );

      notify.success(
        "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
        `ƒê√£ c·∫≠p nh·∫≠t vai tr√≤ & tr·∫°ng th√°i c·ªßa ${user.fullName || user.username}`
      );

      // Refresh data t·ª´ server
      await fetchUsers();

      console.log("‚úÖ C·∫≠p nh·∫≠t vai tr√≤ & tr·∫°ng th√°i th√†nh c√¥ng");
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t vai tr√≤ & tr·∫°ng th√°i:", error);
      const errorMessage =
        error.response?.data?.message ||
        error.message ||
        "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t vai tr√≤ & tr·∫°ng th√°i";

      notify.error("L·ªói c·∫≠p nh·∫≠t", errorMessage);
    }
  };

  // ‚úÖ C·∫≠p nh·∫≠t handleDelete
  const handleDelete = async (userId) => {
    const user = users.find((u) => u.id === userId);
    if (!user) return;

    const isConfirmed = await confirmDialog.danger(
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng "${
        user.fullName || user.username || "Kh√¥ng c√≥ t√™n"
      }"?`,
      {
        title: "X√°c nh·∫≠n x√≥a ng∆∞·ªùi d√πng",
        confirmText: "X√≥a",
        cancelText: "H·ªßy",
      }
    );

    if (isConfirmed) {
      try {
        if (user.role === "CONSULTANT") {
          console.log("ƒêang x√≥a ng∆∞·ªùi d√πng ID:", userId);
          await adminService.deleteConsultant(userId);
        }
        if (user.role === "STAFF") {
          console.log("ƒêang x√≥a nh√¢n vi√™n ID:", userId);
          await adminService.deleteUser(userId, "STAFF");
        }
        if (user.role === "CUSTOMER") {
          console.log("ƒêang x√≥a kh√°ch h√†ng ID:", userId);
          await adminService.deleteCustomer(userId);
        }
        if (user.role === "ADMIN") {
          console.log("ƒêang x√≥a qu·∫£n tr·ªã vi√™n ID:", userId);
          await adminService.deleteAdmin(userId);
        }

        // setUsers((prevUsers) => prevUsers.filter((u) => u.id !== userId));
        notify.success(
          "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng",
          `ƒê√£ x√≥a ng∆∞·ªùi d√πng "${user.fullName || user.username}" th√†nh c√¥ng!`
        );
        console.log("X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng");
      } catch (error) {
        console.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error);
        const errorMessage =
          error.response?.data?.message ||
          error.message ||
          "C√≥ l·ªói x·∫£y ra khi x√≥a ng∆∞·ªùi d√πng";
        alert(`L·ªói: ${errorMessage}`);
      }
    }
  };

  // ‚úÖ Th√™m state ƒë·ªÉ qu·∫£n l√Ω loading consultant details
  const [loadingConsultantDetails, setLoadingConsultantDetails] =
    useState(false);

  // ‚úÖ C·∫≠p nh·∫≠t Function x·ª≠ l√Ω xem th√¥ng tin chi ti·∫øt v·ªõi API call
  const handleViewUser = async (userId) => {
    try {
      setLoadingUserDetails(true);

      // T√¨m user trong state ƒë·ªÉ l·∫•y th√¥ng tin c∆° b·∫£n
      const user = users.find((u) => u.id === userId);
      if (!user) {
        notify.error("L·ªói", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
        return;
      }

      console.log("üîç User t·ª´ state:", user);

      // ‚úÖ Hi·ªÉn th·ªã modal ngay v·ªõi th√¥ng tin c∆° b·∫£n
      setSelectedUser(user);
      setOpenViewModal(true);

      // ‚úÖ N·∫øu l√† Consultant, g·ªçi API ƒë·ªÉ l·∫•y th√™m th√¥ng tin
      if (user.role === "CONSULTANT") {
        console.log("üìû ƒêang g·ªçi API getConsultantDetails cho userId:", userId);

        // G·ªçi API ƒë·ªÉ l·∫•y consultant profile
        const response = await adminService.getConsultantDetails(userId);

        console.log("üìã Raw response t·ª´ API:", response);

        // ‚úÖ Extract data t·ª´ response structure
        const consultantDetails = response.data || response;
        console.log("üìã Consultant details:", consultantDetails);

        // ‚úÖ Map response t·ª´ ConsultantProfileResponse
        const mappedUser = {
          // Th√¥ng tin c∆° b·∫£n t·ª´ user hi·ªán t·∫°i
          id: user.id,
          role: user.role,

          // Th√¥ng tin chi ti·∫øt t·ª´ API response
          profileId: consultantDetails.profileId,
          full_name:
            consultantDetails.fullName || user.fullName || user.full_name,
          username: consultantDetails.username || user.username,
          email: consultantDetails.email || user.email,
          phone: consultantDetails.phone || user.phone,
          address: consultantDetails.address || user.address,
          gender: consultantDetails.gender || user.gender,
          is_active:
            consultantDetails.active !== undefined
              ? consultantDetails.active
              : consultantDetails.isActive !== undefined
              ? consultantDetails.isActive
              : user.is_active,
          avatar: consultantDetails.avatar || user.avatar,

          // Th√¥ng tin t·ª´ state (c√≥ th·ªÉ API kh√¥ng tr·∫£ v·ªÅ)
          birth_day: user.birth_day,
          created_date: user.created_date,

          // Th√¥ng tin chuy√™n m√¥n t·ª´ API
          qualifications: consultantDetails.qualifications,
          experience: consultantDetails.experience,
          bio: consultantDetails.bio,
          updated_at: consultantDetails.updatedAt,

          // Flag ƒë·ªÉ bi·∫øt ƒë√£ load th√¥ng tin chi ti·∫øt
          _hasDetailedInfo: true,
        };

        console.log("üîÑ Mapped user data:", mappedUser);
        setSelectedUser(mappedUser);

        // notify.success("Th√†nh c√¥ng", "ƒê√£ t·∫£i th√¥ng tin chi ti·∫øt t∆∞ v·∫•n vi√™n");
      } else {
        console.log("‚ÑπÔ∏è Kh√¥ng ph·∫£i consultant, ch·ªâ hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n");
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin chi ti·∫øt:", error);
      console.error("‚ùå Error response:", error.response?.data);

      const errorMessage =
        error.response?.data?.message ||
        error.message ||
        "C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng";

      notify.error("L·ªói t·∫£i th√¥ng tin", errorMessage);

      // Fallback: gi·ªØ th√¥ng tin c∆° b·∫£n v√† ƒë√°nh d·∫•u load failed
      const user = users.find((u) => u.id === userId);
      if (user) {
        setSelectedUser({
          ...user,
          _detailsLoadFailed: true,
        });
      }
    } finally {
      setLoadingUserDetails(false);
    }
  };
  // ‚úÖ C·∫≠p nh·∫≠t handleEditSubmit
  const handleEditSubmit = async (formData) => {
    const user = editingUser;

    if (formData.role !== user.role) {
      const isConfirmed = await confirmDialog.info(
        `B·∫°n ƒëang thay ƒë·ªïi vai tr√≤ t·ª´ "${getRoleDisplayName(
          user.role
        )}" th√†nh "${getRoleDisplayName(
          formData.role
        )}". ƒêi·ªÅu n√†y c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn quy·ªÅn truy c·∫≠p c·ªßa ng∆∞·ªùi d√πng.`,
        {
          title: "üîÑ Thay ƒë·ªïi vai tr√≤",
          confirmText: "X√°c nh·∫≠n thay ƒë·ªïi",
          cancelText: "Gi·ªØ nguy√™n",
        }
      );

      if (!isConfirmed) return;
    }

    try {
      console.log("ƒêang c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:", formData);
      const updatedUser = await userService.updateUser(user.id, formData);

      setUsers((prevUsers) =>
        prevUsers.map((u) => (u.id === user.id ? { ...u, ...formData } : u))
      );

      alert(
        `ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng: ${
          formData.fullName || formData.username
        }`
      );
      setOpenEditModal(false);
      setEditingUser(null);
      console.log("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng:", updatedUser);
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error);
      const errorMessage =
        error.response?.data?.message ||
        error.message ||
        "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng";
      alert(`L·ªói: ${errorMessage}`);
    }
  };

  // ‚úÖ Th√™m state m·ªõi cho loading create user
  const [isCreatingUser, setIsCreatingUser] = useState(false);

  // ‚úÖ C·∫≠p nh·∫≠t handleModalSubmit
  const handleModalSubmit = async (formData, userType) => {
    setIsCreatingUser(true); // ‚úÖ S·ª≠ d·ª•ng state ri√™ng

    try {
      console.log("ƒêang t·∫°o ng∆∞·ªùi d√πng m·ªõi:", formData);
      console.log("Lo·∫°i ng∆∞·ªùi d√πng:", userType);

      const result = await adminService.addNewUserAccount(formData);

      if (result && result.success) {
        notify.success(
          "T·∫°o th√†nh c√¥ng!",
          `T·∫°o ${getRoleDisplayName(userType)} th√†nh c√¥ng!`
        );

        // ‚úÖ Refresh data
        await fetchUsers();

        // ƒê√≥ng modal
        setOpenModal(false);
        setModalType("");

        console.log("T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng:", result);
      }
    } catch (error) {
      console.error("L·ªói khi t·∫°o ng∆∞·ªùi d√πng:", error);
      const errorMessage =
        error.response?.data?.message ||
        error.message ||
        "C√≥ l·ªói x·∫£y ra khi t·∫°o ng∆∞·ªùi d√πng";

      notify.error("L·ªói t·∫°o ng∆∞·ªùi d√πng", errorMessage);
    } finally {
      setIsCreatingUser(false); // ‚úÖ Clear loading state
    }
  };

  // ‚úÖ C·∫≠p nh·∫≠t getModalTitle
  const getModalTitle = (userType) => {
    switch (userType) {
      case "ADMIN":
        return "Qu·∫£n tr·ªã vi√™n";
      case "STAFF":
        return "Nh√¢n vi√™n";
      case "CUSTOMER":
        return "Kh√°ch h√†ng";
      case "CONSULTANT":
        return "T∆∞ v·∫•n vi√™n";
      default:
        return "Ng∆∞·ªùi d√πng";
    }
  };

  // ‚úÖ C·∫≠p nh·∫≠t getRoleDisplayName
  const getRoleDisplayName = (role) => {
    switch (role) {
      case "ADMIN":
        return "Qu·∫£n tr·ªã vi√™n";
      case "STAFF":
        return "Nh√¢n vi√™n";
      case "CUSTOMER":
        return "Kh√°ch h√†ng";
      case "CONSULTANT":
        return "T∆∞ v·∫•n vi√™n";
      default:
        return role;
    }
  };

  const getAddButtonText = () => {
    return "Th√™m ng∆∞·ªùi d√πng m·ªõi";
  };

  const handleAddNew = () => {
    setOpenRoleSelection(true);
  };

  const handleRoleSelect = (userType) => {
    setOpenRoleSelection(false);
    setModalType(userType);
    setOpenModal(true);
  };

  // ‚úÖ C·∫≠p nh·∫≠t roleOptions
  const roleOptions = [
    {
      value: "ADMIN",
      label: "Qu·∫£n tr·ªã vi√™n",
      icon: <SecurityIcon />,
      description: "C√≥ quy·ªÅn qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng",
      color: "#E53E3E",
    },
    {
      value: "STAFF",
      label: "Nh√¢n vi√™n",
      icon: <BusinessIcon />,
      description: "Nh√¢n vi√™n h·ªó tr·ª£ kh√°ch h√†ng",
      color: "#3182CE",
    },
    {
      value: "CONSULTANT",
      label: "T∆∞ v·∫•n vi√™n",
      icon: <SupportIcon />,
      description: "Chuy√™n gia t∆∞ v·∫•n s·ª©c kh·ªèe",
      color: "#D69E2E",
    },
    {
      value: "CUSTOMER",
      label: "Kh√°ch h√†ng",
      icon: <PersonIcon />,
      description: "Ng∆∞·ªùi d√πng s·ª≠ d·ª•ng d·ªãch v·ª•",
      color: "#4A90E2",
    },
  ];

  // ‚úÖ C·∫≠p nh·∫≠t getFilteredUsers
  const getFilteredUsers = () => {
    console.log("=== FILTERING USERS ===");
    console.log("Original users count:", users.length);
    console.log("Search term:", searchTerm);
    console.log("Selected tab:", userCategories[selectedTab]?.value);
    console.log("Role filter:", roleFilter);
    console.log("Status filter:", statusFilter);

    let filtered = [...users];

    // L·ªçc theo tab
    const currentTab = userCategories[selectedTab]?.value;
    if (currentTab && currentTab !== "all") {
      filtered = filtered.filter((u) => u.role === currentTab);
      console.log("After tab filter:", filtered.length);
    }

    // L·ªçc theo role filter (ch·ªâ khi ·ªü tab "T·∫•t c·∫£")
    if (currentTab === "all" && roleFilter !== "all") {
      filtered = filtered.filter((u) => u.role === roleFilter);
      console.log("After role filter:", filtered.length);
    }

    // L·ªçc theo status filter
    if (statusFilter !== "all") {
      if (statusFilter === "Ho·∫°t ƒë·ªông") {
        filtered = filtered.filter((u) => u.isActive === true);
      } else if (statusFilter === "T·∫°m kh√≥a") {
        filtered = filtered.filter((u) => u.isActive === false);
      }
      console.log("After status filter:", filtered.length);
    }

    // L·ªçc theo search term
    if (searchTerm && searchTerm.trim() !== "") {
      const searchLower = searchTerm.toLowerCase().trim();
      filtered = filtered.filter((u) => {
        const nameMatch = (u.fullName || u.username || "")
          .toLowerCase()
          .includes(searchLower);
        const emailMatch = (u.email || "").toLowerCase().includes(searchLower);
        const phoneMatch = (u.phone || "").includes(searchTerm.trim());

        return nameMatch || emailMatch || phoneMatch;
      });
      console.log("After search filter:", filtered.length);
    }

    console.log("Final filtered users:", filtered.length);
    return filtered;
  };

  const handleSearchChange = (e) => {
    const value = e.target.value;
    console.log("Search input changed to:", value);
    setSearchTerm(value);
  };

  useEffect(() => {
    console.log("Search term changed:", searchTerm);
    console.log("Filtered users:", getFilteredUsers());
  }, [searchTerm, selectedTab, roleFilter, statusFilter]);

  const handleTabChange = (event, newValue) => {
    setSelectedTab(newValue);
    if (userCategories[newValue]?.value !== "all") {
      setRoleFilter("all");
    }
  };

  // ‚úÖ C·∫≠p nh·∫≠t getRoleColor
  const getRoleColor = (role) => {
    switch (role) {
      case "ADMIN":
        return "error";
      case "CONSULTANT":
        return "warning";
      case "STAFF":
        return "info";
      case "CUSTOMER":
        return "primary";
      default:
        return "default";
    }
  };

  const filteredUsers = getFilteredUsers();

  // ‚úÖ Hi·ªÉn th·ªã loading khi ƒëang t·∫£i
  if (loading) {
    return (
      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          minHeight: 400,
        }}
      >
        <CircularProgress size={60} sx={{ color: "#4A90E2" }} />
        <Typography variant="h6" sx={{ ml: 2, color: "#4A5568" }}>
          ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...
        </Typography>
      </Box>
    );
  }

  // ‚úÖ Hi·ªÉn th·ªã error khi c√≥ l·ªói
  if (error) {
    return (
      <Box sx={{ textAlign: "center", py: 4 }}>
        <Typography variant="h6" sx={{ color: "#E53E3E", mb: 2 }}>
          {error}
        </Typography>
        <Button
          variant="contained"
          onClick={fetchUsers}
          sx={{
            background: "linear-gradient(45deg, #4A90E2, #1ABC9C)",
            "&:hover": {
              background: "linear-gradient(45deg, #357ABD, #17A2B8)",
            },
          }}
        >
          Th·ª≠ l·∫°i
        </Button>
      </Box>
    );
  }

  return (
    <Box>
      {/* Header */}
      <Typography
        variant="h4"
        sx={{
          mb: 2,
          fontWeight: 700,
          color: "#2D3748",
          display: "flex",
          alignItems: "center",
          fontSize: { xs: "1.5rem", md: "2rem" },
        }}
      >
        <ManageAccountsIcon sx={{ mr: 2, color: "#4A90E2", fontSize: 32 }} />
        Qu·∫£n l√Ω ng∆∞·ªùi d√πng
      </Typography>
      <Typography
        variant="body1"
        sx={{
          color: "#4A5568",
          mb: 4,
          fontSize: "1rem",
        }}
      >
        Qu·∫£n l√Ω t√†i kho·∫£n v√† ph√¢n quy·ªÅn ng∆∞·ªùi d√πng trong h·ªá th·ªëng
      </Typography>

      {/* User Category Tabs */}
      <Card
        sx={{
          background: "rgba(255, 255, 255, 0.95)",
          backdropFilter: "blur(20px)",
          border: "1px solid rgba(74, 144, 226, 0.15)",
          borderRadius: 3,
          mb: 3,
        }}
      >
        <Tabs
          value={selectedTab}
          onChange={handleTabChange}
          sx={{
            px: 2,
            pt: 1,
            borderBottom: "1px solid rgba(74, 144, 226, 0.15)",
            "& .MuiTab-root": {
              minHeight: 60,
              textTransform: "none",
              fontWeight: 500,
              color: "#4A5568",
              "&.Mui-selected": {
                color: "#4A90E2",
                fontWeight: 600,
              },
            },
            "& .MuiTabs-indicator": {
              backgroundColor: "#4A90E2",
              height: 3,
            },
          }}
        >
          {userCategories.map((category, index) => (
            <Tab
              key={category.value}
              label={
                <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                  {category.icon}
                  <Box>
                    <Typography variant="body2" sx={{ fontWeight: "inherit" }}>
                      {category.label}
                    </Typography>
                    <Typography variant="caption" sx={{ color: "#718096" }}>
                      {category.count} ng∆∞·ªùi d√πng
                    </Typography>
                  </Box>
                </Box>
              }
            />
          ))}
        </Tabs>

        <Box
          sx={{
            display: "flex",
            justifyContent: "flex-start",
            alignItems: "center",
            px: 3,
            pt: 3,
            pb: 2,
          }}
        >
          <Typography variant="h6" sx={{ color: "#2D3748", fontWeight: 600 }}>
            {userCategories[selectedTab]?.label === "T·∫•t c·∫£"
              ? "Danh s√°ch ng∆∞·ªùi d√πng"
              : `Danh s√°ch ${userCategories[selectedTab]?.label}`}
          </Typography>
        </Box>

        {/* Search and Filters */}
        <CardContent sx={{ pt: 0, p: 3 }}>
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} md={6}>
              <TextField
                placeholder="T√¨m ki·∫øm theo t√™n, email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i..."
                value={searchTerm}
                onChange={handleSearchChange}
                size="small"
                fullWidth
                sx={{
                  "& .MuiOutlinedInput-root": {
                    backgroundColor: "rgba(255, 255, 255, 0.9)",
                    "&:hover .MuiOutlinedInput-notchedOutline": {
                      borderColor: "#4A90E2",
                    },
                    "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
                      borderColor: "#4A90E2",
                    },
                  },
                }}
                InputProps={{
                  startAdornment: (
                    <SearchIcon sx={{ color: "#4A5568", mr: 1 }} />
                  ),
                }}
              />
              {searchTerm && (
                <Typography
                  variant="caption"
                  sx={{
                    color: "#718096",
                    mt: 0.5,
                    display: "block",
                  }}
                >
                  ƒêang t√¨m: "{searchTerm}" - K·∫øt qu·∫£:{" "}
                  {getFilteredUsers().length} ng∆∞·ªùi d√πng
                </Typography>
              )}
            </Grid>

            {/* Role Filter */}
            {userCategories[selectedTab]?.value === "all" && (
              <Grid item xs={12} md={3}>
                <FormControl size="small" fullWidth>
                  <InputLabel>Vai tr√≤</InputLabel>
                  <Select
                    value={roleFilter}
                    label="Vai tr√≤"
                    onChange={(e) => setRoleFilter(e.target.value)}
                  >
                    <MenuItem value="all">T·∫•t c·∫£</MenuItem>
                    <MenuItem value="ADMIN">Qu·∫£n tr·ªã vi√™n</MenuItem>
                    <MenuItem value="CONSULTANT">T∆∞ v·∫•n vi√™n</MenuItem>
                    <MenuItem value="STAFF">Nh√¢n vi√™n</MenuItem>
                    <MenuItem value="CUSTOMER">Kh√°ch h√†ng</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            )}

            <Grid
              item
              xs={12}
              md={userCategories[selectedTab]?.value === "all" ? 3 : 6}
            >
              <FormControl size="small" fullWidth>
                <InputLabel>Tr·∫°ng th√°i</InputLabel>
                <Select
                  value={statusFilter}
                  label="Tr·∫°ng th√°i"
                  onChange={(e) => setStatusFilter(e.target.value)}
                >
                  <MenuItem value="all">T·∫•t c·∫£</MenuItem>
                  <MenuItem value="Ho·∫°t ƒë·ªông">Ho·∫°t ƒë·ªông</MenuItem>
                  <MenuItem value="T·∫°m kh√≥a">T·∫°m kh√≥a</MenuItem>
                </Select>
              </FormControl>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* Results Summary */}
      <Box sx={{ mb: 2 }}>
        <Typography variant="body2" sx={{ color: "#4A5568" }}>
          Hi·ªÉn th·ªã {getFilteredUsers().length} / {users.length} ng∆∞·ªùi d√πng
          {userCategories[selectedTab]?.label !== "T·∫•t c·∫£" &&
            ` trong danh m·ª•c "${userCategories[selectedTab]?.label}"`}
          {searchTerm && ` (t√¨m ki·∫øm: "${searchTerm}")`}
        </Typography>
      </Box>

      {/* Users Table */}
      <Card
        sx={{
          background: "rgba(255, 255, 255, 0.95)",
          backdropFilter: "blur(20px)",
          border: "1px solid rgba(74, 144, 226, 0.15)",
          borderRadius: 3,
        }}
      >
        <TableContainer component={Paper} sx={{ background: "transparent" }}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell sx={{ fontWeight: 600, color: "#2D3748" }}>
                  Ng∆∞·ªùi d√πng
                </TableCell>
                <TableCell sx={{ fontWeight: 600, color: "#2D3748" }}>
                  Li√™n h·ªá
                </TableCell>
                <TableCell sx={{ fontWeight: 600, color: "#2D3748" }}>
                  Vai tr√≤
                </TableCell>
                <TableCell sx={{ fontWeight: 600, color: "#2D3748" }}>
                  Tr·∫°ng th√°i
                </TableCell>
                <TableCell sx={{ fontWeight: 600, color: "#2D3748" }}>
                  Thao t√°c
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredUsers.length > 0 ? (
                filteredUsers.map((user) => (
                  <TableRow key={user.id} hover>
                    <TableCell>
                      <Box
                        sx={{ display: "flex", alignItems: "center", gap: 2 }}
                      >
                        <Avatar
                          src={user.avatar}
                          sx={{
                            width: 40,
                            height: 40,
                            background:
                              "linear-gradient(45deg, #4A90E2, #1ABC9C)",
                          }}
                        >
                          {user.fullName?.charAt(0) ||
                            user.username?.charAt(0) ||
                            "?"}
                        </Avatar>
                        <Box>
                          <Typography
                            variant="body2"
                            sx={{ fontWeight: 500, color: "#2D3748" }}
                          >
                            {user.fullName || user.username || "Kh√¥ng c√≥ t√™n"}
                          </Typography>
                          <Typography
                            variant="caption"
                            sx={{ color: "#718096" }}
                          >
                            ID: {user.id}
                          </Typography>
                        </Box>
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Box>
                        <Typography variant="body2" sx={{ color: "#2D3748" }}>
                          {user.email}
                        </Typography>
                        <Typography variant="caption" sx={{ color: "#718096" }}>
                          {user.phone || "Ch∆∞a c·∫≠p nh·∫≠t"}
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Chip
                        label={getRoleDisplayName(user.role)}
                        color={getRoleColor(user.role)}
                        size="small"
                        variant="outlined"
                      />
                    </TableCell>
                    <TableCell>
                      <Chip
                        label={user.isActive ? "Ho·∫°t ƒë·ªông" : "T·∫°m kh√≥a"}
                        color={user.isActive ? "success" : "default"}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Box sx={{ display: "flex", gap: 1 }}>
                        <IconButton
                          size="small"
                          onClick={() => handleViewUser(user.id)}
                          disabled={loadingUserDetails}
                          sx={{
                            color: "#48BB78",
                            backgroundColor: "rgba(72, 187, 120, 0.1)",
                            "&:hover": {
                              backgroundColor: "rgba(72, 187, 120, 0.2)",
                              transform: "scale(1.1)",
                            },
                            "&:disabled": {
                              opacity: 0.6,
                              transform: "none",
                            },
                            transition: "all 0.2s ease",
                          }}
                        >
                          {loadingUserDetails ? (
                            <CircularProgress
                              size={16}
                              sx={{ color: "#48BB78" }}
                            />
                          ) : (
                            <VisibilityIcon sx={{ fontSize: 16 }} />
                          )}
                        </IconButton>

                        <IconButton
                          size="small"
                          onClick={() => handleEdit(user.id)}
                          sx={{
                            color: "#4A90E2",
                            backgroundColor: "rgba(74, 144, 226, 0.1)",
                            "&:hover": {
                              backgroundColor: "rgba(74, 144, 226, 0.2)",
                              transform: "scale(1.1)",
                            },
                            transition: "all 0.2s ease",
                          }}
                        >
                          <EditIcon sx={{ fontSize: 16 }} />
                        </IconButton>
                        {/* delete button */}
                        <IconButton
                          size="small"
                          onClick={() => handleDelete(user.id)}
                          sx={{
                            color: "#E53E3E",
                            backgroundColor: "rgba(229, 62, 62, 0.1)",
                            "&:hover": {
                              backgroundColor: "rgba(229, 62, 62, 0.2)",
                              transform: "scale(1.1)",
                            },
                            transition: "all 0.2s ease",
                          }}
                        >
                          <DeleteIcon sx={{ fontSize: 16 }} />
                        </IconButton>
                      </Box>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={5} align="center" sx={{ py: 4 }}>
                    <Typography variant="body2" sx={{ color: "#718096" }}>
                      Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o ph√π h·ª£p
                    </Typography>
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </Card>

      {/* Add User Button */}
      <Box sx={{ display: "flex", justifyContent: "flex-end", mt: 3 }}>
        <Button
          variant="contained"
          onClick={handleAddNew}
          startIcon={<AddIcon />}
          sx={{
            background: "linear-gradient(45deg, #4A90E2, #1ABC9C)",
            borderRadius: 2,
            px: 4,
            py: 1.5,
            fontSize: "1rem",
            fontWeight: 600,
            boxShadow: "0 4px 12px rgba(74, 144, 226, 0.3)",
            "&:hover": {
              background: "linear-gradient(45deg, #357ABD, #17A2B8)",
              transform: "translateY(-2px)",
              boxShadow: "0 6px 20px rgba(74, 144, 226, 0.4)",
            },
            transition: "all 0.3s ease",
          }}
        >
          {getAddButtonText()}
        </Button>
      </Box>

      {/* Role Selection Dialog */}
      <Dialog
        open={openRoleSelection}
        onClose={() => setOpenRoleSelection(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: "rgba(255, 255, 255, 0.95)",
            backdropFilter: "blur(20px)",
          },
        }}
      >
        <DialogTitle
          sx={{
            textAlign: "center",
            pb: 1,
            background: "linear-gradient(45deg, #4A90E2, #1ABC9C)",
            backgroundClip: "text",
            WebkitBackgroundClip: "text",
            color: "transparent",
            fontWeight: 700,
          }}
        >
          Ch·ªçn lo·∫°i ng∆∞·ªùi d√πng c·∫ßn th√™m
        </DialogTitle>
        <DialogContent sx={{ p: 0 }}>
          <List sx={{ py: 2 }}>
            {roleOptions.map((role) => (
              <ListItem key={role.value} sx={{ px: 3 }}>
                <ListItemButton
                  onClick={() => handleRoleSelect(role.value)}
                  sx={{
                    borderRadius: 2,
                    mb: 1,
                    border: "1px solid rgba(74, 144, 226, 0.15)",
                    "&:hover": {
                      backgroundColor: "rgba(74, 144, 226, 0.05)",
                      borderColor: role.color,
                    },
                    transition: "all 0.2s ease",
                  }}
                >
                  <ListItemIcon sx={{ color: role.color }}>
                    {role.icon}
                  </ListItemIcon>
                  <ListItemText
                    primary={
                      <Typography
                        variant="body1"
                        sx={{ fontWeight: 600, color: "#2D3748" }}
                      >
                        {role.label}
                      </Typography>
                    }
                    secondary={
                      <Typography variant="body2" sx={{ color: "#718096" }}>
                        {role.description}
                      </Typography>
                    }
                  />
                </ListItemButton>
              </ListItem>
            ))}
          </List>
        </DialogContent>
        <DialogActions sx={{ p: 3, pt: 0 }}>
          <Button
            onClick={() => setOpenRoleSelection(false)}
            sx={{ color: "#718096" }}
          >
            H·ªßy
          </Button>
        </DialogActions>
      </Dialog>

      {/* Modals */}
      <AddUserModal
        open={openModal}
        onClose={() => setOpenModal(false)}
        userType={modalType}
        onSubmit={handleModalSubmit}
      />

      <ViewUserModal
        open={openViewModal}
        onClose={() => setOpenViewModal(false)}
        user={selectedUser}
        loadingConsultantDetails={loadingUserDetails}
      />

      <EditUserModal
        open={openEditModal}
        onClose={() => {
          setOpenEditModal(false);
          setEditingUser(null);
        }}
        user={editingUser}
        onSubmitBasicInfo={handleUpdateBasicInfo} // ‚úÖ API cho th√¥ng tin c∆° b·∫£n
        onSubmitRole={handleUpdateRole} // ‚úÖ API cho vai tr√≤ & tr·∫°ng th√°i
      />
    </Box>
  );
};

export default UserManagementContent;
