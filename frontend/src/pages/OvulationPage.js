import { Container, Box, Typography, Card } from '@mui/material';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { vi } from 'date-fns/locale';
import ovulationService from '../services/ovulationService';
import FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';
import React, { useState } from 'react';
import { useEffect } from 'react';
import { CheckCircle } from '@mui/icons-material';
import 'chart.js/auto';
import { List, ListItem } from '@mui/material';
import styles from '../styles/OvulationPage.module.css';
import { confirmDialog } from '@/utils/confirmDialog';
import {
  Heart,
  Calendar,
  TrendingUp,
  Brain,
  Stethoscope,
  ChevronDown,
  ChevronUp,
  Clock,
  Shield,
  AlertTriangle,
  AlertCircle,
  Activity,
  Zap,
  Lightbulb,
  Edit,
  Trash2,
  Eye,
} from 'lucide-react';
import MenstrualCycleForm from '../components/MenstrualCycle/MenstrualCycleForm.js';
import MenstrualCycleCalendar from '../components/MenstrualCycleCalendar';
import { notify } from '../utils/notify';

// const defaultStats = {
//   averageCycleLength: 28,
//   totalCycles: 10,
//   averagePeriodLength: 5,
//   nextPredictedPeriod: '2025-07-01',
//   consistency: 'irregular',
// };

const OvulationPage = ({ stats }) => {
  const [isLoggedIn, setIsLoggedIn] = React.useState(false);
  const [isCheckingAuth, setIsCheckingAuth] = React.useState(true);

  // T·∫•t c·∫£ chu k·ª≥ kinh nguy·ªát
  const [menstrualCycles, setMenstrualCycles] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // H√†m fetch d·ªØ li·ªáu chu k·ª≥ kinh nguy·ªát
  const fetchMenstrualCycles = async (showRefreshLoader = false) => {
    try {
      if (showRefreshLoader) {
        setIsRefetching(true);
      } else {
        setIsLoading(true);
      }

      const response = await ovulationService.getAllMenstrualCycles();

      console.log('üîç Raw response t·ª´ API:', response);

      // Ki·ªÉm tra nhi·ªÅu tr∆∞·ªùng h·ª£p c√≥ th·ªÉ x·∫£y ra
      let data = response;

      // N·∫øu response c√≥ property data
      if (response && response.data) {
        data = response.data;
      }

      // N·∫øu response c√≥ property result ho·∫∑c items
      if (response && response.result) {
        data = response.result;
      }

      if (response && response.items) {
        data = response.items;
      }

      console.log('üîç Data sau khi extract:', data);

      // Ki·ªÉm tra data c√≥ ph·∫£i l√† m·∫£ng kh√¥ng
      if (Array.isArray(data)) {
        // Convert date arrays to Date objects
        const processedData = data.map((cycle) => ({
          ...cycle,
          startDate: new Date(
            cycle.startDate[0],
            cycle.startDate[1] - 1,
            cycle.startDate[2]
          ),
          ovulationDate: new Date(
            cycle.ovulationDate[0],
            cycle.ovulationDate[1] - 1,
            cycle.ovulationDate[2]
          ),
        }));

        setMenstrualCycles(processedData);
        console.log('ü©∏ Data ƒë√£ x·ª≠ l√Ω:', processedData);
        return processedData;
      } else {
        console.warn('‚ùå Data kh√¥ng ph·∫£i l√† m·∫£ng:', data);
        console.warn('‚ùå Type c·ªßa data:', typeof data);
        setMenstrualCycles([]);
        return [];
      }
    } catch (err) {
      console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu chu k·ª≥:', err);
      setMenstrualCycles([]);
      return [];
    } finally {
      setIsLoading(false);
      setIsRefetching(false);
    }
  };

  // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p khi component mount
  useEffect(() => {
    const checkAuthStatus = async () => {
      try {
        setIsCheckingAuth(true);
        const loggedIn = await ovulationService.isLoggedIn();
        setIsLoggedIn(loggedIn);

        if (loggedIn) {
          await fetchMenstrualCycles();
        }
      } catch (error) {
        console.error('‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p:', error);
        setIsLoggedIn(false);
      } finally {
        setIsCheckingAuth(false);
      }
    };

    checkAuthStatus();

    // Th√™m event listener ƒë·ªÉ refresh khi focus l·∫°i trang
    const handleFocus = () => {
      if (!isCheckingAuth) {
        refreshAuthStatus();
      }
    };

    window.addEventListener('focus', handleFocus);

    // Th√™m interval ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p ƒë·ªãnh k·ª≥ (m·ªói 30 gi√¢y)
    const authCheckInterval = setInterval(() => {
      if (!isCheckingAuth && !isLoggedIn) {
        refreshAuthStatus();
      }
    }, 30000); // 30 gi√¢y

    return () => {
      window.removeEventListener('focus', handleFocus);
      clearInterval(authCheckInterval);
    };
  }, []);

  // ƒê·ªô d√†i chu k·ª≥ trung b√¨nh
  const getAverageCycleLength = (menstrualCycles) => {
    if (!Array.isArray(menstrualCycles) || menstrualCycles.length === 0)
      return null;

    try {
      const total = menstrualCycles.reduce(
        (sum, cycle) => sum + (cycle.cycleLength || 0),
        0
      );
      const average = total / menstrualCycles.length;
      return Math.round(average);
    } catch (error) {
      console.error('L·ªói khi t√≠nh average cycle length:', error);
      return null;
    }
  };

  const averageLengthCycles = getAverageCycleLength(menstrualCycles);

  // ƒê·ªô d√†i k·ª≥ kinh trung b√¨nh
  const getAveragePeriodLength = (menstrualCycles) => {
    if (!Array.isArray(menstrualCycles) || menstrualCycles.length === 0)
      return null;

    try {
      const total = menstrualCycles.reduce(
        (sum, cycle) => sum + (cycle.numberOfDays || 0),
        0
      );
      const average = total / menstrualCycles.length;
      return Math.round(average);
    } catch (error) {
      console.error('L·ªói khi t√≠nh average period length:', error);
      return null;
    }
  };

  const averagePeriodLength = getAveragePeriodLength(menstrualCycles);

  // Chu k·ª≥ kinh nguy·ªát ti·∫øp theo
  const getNextCycle = (menstrualCycles) => {
    if (!Array.isArray(menstrualCycles) || menstrualCycles.length === 0)
      return null;

    try {
      const lastCycle = menstrualCycles[0];
      const cycleLength = lastCycle.cycleLength;

      let nextCycleStart = new Date(lastCycle.startDate);
      const today = new Date();

      // L·∫∑p cho ƒë·∫øn khi nextCycleStart v∆∞·ª£t qua h√¥m nay
      while (nextCycleStart <= today) {
        nextCycleStart.setDate(nextCycleStart.getDate() + cycleLength);
      }

      return nextCycleStart;
    } catch (error) {
      console.error('L·ªói khi t√≠nh to√°n chu k·ª≥ ti·∫øp theo:', error);
      return null;
    }
  };

  const nextCycle = getNextCycle(menstrualCycles);

  const getAverageCycleLengthOfCurrentCycles = (menstrualCycles) => {
    if (!Array.isArray(menstrualCycles) || menstrualCycles.length === 0)
      return null;

    try {
      // L·∫•y 3 chu k·ª≥ g·∫ßn nh·∫•t ƒë·ªÉ ƒë√°nh gi√°
      const recentCycles = menstrualCycles.slice(0, 3);
      const total = recentCycles.reduce(
        (sum, cycle) => sum + (cycle.cycleLength || 0),
        0
      );
      const average = total / recentCycles.length;
      return Math.round(average);
    } catch (error) {
      console.error('L·ªói khi t√≠nh average cycle length:', error);
      return null;
    }
  };

  const averageCycleLengthOfCurrentCycles =
    getAverageCycleLengthOfCurrentCycles(menstrualCycles);

  const getConsistency = (menstrualCycles) => {
    console.log('üîç [getConsistency] Input data:', menstrualCycles);

    if (!Array.isArray(menstrualCycles) || menstrualCycles.length === 0) {
      console.log(
        '‚ùå [getConsistency] Kh√¥ng ƒë·ªß d·ªØ li·ªáu. Hi·ªán c√≥:',
        menstrualCycles?.length || 0
      );
      return 'unknown';
    }

    try {
      // L·∫•y 3 chu k·ª≥ g·∫ßn nh·∫•t ƒë·ªÉ ƒë√°nh gi√°
      const recentCycles = menstrualCycles.slice(0, 3);
      console.log('üìä [getConsistency] 3 chu k·ª≥ g·∫ßn nh·∫•t:', recentCycles);

      // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu
      for (const cycle of recentCycles) {
        console.log('üîç [getConsistency] Ki·ªÉm tra chu k·ª≥:', {
          numberOfDays: cycle.numberOfDays,
          cycleLength: cycle.cycleLength,
          startDate: cycle.startDate,
        });

        // Ki·ªÉm tra s·ªë ng√†y kinh nguy·ªát (2-8 ng√†y l√† b√¨nh th∆∞·ªùng)
        if (
          !cycle.numberOfDays ||
          cycle.numberOfDays < 2 ||
          cycle.numberOfDays > 8
        ) {
          console.log(
            '‚ùå [getConsistency] Chu k·ª≥ kh√¥ng ƒë·ªÅu - s·ªë ng√†y kinh kh√¥ng h·ª£p l·ªá:',
            cycle.numberOfDays
          );
          return 'irregular';
        } else if (
          // Ki·ªÉm tra ƒë·ªô d√†i chu k·ª≥ (24-38 ng√†y l√† b√¨nh th∆∞·ªùng)
          !cycle.cycleLength ||
          cycle.cycleLength < 24 ||
          cycle.cycleLength > 38
        ) {
          console.log(
            '‚ùå [getConsistency] Chu k·ª≥ kh√¥ng b√¨nh th∆∞·ªùng - ƒë·ªô d√†i chu k·ª≥ kh√¥ng h·ª£p l·ªá:',
            cycle.cycleLength
          );
          return 'irregular';
        }

        // Ki·ªÉm tra ƒë·ªô d√†i chu k·ª≥ c√≥ t·ªìn t·∫°i
        if (!cycle.cycleLength) {
          console.log(
            '‚ùå [getConsistency] D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß - thi·∫øu cycleLength:',
            cycle.cycleLength
          );
          return 'regular';
        }
      }

      // Ki·ªÉm tra s·ª± ƒë·ªìng ƒë·ªÅu c·ªßa ƒë·ªô d√†i chu k·ª≥
      const cycleLengths = recentCycles.map((cycle) => cycle.cycleLength);
      console.log('üìè [getConsistency] ƒê·ªô d√†i c√°c chu k·ª≥:', cycleLengths);

      let maxDifference = 0;

      for (let i = 0; i < cycleLengths.length - 1; i++) {
        const difference = Math.abs(cycleLengths[i] - cycleLengths[i + 1]);
        console.log(
          `üî¢ [getConsistency] So s√°nh chu k·ª≥ ${i} v√† ${i + 1}: ${cycleLengths[i]} vs ${cycleLengths[i + 1]} = ch√™nh l·ªách ${difference} ng√†y`
        );
        if (difference > maxDifference) {
          maxDifference = difference;
        }
      }

      console.log(
        'üìà [getConsistency] Ch√™nh l·ªách t·ªëi ƒëa:',
        maxDifference,
        'ng√†y'
      );

      // N·∫øu ch√™nh l·ªách t·ªëi ƒëa > 7 ng√†y th√¨ ƒë∆∞·ª£c coi l√† kh√¥ng b√¨nh th∆∞·ªùng
      const result = maxDifference <= 7 ? 'regular' : 'irregular';
      console.log('‚úÖ [getConsistency] K·∫øt qu·∫£ cu·ªëi c√πng:', result);

      return result;
    } catch (error) {
      console.error('üí• [getConsistency] L·ªói khi t√≠nh consistency:', error);
      return 'regular';
    }
  };

  const consistency = getConsistency(menstrualCycles);
  console.log('üéØ [Main] K·∫øt qu·∫£ consistency ƒë√£ t√≠nh:', consistency);

  // H√†m ph√¢n t√≠ch l√Ω do chu k·ª≥ kh√¥ng b√¨nh th∆∞·ªùng
  const getIrregularReasons = (menstrualCycles) => {
    const reasons = [];
    
    if (!Array.isArray(menstrualCycles) || menstrualCycles.length === 0) {
      return ['Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch'];
    }

    try {
      // L·∫•y 3 chu k·ª≥ g·∫ßn nh·∫•t ƒë·ªÉ ƒë√°nh gi√°
      const recentCycles = menstrualCycles.slice(0, Math.min(3, menstrualCycles.length));
      
      // Ph√¢n t√≠ch s·ªë ng√†y kinh nguy·ªát
      const periodLengths = recentCycles.map(cycle => cycle.numberOfDays).filter(days => days);
      if (periodLengths.length > 0) {
        const minPeriod = Math.min(...periodLengths);
        const maxPeriod = Math.max(...periodLengths);
        
        if (minPeriod < 3) {
          reasons.push(`K·ª≥ kinh qu√° ng·∫Øn (${minPeriod} ng√†y) - c√≥ th·ªÉ do stress, r·ªëi lo·∫°n hormone, ho·∫∑c m·∫•t c√¢n n·∫∑ng ƒë·ªôt ng·ªôt`);
        }
        if (maxPeriod > 7) {
          reasons.push(`K·ª≥ kinh k√©o d√†i (${maxPeriod} ng√†y) - c√≥ th·ªÉ do u x∆° t·ª≠ cung, polyp n·ªôi m·∫°c t·ª≠ cung, ho·∫∑c r·ªëi lo·∫°n ƒë√¥ng m√°u`);
        }
        if (maxPeriod - minPeriod > 3) {
          reasons.push(`ƒê·ªô d√†i k·ª≥ kinh kh√¥ng ·ªïn ƒë·ªãnh (t·ª´ ${minPeriod} ƒë·∫øn ${maxPeriod} ng√†y) - c√≥ th·ªÉ do stress ho·∫∑c thay ƒë·ªïi hormone`);
        }
      }

      // Ph√¢n t√≠ch ƒë·ªô d√†i chu k·ª≥
      const cycleLengths = recentCycles.map(cycle => cycle.cycleLength).filter(length => length);
      if (cycleLengths.length > 0) {
        const minCycle = Math.min(...cycleLengths);
        const maxCycle = Math.max(...cycleLengths);
        
        if (minCycle < 21) {
          reasons.push(`Chu k·ª≥ qu√° ng·∫Øn (${minCycle} ng√†y) - c√≥ th·ªÉ do stress, t·∫≠p th·ªÉ d·ª•c qu√° m·ª©c, thi·∫øu h·ª•t dinh d∆∞·ª°ng, ho·∫∑c c·∫≠n m√£n kinh`);
        }
        if (maxCycle > 35) {
          reasons.push(`Chu k·ª≥ qu√° d√†i (${maxCycle} ng√†y) - c√≥ th·ªÉ do h·ªôi ch·ª©ng bu·ªìng tr·ª©ng ƒëa nang (PCOS), r·ªëi lo·∫°n tuy·∫øn gi√°p, ho·∫∑c stress`);
        }
        
        // Ki·ªÉm tra s·ª± bi·∫øn thi√™n c·ªßa chu k·ª≥
        if (cycleLengths.length >= 2) {
          let maxDifference = 0;
          for (let i = 0; i < cycleLengths.length - 1; i++) {
            const difference = Math.abs(cycleLengths[i] - cycleLengths[i + 1]);
            if (difference > maxDifference) {
              maxDifference = difference;
            }
          }
          
          if (maxDifference > 7) {
            reasons.push(`Chu k·ª≥ bi·∫øn thi√™n l·ªõn (ch√™nh l·ªách ${maxDifference} ng√†y) - c√≥ th·ªÉ do stress, thay ƒë·ªïi c√¢n n·∫∑ng, r·ªëi lo·∫°n gi·∫•c ng·ªß, ho·∫∑c thay ƒë·ªïi l·ªëi s·ªëng`);
          }
        }
        
        // Ph√¢n t√≠ch xu h∆∞·ªõng
        if (cycleLengths.length >= 3) {
          const isIncreasing = cycleLengths[0] > cycleLengths[1] && cycleLengths[1] > cycleLengths[2];
          const isDecreasing = cycleLengths[0] < cycleLengths[1] && cycleLengths[1] < cycleLengths[2];
          
          if (isIncreasing) {
            reasons.push('Chu k·ª≥ c√≥ xu h∆∞·ªõng ng√†y c√†ng d√†i - c√≥ th·ªÉ c·∫ßn ki·ªÉm tra hormone ho·∫∑c t√¨nh tr·∫°ng stress');
          } else if (isDecreasing) {
            reasons.push('Chu k·ª≥ c√≥ xu h∆∞·ªõng ng√†y c√†ng ng·∫Øn - c√≥ th·ªÉ do stress, gi·∫£m c√¢n, ho·∫∑c t·∫≠p th·ªÉ d·ª•c qu√° m·ª©c');
          }
        }
      }

      // ƒê√°nh gi√° t·ªïng th·ªÉ
      if (recentCycles.length < 3) {
        reasons.push('D·ªØ li·ªáu c√≤n √≠t - khuy·∫øn ngh·ªã theo d√µi th√™m ƒë·ªÉ c√≥ ƒë√°nh gi√° ch√≠nh x√°c h∆°n');
      }

      // N·∫øu kh√¥ng t√¨m th·∫•y v·∫•n ƒë·ªÅ c·ª• th·ªÉ nh∆∞ng ƒë∆∞·ª£c ƒë√°nh gi√° l√† irregular
      if (reasons.length === 0 && consistency === 'irregular') {
        reasons.push('Chu k·ª≥ c√≥ d·∫•u hi·ªáu kh√¥ng ƒë·ªÅu ƒë·∫∑n nh·∫π - c√≥ th·ªÉ do c√°c y·∫øu t·ªë l·ªëi s·ªëng ho·∫∑c stress t·∫°m th·ªùi');
      }

      // N·∫øu ho√†n to√†n kh√¥ng c√≥ v·∫•n ƒë·ªÅ
      if (reasons.length === 0) {
        return ['Chu k·ª≥ t∆∞∆°ng ƒë·ªëi b√¨nh th∆∞·ªùng d·ª±a tr√™n d·ªØ li·ªáu hi·ªán t·∫°i'];
      }

      return reasons;
    } catch (error) {
      console.error('L·ªói khi ph√¢n t√≠ch l√Ω do chu k·ª≥ kh√¥ng b√¨nh th∆∞·ªùng:', error);
      return ['Kh√¥ng th·ªÉ ph√¢n t√≠ch do l·ªói d·ªØ li·ªáu - vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin chu k·ª≥'];
    }
  };

  const irregularReasons = getIrregularReasons(menstrualCycles);

  const [expandedSection, setExpandedSection] = useState(null);
  const [showForm, setShowForm] = useState(false);
  const [calculationResult, setCalculationResult] = useState(null);
  const [isRefetching, setIsRefetching] = useState(false);

  // Pagination states
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  // H√†m refresh tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
  const refreshAuthStatus = async () => {
    try {
      setIsCheckingAuth(true);
      const loggedIn = await ovulationService.isLoggedIn();

      // N·∫øu tr∆∞·ªõc ƒë√≥ ch∆∞a ƒëƒÉng nh·∫≠p nh∆∞ng b√¢y gi·ªù ƒë√£ ƒëƒÉng nh·∫≠p
      if (!isLoggedIn && loggedIn) {
        notify.success(
          'Ch√†o m·ª´ng!',
          'ƒêƒÉng nh·∫≠p th√†nh c√¥ng. ƒêang t·∫£i d·ªØ li·ªáu c·ªßa b·∫°n...'
        );
      }

      // N·∫øu tr∆∞·ªõc ƒë√≥ ƒë√£ ƒëƒÉng nh·∫≠p nh∆∞ng b√¢y gi·ªù ƒë√£ ƒëƒÉng xu·∫•t
      if (isLoggedIn && !loggedIn) {
        notify.info('ƒê√£ ƒëƒÉng xu·∫•t', 'B·∫°n ƒë√£ ƒëƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng.');
        setMenstrualCycles([]);
        setCalculationResult(null);
        setShowForm(false);
        setShowEditForm(false);
        setEditingCycle(null);
      }

      setIsLoggedIn(loggedIn);

      if (loggedIn) {
        await fetchMenstrualCycles();
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi refresh tr·∫°ng th√°i ƒëƒÉng nh·∫≠p:', error);
      setIsLoggedIn(false);
    } finally {
      setIsCheckingAuth(false);
    }
  };

  // Edit cycle states
  const [editingCycle, setEditingCycle] = useState(null);
  const [showEditForm, setShowEditForm] = useState(false);
  
  // View cycle detail states
  const [selectedCycleForDetail, setSelectedCycleForDetail] = useState(null);
  const [showCycleDetail, setShowCycleDetail] = useState(false);
  
  // Calendar modal states
  const [selectedCycleForCalendar, setSelectedCycleForCalendar] = useState(null);
  const [showCalendarModal, setShowCalendarModal] = useState(false);

  const toggleSection = (section) => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  const benefits = [
    {
      icon: <Heart className="h-6 w-6 text-pink-600" />,
      title: 'Hi·ªÉu r√µ c∆° th·ªÉ',
      description: 'Bi·∫øt ƒë∆∞·ª£c chu k·ª≥ kinh nguy·ªát c√≥ ƒë·ªÅu kh√¥ng',
      details: ['Theo d√µi tri·ªáu ch·ª©ng nh∆∞ ƒëau b·ª•ng, n·ªïi m·ª•n, m·ªát m·ªèi‚Ä¶'],
    },
    {
      icon: <Calendar className="h-6 w-6 text-purple-600" />,
      title: 'L·∫≠p k·∫ø ho·∫°ch t·ªët h∆°n',
      description: 'D·ªÖ d√†ng s·∫Øp x·∫øp c√¥ng vi·ªác, du l·ªãch, v·∫≠n ƒë·ªông th·ªÉ thao',
      details: ['Tr√°nh r∆°i v√†o t√¨nh hu·ªëng b·∫•t ng·ªù do kinh ƒë·∫øn ƒë·ªôt ng·ªôt'],
    },
    {
      icon: <TrendingUp className="h-6 w-6 text-indigo-600" />,
      title: 'C·∫£i thi·ªán s·ª©c kh·ªèe sinh s·∫£n',
      description:
        'D·ª± ƒëo√°n th·ªùi ƒëi·ªÉm r·ª•ng tr·ª©ng (h·ªØu √≠ch khi tr√°nh thai ho·∫∑c mong mu·ªën c√≥ con)',
      details: ['Ph√°t hi·ªán s·ªõm d·∫•u hi·ªáu r·ªëi lo·∫°n n·ªôi ti·∫øt'],
    },
    {
      icon: <Brain className="h-6 w-6 text-green-600" />,
      title: 'TƒÉng c∆∞·ªùng s·ª©c kh·ªèe tinh th·∫ßn',
      description: 'Nh·∫≠n bi·∫øt m·ªëi li√™n h·ªá gi·ªØa t√¢m tr·∫°ng v√† chu k·ª≥',
      details: [
        'Ch·ªß ƒë·ªông chƒÉm s√≥c b·∫£n th√¢n ƒë√∫ng th·ªùi ƒëi·ªÉm (ngh·ªâ ng∆°i, gi·∫£m stress)',
      ],
    },
    {
      icon: <Stethoscope className="h-6 w-6 text-blue-600" />,
      title: 'H·ªó tr·ª£ b√°c sƒ© khi c·∫ßn',
      description: 'Ghi ch√©p ƒë·∫ßy ƒë·ªß gi√∫p b√°c sƒ© d·ªÖ ch·∫©n ƒëo√°n n·∫øu c√≥ b·∫•t th∆∞·ªùng',
      details: ['Ti·∫øt ki·ªám th·ªùi gian v√† ƒëi·ªÅu tr·ªã hi·ªáu qu·∫£ h∆°n'],
    },
  ];

  const carePhases = [
    {
      phase: 'Tr∆∞·ªõc k·ª≥ kinh',
      icon: <Clock className="h-5 w-5 text-orange-600" />,
      tips: [
        'ƒÇn u·ªëng l√†nh m·∫°nh, tr√°nh ƒë∆∞·ªùng & caffeine',
        'V·∫≠n ƒë·ªông nh·∫π nh√†ng, ng·ªß ƒë·ªß gi·∫•c',
      ],
      color: 'orange',
    },
    {
      phase: 'Trong k·ª≥ kinh',
      icon: <Shield className="h-5 w-5 text-red-600" />,
      tips: [
        'Thay bƒÉng v·ªá sinh 4‚Äì6 ti·∫øng/l·∫ßn',
        'ƒÇn th·ª±c ph·∫©m gi√†u s·∫Øt (rau xanh, th·ªãt ƒë·ªè)',
        'D√πng t√∫i ch∆∞·ªùm ·∫•m ho·∫∑c thu·ªëc gi·∫£m ƒëau n·∫øu c·∫ßn',
      ],
      color: 'red',
    },
    {
      phase: 'Sau k·ª≥ kinh',
      icon: <CheckCircle className="h-5 w-5 text-green-600" />,
      tips: [
        'T·∫≠p th·ªÉ d·ª•c nh·∫π, b·ªï sung dinh d∆∞·ª°ng',
        'Theo d√µi v√† ghi nh·∫≠n b·∫•t th∆∞·ªùng',
      ],
      color: 'green',
    },
  ];

  const warningSignals = [
    'Kinh qu√° nhi·ªÅu, k√©o d√†i >7 ng√†y',
    'ƒêau b·ª•ng d·ªØ d·ªôi, tr·ªÖ kinh th∆∞·ªùng xuy√™n',
    'Kh√≠ h∆∞ c√≥ m√πi l·∫° ho·∫∑c m√†u b·∫•t th∆∞·ªùng',
  ];

  const getConsistencyClass = (consistency) => {
    switch (consistency) {
      case 'regular':
        return styles.regular;
      case 'irregular':
        return styles.irregular;
      case 'unknown':
        return styles.unknown;
      default:
        return styles.unknown;
    }
  };

  const getConsistencyText = (consistency) => {
    switch (consistency) {
      case 'regular':
        return 'B√¨nh th∆∞·ªùng';
      case 'irregular':
        return 'Kh√¥ng b√¨nh th∆∞·ªùng';
      case 'unknown':
        return 'Ch∆∞a c√≥ th√¥ng tin';
      default:
        return 'Ch∆∞a c√≥ th√¥ng tin';
    }
  };

  const formatDate = (dateInput) => {
    // Ki·ªÉm tra null/undefined tr∆∞·ªõc
    if (!dateInput) {
      return 'Kh√¥ng c√≥ d·ªØ li·ªáu';
    }

    let date;

    try {
      if (Array.isArray(dateInput)) {
        // Convert from [year, month, day] format
        date = new Date(dateInput[0], dateInput[1] - 1, dateInput[2]);
      } else if (typeof dateInput === 'string') {
        date = new Date(dateInput);
      } else if (dateInput instanceof Date) {
        date = dateInput;
      } else {
        // N·∫øu kh√¥ng ph·∫£i c√°c ki·ªÉu tr√™n, th·ª≠ convert
        date = new Date(dateInput);
      }

      // Ki·ªÉm tra date c√≥ h·ª£p l·ªá kh√¥ng
      if (isNaN(date.getTime())) {
        return 'Ng√†y kh√¥ng h·ª£p l·ªá';
      }

      return date.toLocaleDateString('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
      });
    } catch (error) {
      console.error('L·ªói format date:', error, 'Input:', dateInput);
      return 'L·ªói ƒë·ªãnh d·∫°ng ng√†y';
    }
  };

  const dashboardCards = [
    {
      icon: <Calendar className={`${styles.icon} ${styles.pink}`} />,
      iconWrapper: `${styles.iconWrapper} ${styles.pink}`,
      label: 'Chu k·ª≥ trung b√¨nh',
      mainValue: averageLengthCycles
        ? `${averageLengthCycles} ng√†y`
        : 'Kh√¥ng c√≥ d·ªØ li·ªáu',
      subValue: menstrualCycles.length
        ? `${menstrualCycles.length} chu k·ª≥ ƒë√£ ghi nh·∫≠n`
        : '0 chu k·ª≥ ƒë√£ ghi nh·∫≠n',
      id: 'average-cycle',
    },
    {
      icon: <Clock className={`${styles.icon} ${styles.purple}`} />,
      iconWrapper: `${styles.iconWrapper} ${styles.purple}`,
      label: 'K·ª≥ kinh trung b√¨nh',
      mainValue: averagePeriodLength
        ? `${averagePeriodLength} ng√†y`
        : 'Kh√¥ng c√≥ d·ªØ li·ªáu',
      subValue: 'ƒê·ªô d√†i k·ª≥ kinh',
      id: 'average-period',
    },
    {
      icon: <TrendingUp className={`${styles.icon} ${styles.indigo}`} />,
      iconWrapper: `${styles.iconWrapper} ${styles.indigo}`,
      label: 'D·ª± ƒëo√°n k·ª≥ t·ªõi',
      mainValue: nextCycle ? formatDate(nextCycle) : 'Kh√¥ng c√≥ d·ªØ li·ªáu',
      subValue: 'Ng√†y d·ª± ki·∫øn',
      id: 'next-prediction',
      isSpecial: true,
    },
    {
      icon: <AlertCircle className={`${styles.icon} ${styles.green}`} />,
      iconWrapper: `${styles.iconWrapper} ${styles.green}`,
      label: 'T√≠nh ƒë·ªÅu ƒë·∫∑n',
      mainValue: null,
      subValue: consistency === 'irregular' && irregularReasons.length > 0 
        ? `${irregularReasons.length} v·∫•n ƒë·ªÅ ƒë∆∞·ª£c ph√°t hi·ªán` 
        : 'ƒê√°nh gi√° chu k·ª≥',
      id: 'consistency',
      customContent: (
        <div className="mb-2">
          <span
            className={`${styles.consistencyBadge} ${getConsistencyClass(consistency)}`}
          >
            {getConsistencyText(consistency)}
          </span>
        </div>
      ),
    },
  ];

  const getAdvice = () => {
    const advice = [];

    if (consistency === 'regular') {
      advice.push({
        icon: <Heart className="h-6 w-6 text-green-600" />,
        title: 'Chu k·ª≥ b√¨nh th∆∞·ªùng',
        description:
          'Chu k·ª≥ c·ªßa b·∫°n r·∫•t ƒë·ªÅu ƒë·∫∑n! H√£y duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh hi·ªán t·∫°i.',
        tips: [
          'Ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng c√¢n b·∫±ng',
          'T·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n',
          'Ng·ªß ƒë·ªß 7-8 ti·∫øng m·ªói ng√†y',
        ],
        color: 'green',
      });
    } else if (consistency === 'irregular') {
      // Th√™m card hi·ªÉn th·ªã l√Ω do c·ª• th·ªÉ
      advice.push({
        icon: <AlertCircle className="h-6 w-6 text-red-600" />,
        title: 'L√Ω do chu k·ª≥ kh√¥ng b√¨nh th∆∞·ªùng',
        description: 'Ph√¢n t√≠ch d·ª±a tr√™n d·ªØ li·ªáu chu k·ª≥ c·ªßa b·∫°n:',
        tips: irregularReasons,
        color: 'red',
      });

      advice.push({
        icon: <Activity className="h-6 w-6 text-yellow-600" />,
        title: 'C√°ch c·∫£i thi·ªán chu k·ª≥ kh√¥ng ƒë·ªÅu',
        description:
          'Nh·ªØng bi·ªán ph√°p c√≥ th·ªÉ gi√∫p c·∫£i thi·ªán t√¨nh tr·∫°ng chu k·ª≥ kh√¥ng ƒë·ªÅu.',
        tips: [
          'Gi·∫£m stress th√¥ng qua yoga, thi·ªÅn ho·∫∑c t·∫≠p th·ªü s√¢u',
          'Duy tr√¨ c√¢n n·∫∑ng ·ªïn ƒë·ªãnh v√† tr√°nh gi·∫£m c√¢n ƒë·ªôt ng·ªôt',
          'Ng·ªß ƒë·ªß gi·∫•c v√† gi·ªØ gi·ªù gi·∫•c ƒë·ªÅu ƒë·∫∑n',
          'H·∫°n ch·∫ø caffeine v√† r∆∞·ª£u bia',
          'ƒÇn ƒë·ªß ch·∫•t dinh d∆∞·ª°ng, ƒë·∫∑c bi·ªát l√† s·∫Øt v√† vitamin B',
          'T·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng, tr√°nh v·∫≠n ƒë·ªông qu√° s·ª©c',
          'Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ƒë·ªÉ ki·ªÉm tra hormone',
        ],
        color: 'yellow',
      });
    } else if (consistency === 'unknown') {
      advice.push({
        icon: <AlertCircle className="h-6 w-6 text-gray-600" />,
        title: 'C·∫ßn th√™m d·ªØ li·ªáu',
        description:
          'B·∫°n c·∫ßn ghi nh·∫≠n th√™m chu k·ª≥ ƒë·ªÉ c√≥ th·ªÉ ƒë√°nh gi√° t√≠nh ƒë·ªÅu ƒë·∫∑n.',
        tips: [
          'Ghi ch√©p √≠t nh·∫•t 3 chu k·ª≥ ƒë·ªÉ c√≥ ƒë√°nh gi√° ch√≠nh x√°c',
          'Theo d√µi ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c k·ª≥ kinh',
          'Ghi ch√∫ c√°c tri·ªáu ch·ª©ng v√† c·∫£m gi√°c',
        ],
        color: 'gray',
      });
    }

    if (
      averageCycleLengthOfCurrentCycles < 24 &&
      averageCycleLengthOfCurrentCycles !== null
    ) {
      advice.push({
        icon: <Zap className="h-6 w-6 text-red-600" />,
        title: 'Chu k·ª≥ ng·∫Øn',
        description: 'Chu k·ª≥ ng·∫Øn h∆°n 24 ng√†y c√≥ th·ªÉ c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra y t·∫ø.',
        tips: [
          'Theo d√µi k·ªπ h∆°n c√°c tri·ªáu ch·ª©ng',
          'Ghi ch√∫ v·ªÅ stress v√† thay ƒë·ªïi l·ªëi s·ªëng',
          'N√™n thƒÉm kh√°m b√°c sƒ©',
        ],
        color: 'red',
      });
    } else if (averageCycleLengthOfCurrentCycles > 38) {
      advice.push({
        icon: <Lightbulb className="h-6 w-6 text-blue-600" />,
        title: 'Chu k·ª≥ d√†i',
        description:
          'Chu k·ª≥ d√†i h∆°n 38 ng√†y c√≥ th·ªÉ do nhi·ªÅu nguy√™n nh√¢n kh√°c nhau.',
        tips: [
          'Ki·ªÉm tra hormone n·∫øu c√≥ th·ªÉ',
          'Duy tr√¨ ch·∫ø ƒë·ªô ƒÉn gi√†u dinh d∆∞·ª°ng',
          'Tham kh·∫£o chuy√™n gia s·ª©c kh·ªèe',
        ],
        color: 'blue',
      });
    }

    // General advice
    advice.push({
      icon: <Heart className="h-6 w-6 text-pink-600" />,
      title: 'L·ªùi khuy√™n chung',
      description: 'Nh·ªØng th√≥i quen t·ªët ƒë·ªÉ duy tr√¨ s·ª©c kh·ªèe sinh s·∫£n.',
      tips: [
        'U·ªëng ƒë·ªß 2-3 l√≠t n∆∞·ªõc m·ªói ng√†y',
        'ƒÇn nhi·ªÅu rau xanh v√† tr√°i c√¢y',
        'T·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng trong k·ª≥ kinh',
        'Theo d√µi v√† ghi ch√©p ƒë·ªÅu ƒë·∫∑n',
      ],
      color: 'pink',
    });

    return advice;
  };

  const advice = getAdvice();

  // Pagination logic
  const sortedCycles = menstrualCycles.sort(
    (a, b) => new Date(b.startDate) - new Date(a.startDate)
  );

  const ortherSortedCycles = [...menstrualCycles].sort(
    (a, b) => new Date(a.startDate) - new Date(b.startDate)
  );
  const totalPages = Math.ceil(sortedCycles.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentCycles = sortedCycles.slice(startIndex, endIndex);

  const handlePageChange = (page) => {
    setCurrentPage(page);
    // Scroll to cycle list section
    setTimeout(() => {
      const cycleListElement = document.querySelector(
        '[data-section="cycle-list"]'
      );
      if (cycleListElement) {
        cycleListElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }, 100);
  };

  // Reset pagination when cycles change
  React.useEffect(() => {
    if (currentPage > totalPages && totalPages > 0) {
      setCurrentPage(1);
    }
  }, [menstrualCycles.length, currentPage, totalPages]);

  const handleSubmitCycle = async (data) => {
    try {
      // Ch·ªâ t√≠nh to√°n v√† hi·ªÉn th·ªã k·∫øt qu·∫£
      const calculatedData = calculateCycleData(data);
      setCalculationResult(calculatedData);
      setShowForm(false);
      // Scroll to result section
      setTimeout(() => {
        const resultElement = document.getElementById('calculation-result');
        if (resultElement) {
          resultElement.scrollIntoView({ behavior: 'smooth' });
        }
      }, 100);
    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω chu k·ª≥:', error);
      notify.error('L·ªói', 'T√≠nh to√°n th·∫•t b·∫°i!');
    }
  };

  // H√†m t√≠nh to√°n d·ªØ li·ªáu chu k·ª≥
  const calculateCycleData = (data) => {
    const startDate = new Date(data.startDate);
    const nextPeriodDate = new Date(startDate);
    nextPeriodDate.setDate(startDate.getDate() + data.cycleLength);

    const ovulationDate = new Date(startDate);
    ovulationDate.setDate(
      startDate.getDate() + Math.floor(data.cycleLength) - 14
    );

    const fertilityWindowStart = new Date(ovulationDate);
    fertilityWindowStart.setDate(ovulationDate.getDate() - 5);

    const fertilityWindowEnd = new Date(ovulationDate);
    fertilityWindowEnd.setDate(ovulationDate.getDate() + 1);

    return {
      startDate: startDate,
      endDate: new Date(
        startDate.getTime() + (data.numberOfDays - 1) * 24 * 60 * 60 * 1000
      ),
      nextPeriodDate: nextPeriodDate,
      ovulationDate: ovulationDate,
      fertilityWindow: {
        start: fertilityWindowStart,
        end: fertilityWindowEnd,
      },
      cycleLength: data.cycleLength,
      periodLength: data.numberOfDays,
    };
  };

  // H√†m l·∫•y chu k·ª≥ g·∫ßn nh·∫•t sau chu k·ª≥ ƒë∆∞·ª£c nh·∫≠p v√†o
  const getNextCycleAfterInput = (inputCycle) => {
    if (!inputCycle || !ortherSortedCycles.length) return null;

    const inputStartDate = new Date(inputCycle.startDate);

    for (const cycle of ortherSortedCycles) {
      const cycleStartDate = new Date(cycle.startDate);

      if (cycleStartDate > inputStartDate) {
        return cycle;
      }
    }

    return null;
  };
  
  // H√†m l·∫•y chu k·ª≥ g·∫ßn nh·∫•t tr∆∞·ªõc chu k·ª≥ ƒë∆∞·ª£c nh·∫≠p v√†o
  const getLastCycleBeforeInput = (inputCycle) => {
    if (!inputCycle || !sortedCycles.length) return null;

    const inputStartDate = new Date(inputCycle.startDate);

    for (const cycle of sortedCycles) {
      const cycleStartDate = new Date(cycle.startDate);

      if (cycleStartDate < inputStartDate) {
        return cycle;
      }
    }

    return null;
  };


  // H√†m so s√°nh chu k·ª≥ ƒë√£ nh·∫≠p v·ªõi chu k·ª≥ sau g·∫ßn nh·∫•t
  const compareCycleWithNext = (inputCycle) => {
    const nextCycle = getNextCycleAfterInput(inputCycle);
    if (!nextCycle) return null;

    // So s√°nh ƒë·ªô d√†i chu k·ª≥ c·ªßa chu k·ª≥ sau g·∫ßn nh·∫•t v√† kho·∫£ng c√°ch th·ª±c t·∫ø so v·ªõi ƒë√£ nh·∫≠p
    const nextCycleLength = nextCycle.cycleLength;
    const actualCycleLength =
      (new Date(nextCycle.startDate) - new Date(inputCycle.startDate)) /
      (1000 * 60 * 60 * 24);

    if (nextCycleLength !== actualCycleLength) {
      // N·∫øu ƒë·ªô d√†i chu k·ª≥ kh√¥ng kh·ªõp, c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh
      console.warn('ƒê·ªô d√†i chu k·ª≥ kh√¥ng kh·ªõp:', {
        nextCycleLength,
        actualCycleLength,
        nextCycle
      });
    }

    return {
      nextCycle,
      nextCycleLength,
      actualCycleLength,
    };
  };

  const compareCycleResultWithNext = compareCycleWithNext(calculationResult);

  // H√†m so s√°nh chu k·ª≥ ƒë√£ nh·∫≠p v·ªõi chu k·ª≥ tr∆∞·ªõc g·∫ßn nh·∫•t
  const compareCycleWithLast = (inputCycle) => {
    const lastCycle = getLastCycleBeforeInput(inputCycle);
    if (!lastCycle) return null;

    // So s√°nh ƒë·ªô d√†i chu k·ª≥ c·ªßa chu k·ª≥ tr∆∞·ªõc g·∫ßn nh·∫•t v√† kho·∫£ng c√°ch th·ª±c t·∫ø so v·ªõi ƒë√£ nh·∫≠p
    const lastCycleLength = lastCycle.cycleLength;
    const actualCycleLength =
      (new Date(inputCycle.startDate) - new Date(lastCycle.startDate)) /
      (1000 * 60 * 60 * 24);

    if (lastCycleLength !== actualCycleLength) {
      // N·∫øu ƒë·ªô d√†i chu k·ª≥ kh√¥ng kh·ªõp, c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh
      console.warn('ƒê·ªô d√†i chu k·ª≥ kh√¥ng kh·ªõp:', {
        lastCycleLength,
        actualCycleLength,
        lastCycle
      });
    }

    return {
      lastCycle,
      lastCycleLength,
      actualCycleLength,
    };
  };

  const compareCycleResultWithLast = compareCycleWithLast(calculationResult);

  // H√†m x·ª≠ l√Ω xem chi ti·∫øt chu k·ª≥
  const handleViewCycleDetail = (cycle) => {
    setSelectedCycleForCalendar(cycle);
    setShowCalendarModal(true);
  };

  // H√†m ƒë√≥ng modal calendar
  const handleCloseCalendarModal = () => {
    setSelectedCycleForCalendar(null);
    setShowCalendarModal(false);
  };

  // H√†m ƒë√≥ng modal chi ti·∫øt chu k·ª≥
  const handleCloseCycleDetail = () => {
    setSelectedCycleForDetail(null);
    setShowCycleDetail(false);
  };

  // H√†m x·ª≠ l√Ω edit chu k·ª≥
  const handleEditCycle = (cycle) => {
    setEditingCycle(cycle);
    setShowEditForm(true);
    setShowForm(false);
    setCalculationResult(null);
  };

  // H√†m x·ª≠ l√Ω submit khi edit chu k·ª≥
  const handleSubmitEditCycle = async (data) => {
    const result = await confirmDialog.info(
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t chu k·ª≥ n√†y?',
      {
        title: 'C·∫≠p nh·∫≠t chu k·ª≥ kinh nguy·ªát',
        confirmText: 'C·∫≠p nh·∫≠t',
        cancelText: 'H·ªßy',
        message:
          'Th√¥ng tin chu k·ª≥ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn c√°c d·ª± ƒëo√°n chu k·ª≥ ti·∫øp theo.',
      }
    );

    if (!result) return;

    try {
      await ovulationService.updateMenstrualCycle(editingCycle.id, data);

      // Refetch d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t UI
      await fetchMenstrualCycles(true);

      setShowEditForm(false);
      setEditingCycle(null);

      notify.success('Th√†nh c√¥ng', 'C·∫≠p nh·∫≠t chu k·ª≥ th√†nh c√¥ng!');

      // Scroll to top ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t
      window.scrollTo({ top: 0, behavior: 'smooth' });
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t chu k·ª≥:', error);
      notify.error('L·ªói', 'C·∫≠p nh·∫≠t chu k·ª≥ th·∫•t b·∫°i!');
    }
  };

  // H√†m x·ª≠ l√Ω x√≥a chu k·ª≥
  const handleDeleteCycle = async (cycle) => {
    const cycleNumber = menstrualCycles.length - menstrualCycles.indexOf(cycle);

    const result = await confirmDialog.danger(
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a chu k·ª≥ #${cycleNumber} kh√¥ng?`,
      {
        title: 'X√≥a chu k·ª≥ kinh nguy·ªát',
        confirmText: 'X√≥a',
        cancelText: 'H·ªßy b·ªè',
        message: `H√†nh ƒë·ªông n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn chu k·ª≥ #${cycleNumber} kh·ªèi h·ªá th·ªëng v√† kh√¥ng th·ªÉ ho√†n t√°c.`,
      }
    );

    if (result) {
      try {
        await ovulationService.deleteMenstrualCycle(cycle.id);

        // Refetch d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t UI
        await fetchMenstrualCycles(true);

        // Adjust current page if necessary
        const newTotalPages = Math.ceil(
          (menstrualCycles.length - 1) / itemsPerPage
        );
        if (currentPage > newTotalPages && newTotalPages > 0) {
          setCurrentPage(newTotalPages);
        }

        notify.success('Th√†nh c√¥ng', 'X√≥a chu k·ª≥ th√†nh c√¥ng!');
      } catch (error) {
        console.error('L·ªói khi x√≥a chu k·ª≥:', error);
        notify.error('L·ªói', 'X√≥a chu k·ª≥ th·∫•t b·∫°i!');
      }
    }
  };

  // H√†m cancel edit
  const handleCancelEdit = async () => {
    const result = await confirmDialog.warning(
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ch·ªânh s·ª≠a?',
      {
        title: 'H·ªßy ch·ªânh s·ª≠a',
        confirmText: 'H·ªßy ch·ªânh s·ª≠a',
        cancelText: 'Ti·∫øp t·ª•c ch·ªânh s·ª≠a',
        message: 'M·ªçi thay ƒë·ªïi ch∆∞a ƒë∆∞·ª£c l∆∞u s·∫Ω b·ªã m·∫•t.',
      }
    );

    if (result) {
      setShowEditForm(false);
      setEditingCycle(null);
    }
  };

  // H√†m cancel add form
  const handleCancelAddForm = async () => {
    const result = await confirmDialog.warning(
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy th√™m chu k·ª≥ m·ªõi?',
      {
        title: 'H·ªßy th√™m chu k·ª≥',
        confirmText: 'H·ªßy',
        cancelText: 'Ti·∫øp t·ª•c nh·∫≠p',
        message: 'M·ªçi th√¥ng tin ƒë√£ nh·∫≠p s·∫Ω b·ªã m·∫•t.',
      }
    );

    if (result) {
      setShowForm(false);
      setCalculationResult(null);
    }
  };

  // H√†m x·ª≠ l√Ω l∆∞u chu k·ª≥ ƒë√£ t√≠nh to√°n v√†o database
  const handleSaveCycleToDatabase = async () => {
    if (!calculationResult) return;

    const result = await confirmDialog.success(
      'B·∫°n c√≥ mu·ªën l∆∞u chu k·ª≥ n√†y v√†o h·ªá th·ªëng kh√¥ng?',
      {
        title: 'L∆∞u chu k·ª≥ kinh nguy·ªát',
        confirmText: 'L∆∞u',
        cancelText: 'H·ªßy',
        message:
          'Chu k·ª≥ s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o d·ªØ li·ªáu c√° nh√¢n c·ªßa b·∫°n v√† c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ theo d√µi v√† d·ª± ƒëo√°n c√°c chu k·ª≥ ti·∫øp theo.',
      }
    );

    if (!result) return;

    try {
      // Chu·∫©n b·ªã d·ªØ li·ªáu t·ª´ calculationResult
      const cycleData = {
        startDate: calculationResult.startDate,
        numberOfDays: calculationResult.periodLength,
        cycleLength: calculationResult.cycleLength,
      };

      // G·ªçi API ƒë·ªÉ l∆∞u v√†o database
      await ovulationService.createMenstrualCycle(cycleData);

      // Refetch d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t UI
      await fetchMenstrualCycles(true);

      // Reset v·ªÅ trang ƒë·∫ßu ƒë·ªÉ hi·ªÉn th·ªã chu k·ª≥ m·ªõi nh·∫•t
      setCurrentPage(1);

      notify.success('Th√†nh c√¥ng', 'L∆∞u chu k·ª≥ th√†nh c√¥ng!');
      setCalculationResult(null); // Clear calculation result

      // Scroll to top ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y d·ªØ li·ªáu m·ªõi
      window.scrollTo({ top: 0, behavior: 'smooth' });
    } catch (error) {
      console.error('L·ªói khi l∆∞u chu k·ª≥:', error);
      notify.error('L·ªói', 'L∆∞u chu k·ª≥ th·∫•t b·∫°i!');
    }
  };

  // H√†m x·ª≠ l√Ω ƒë√≥ng k·∫øt qu·∫£ t√≠nh to√°n
  const handleClearCalculationResult = async () => {
    const result = await confirmDialog.warning(
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√≥ng k·∫øt qu·∫£ t√≠nh to√°n?',
      {
        title: 'ƒê√≥ng k·∫øt qu·∫£',
        confirmText: 'ƒê√≥ng',
        cancelText: 'H·ªßy',
        message:
          'K·∫øt qu·∫£ t√≠nh to√°n s·∫Ω b·ªã m·∫•t v√† b·∫°n c·∫ßn ph·∫£i t√≠nh to√°n l·∫°i n·∫øu mu·ªën.',
      }
    );

    if (result) {
      setCalculationResult(null);
    }
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={vi}>
      <Container maxWidth="lg" className={styles.container}>
        {isCheckingAuth ? (
          <Box
            sx={{
              textAlign: 'center',
              padding: '60px 20px',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: 3,
            }}
          >
            <Box
              sx={{
                width: '50px',
                height: '50px',
                border: '4px solid #f3f4f6',
                borderTop: '4px solid #43a6ef',
                borderRadius: '50%',
                animation: 'spin 1s linear infinite',
                '@keyframes spin': {
                  '0%': { transform: 'rotate(0deg)' },
                  '100%': { transform: 'rotate(360deg)' },
                },
              }}
            />
            <Typography
              variant="h6"
              sx={{
                color: '#6b7280',
                fontWeight: 500,
                fontSize: '1.1rem',
                letterSpacing: '0.5px',
              }}
            >
              ƒêang ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p...
            </Typography>
            <Typography
              variant="body2"
              sx={{
                color: '#9ca3af',
                fontStyle: 'italic',
                fontSize: '0.9rem',
              }}
            >
              Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t
            </Typography>
          </Box>
        ) : isLoggedIn ? (
          <>
            {isLoading ? (
              <Box
                sx={{
                  textAlign: 'center',
                  padding: '60px 20px',
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                  gap: 3,
                }}
              >
                <Box
                  sx={{
                    width: '50px',
                    height: '50px',
                    border: '4px solid #f3f4f6',
                    borderTop: '4px solid #43a6ef',
                    borderRadius: '50%',
                    animation: 'spin 1s linear infinite',
                    '@keyframes spin': {
                      '0%': { transform: 'rotate(0deg)' },
                      '100%': { transform: 'rotate(360deg)' },
                    },
                  }}
                />
                <Typography
                  variant="h6"
                  sx={{
                    color: '#6b7280',
                    fontWeight: 500,
                    fontSize: '1.1rem',
                    letterSpacing: '0.5px',
                  }}
                >
                  ƒêang t·∫£i d·ªØ li·ªáu...
                </Typography>
                <Typography
                  variant="body2"
                  sx={{
                    color: '#9ca3af',
                    fontStyle: 'italic',
                    fontSize: '0.9rem',
                  }}
                >
                  Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t
                </Typography>
              </Box>
            ) : (
              <>
                {/* Refetching indicator */}
                {isRefetching && (
                  <Box className={styles.refetchOverlay}>
                    <div className={styles.spinner}></div>
                    <Typography className={styles.refetchText}>
                      ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu...
                    </Typography>
                  </Box>
                )}

                {/* Stats Cards */}
                <div className={styles.dashboard}>
                  {dashboardCards.map((card, index) => (
                    <div
                      key={card.id}
                      className={styles.card}
                      role="article"
                      aria-labelledby={`card-${card.id}-title`}
                      tabIndex={0}
                    >
                      <div className={styles.cardHeader}>
                        <div className={card.iconWrapper}>{card.icon}</div>
                        <span
                          className={styles.cardLabel}
                          id={`card-${card.id}-title`}
                        >
                          {card.label}
                        </span>
                      </div>

                      {card.customContent ? (
                        card.customContent
                      ) : (
                        <div className={styles.mainValue}>{card.mainValue}</div>
                      )}

                      <div className={styles.subValue}>{card.subValue}</div>
                    </div>
                  ))}
                </div>

                {/* Danh s√°ch chu k·ª≥ kinh nguy·ªát */}
                <Box sx={{ marginBottom: 4 }} data-section="cycle-list">
                  <Card className={styles.cycleListCard}>
                    <Box className={styles.cycleListHeader}>
                      <Box className={styles.cycleListIconWrapper}>
                        <Calendar className={styles.cycleListIcon} />
                      </Box>
                      <Box>
                        <Typography
                          variant="h6"
                          className={styles.cycleListTitle}
                        >
                          L·ªãch s·ª≠ chu k·ª≥ kinh nguy·ªát
                        </Typography>
                        <Typography className={styles.cycleListSubtitle}>
                          {menstrualCycles.length} chu k·ª≥ ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n
                          {menstrualCycles.length > itemsPerPage && (
                            <span>
                              {' '}
                              ‚Ä¢ Trang {currentPage}/{totalPages}
                            </span>
                          )}
                        </Typography>
                      </Box>
                    </Box>

                    {menstrualCycles.length > 0 ? (
                      <>
                        <Box className={styles.cycleListContainer}>
                          {currentCycles.map((cycle, index) => (
                            <Card
                              key={startIndex + index}
                              className={styles.cycleItem}
                            >
                              <Box className={styles.cycleItemHeader}>
                                <Box className={styles.cycleItemIconWrapper}>
                                  <Calendar className={styles.cycleItemIcon} />
                                </Box>
                                <Box className={styles.cycleItemInfo}>
                                  <Typography className={styles.cycleItemTitle}>
                                    Chu k·ª≥ #
                                    {menstrualCycles.length -
                                      (startIndex + index)}
                                  </Typography>
                                  <Typography className={styles.cycleItemDate}>
                                    {formatDate(cycle.startDate)}
                                  </Typography>
                                </Box>

                                {/* View Detail, Edit and Delete buttons */}
                                <Box className={styles.cycleItemActions}>
                                  <button
                                    className={styles.viewButton}
                                    onClick={() => handleViewCycleDetail(cycle)}
                                    title="Xem chi ti·∫øt chu k·ª≥"
                                  >
                                    <Eye className={styles.actionIcon} />
                                  </button>
                                  <button
                                    className={styles.editButton}
                                    onClick={() => handleEditCycle(cycle)}
                                    title="Ch·ªânh s·ª≠a chu k·ª≥"
                                  >
                                    <Edit className={styles.actionIcon} />
                                  </button>
                                  <button
                                    className={styles.deleteButton}
                                    onClick={() => handleDeleteCycle(cycle)}
                                    title="X√≥a chu k·ª≥"
                                  >
                                    <Trash2 className={styles.actionIcon} />
                                  </button>
                                </Box>
                              </Box>

                              <Box className={styles.cycleItemDetails}>
                                <Box className={styles.cycleDetailItem}>
                                  <Typography
                                    className={styles.cycleDetailLabel}
                                  >
                                    S·ªë ng√†y h√†nh kinh:
                                  </Typography>
                                  <Typography
                                    className={styles.cycleDetailValue}
                                  >
                                    {cycle.numberOfDays} ng√†y
                                  </Typography>
                                </Box>

                                <Box className={styles.cycleDetailItem}>
                                  <Typography
                                    className={styles.cycleDetailLabel}
                                  >
                                    ƒê·ªô d√†i chu k·ª≥:
                                  </Typography>
                                  <Typography
                                    className={styles.cycleDetailValue}
                                  >
                                    {cycle.cycleLength} ng√†y
                                  </Typography>
                                </Box>

                                <Box className={styles.cycleDetailItem}>
                                  <Typography
                                    className={styles.cycleDetailLabel}
                                  >
                                    Ng√†y r·ª•ng tr·ª©ng d·ª± ki·∫øn:
                                  </Typography>
                                  <Typography
                                    className={styles.cycleDetailValue}
                                  >
                                    {formatDate(cycle.ovulationDate)}
                                  </Typography>
                                </Box>
                              </Box>
                            </Card>
                          ))}
                        </Box>

                        {/* Pagination Controls */}
                        {totalPages > 1 && (
                          <Box className={styles.paginationContainer}>
                            <Box className={styles.paginationInfo}>
                              <Typography className={styles.paginationText}>
                                Hi·ªÉn th·ªã {startIndex + 1}-
                                {Math.min(endIndex, menstrualCycles.length)}
                                trong t·ªïng s·ªë {menstrualCycles.length} chu k·ª≥
                              </Typography>
                            </Box>

                            <Box className={styles.paginationControls}>
                              <button
                                className={`${styles.paginationButton} ${currentPage === 1 ? styles.disabled : ''}`}
                                onClick={() =>
                                  handlePageChange(currentPage - 1)
                                }
                                disabled={currentPage === 1}
                              >
                                <ChevronUp
                                  className={styles.paginationIcon}
                                  style={{ transform: 'rotate(-90deg)' }}
                                />
                                Tr∆∞·ªõc
                              </button>

                              <Box className={styles.pageNumbers}>
                                {Array.from(
                                  { length: totalPages },
                                  (_, i) => i + 1
                                ).map((page) => (
                                  <button
                                    key={page}
                                    className={`${styles.pageNumber} ${currentPage === page ? styles.active : ''}`}
                                    onClick={() => handlePageChange(page)}
                                  >
                                    {page}
                                  </button>
                                ))}
                              </Box>

                              <button
                                className={`${styles.paginationButton} ${currentPage === totalPages ? styles.disabled : ''}`}
                                onClick={() =>
                                  handlePageChange(currentPage + 1)
                                }
                                disabled={currentPage === totalPages}
                              >
                                Sau
                                <ChevronUp
                                  className={styles.paginationIcon}
                                  style={{ transform: 'rotate(90deg)' }}
                                />
                              </button>
                            </Box>
                          </Box>
                        )}
                      </>
                    ) : (
                      <Box className={styles.emptyCycleList}>
                        <Calendar className={styles.emptyCycleIcon} />
                        <Typography className={styles.emptyCycleTitle}>
                          Ch∆∞a c√≥ chu k·ª≥ n√†o ƒë∆∞·ª£c ghi nh·∫≠n
                        </Typography>
                        <Typography className={styles.emptyCycleDescription}>
                          H√£y b·∫•m n√∫t "Khai b√°o chu k·ª≥ m·ªõi" ƒë·ªÉ th√™m chu k·ª≥ ƒë·∫ßu
                          ti√™n c·ªßa b·∫°n
                        </Typography>
                      </Box>
                    )}
                  </Card>
                </Box>

                {/* Button khai b√°o chu k·ª≥ m·ªõi */}
                {!showForm && !calculationResult && !showEditForm && (
                  <Box className={styles.addCycleButtonContainer}>
                    <button
                      className={styles.addCycleButton}
                      onClick={() => {
                        setShowForm(true);
                        setCalculationResult(null);
                      }}
                    >
                      <Calendar className={styles.addCycleButtonIcon} />
                      Khai b√°o chu k·ª≥ m·ªõi
                    </button>
                  </Box>
                )}

                {/* Form t·∫°o chu k·ª≥ m·ªõi */}
                <MenstrualCycleForm
                  open={showForm}
                  onSubmit={handleSubmitCycle}
                  onCancel={handleCancelAddForm}
                />

                {/* Form ch·ªânh s·ª≠a chu k·ª≥ */}
                <MenstrualCycleForm
                  open={showEditForm && !!editingCycle}
                  onSubmit={handleSubmitEditCycle}
                  onCancel={handleCancelEdit}
                  initialData={editingCycle}
                  isEditMode={true}
                />

                {/* K·∫øt qu·∫£ t√≠nh to√°n */}
                {calculationResult && (
                  <Box id="calculation-result" sx={{ marginBottom: 4 }}>
                    <Card className={styles.healthAdviceCard}>
                      <Box className={styles.healthAdviceHeader}>
                        <Box className={styles.healthAdviceIconWrapper}>
                          <Calendar className={styles.healthAdviceIcon} />
                        </Box>
                        <Box>
                          <Typography
                            variant="h6"
                            className={styles.healthAdviceTitle}
                          >
                            K·∫øt qu·∫£ t√≠nh to√°n chu k·ª≥
                          </Typography>
                          <Typography className={styles.healthAdviceSubtitle}>
                            D·ª± ƒëo√°n d·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p
                          </Typography>
                        </Box>
                      </Box>

                      

                      <Box className={styles.form}>
                        {/* Th√¥ng tin chu k·ª≥ hi·ªán t·∫°i */}
                        <Card
                          className={`${styles.adviceCardRegular} ${styles.adviceCardBlue}`}
                        >
                          <Box className={styles.adviceCardHeader}>
                            <Box className={styles.adviceCardIconRegular}>
                              <Calendar
                                className={styles.adviceCardIconRegularIcon}
                              />
                            </Box>
                            <Typography
                              variant="subtitle1"
                              className={styles.adviceCardTitleRegular}
                            >
                              Chu k·ª≥ hi·ªán t·∫°i
                            </Typography>
                          </Box>
                          <Typography className={styles.adviceCardTextRegular}>
                            Th√¥ng tin v·ªÅ k·ª≥ kinh nguy·ªát ƒëang di·ªÖn ra
                          </Typography>
                          <List className={styles.adviceCardList}>
                            <ListItem className={styles.adviceCardListItem}>
                              Ng√†y b·∫Øt ƒë·∫ßu:{' '}
                              {formatDate(calculationResult.startDate)}
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              Ng√†y k·∫øt th√∫c d·ª± ki·∫øn:{' '}
                              {formatDate(calculationResult.endDate)}
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              ƒê·ªô d√†i k·ª≥ kinh: {calculationResult.periodLength}{' '}
                              ng√†y
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              ƒê·ªô d√†i chu k·ª≥: {calculationResult.cycleLength}{' '}
                              ng√†y
                            </ListItem>
                          </List>
                        </Card>

                        {/* D·ª± ƒëo√°n chu k·ª≥ ti·∫øp theo */}
                        <Card
                          className={`${styles.adviceCardRegular} ${styles.adviceCardPink}`}
                        >
                          <Box className={styles.adviceCardHeader}>
                            <Box className={styles.adviceCardIconRegular}>
                              <TrendingUp
                                className={styles.adviceCardIconRegularIcon}
                              />
                            </Box>
                            <Typography
                              variant="subtitle1"
                              className={styles.adviceCardTitleRegular}
                            >
                              D·ª± ƒëo√°n chu k·ª≥ ti·∫øp theo
                            </Typography>
                          </Box>
                          <Typography className={styles.adviceCardTextRegular}>
                            Th·ªùi ƒëi·ªÉm d·ª± ki·∫øn cho k·ª≥ kinh nguy·ªát ti·∫øp theo
                          </Typography>
                          <List className={styles.adviceCardList}>
                            <ListItem className={styles.adviceCardListItem}>
                              Ng√†y b·∫Øt ƒë·∫ßu d·ª± ki·∫øn:{' '}
                              {formatDate(calculationResult.nextPeriodDate)}
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              C√≤n kho·∫£ng:{' '}
                              {Math.ceil(
                                (calculationResult.nextPeriodDate -
                                  new Date()) /
                                  (1000 * 60 * 60 * 24)
                              )}{' '}
                              ng√†y
                            </ListItem>
                            
                          </List>
                        </Card>

                        {/* Th·ªùi k·ª≥ r·ª•ng tr·ª©ng */}
                        <Card
                          className={`${styles.adviceCardRegular} ${styles.adviceCardGreen}`}
                        >
                          <Box className={styles.adviceCardHeader}>
                            <Box className={styles.adviceCardIconRegular}>
                              <Heart
                                className={styles.adviceCardIconRegularIcon}
                              />
                            </Box>
                            <Typography
                              variant="subtitle1"
                              className={styles.adviceCardTitleRegular}
                            >
                              Th·ªùi k·ª≥ r·ª•ng tr·ª©ng v√† th·ª• thai
                            </Typography>
                          </Box>
                          <Typography className={styles.adviceCardTextRegular}>
                            Th·ªùi ƒëi·ªÉm c√≥ kh·∫£ nƒÉng th·ª• thai cao nh·∫•t
                          </Typography>
                          <List className={styles.adviceCardList}>
                            <ListItem className={styles.adviceCardListItem}>
                              Ng√†y r·ª•ng tr·ª©ng d·ª± ki·∫øn:{' '}
                              {formatDate(calculationResult.ovulationDate)}
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              Th·ªùi k·ª≥ th·ª• thai:{' '}
                              {formatDate(
                                calculationResult.fertilityWindow.start
                              )}{' '}
                              -{' '}
                              {formatDate(
                                calculationResult.fertilityWindow.end
                              )}
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              Th·ªùi gian th·ª• thai k√©o d√†i:{' '}
                              {Math.ceil(
                                (calculationResult.fertilityWindow.end -
                                  calculationResult.fertilityWindow.start) /
                                  (1000 * 60 * 60 * 24)
                              ) + 1}{' '}
                              ng√†y
                            </ListItem>
                          </List>
                        </Card>

                        {/* N·∫øu chu k·ª≥ ti·∫øp theo kh√¥ng kh·ªõp v·ªõi chu k·ª≥ ƒë√£ nh·∫≠p */}
                        {((compareCycleResultWithNext !== null && compareCycleResultWithNext.nextCycleLength !== compareCycleResultWithNext.actualCycleLength)
                         || (compareCycleResultWithLast !== null && compareCycleResultWithLast.lastCycleLength !== compareCycleResultWithLast.actualCycleLength)) && (
                          <Card
                            sx={{
                              background: '#F5F5DC',
                              border: '1.5px solid #f59e0b',
                              borderRadius: '12px',
                              display: 'flex',
                              alignItems: 'center',
                              gap: 2,
                              padding: '18px 20px',
                              margin: '36px 36px',
                              boxShadow: '0 2px 8px 0 rgba(239,68,68,0.08)',
                            }}
                          >
                            <div style={{ display: 'flex', alignItems: 'center', marginRight: 16 }}>
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="32"
                                height="32"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                                strokeWidth="2"
                                style={{ color: '#f59e0b', flexShrink: 0 }}
                              >
                                <circle cx="12" cy="12" r="10" stroke="#f59e0b" strokeWidth="2" fill="#F5F5DC" />
                                <path d="M12 8v4" stroke="#f59e0b" strokeWidth="2" strokeLinecap="round" />
                                <circle cx="12" cy="16" r="1" fill="#f59e0b" />
                              </svg>
                            </div>
                            <div style={{ flex: 1 }}>
                              <Typography
                                sx={{
                                  color: '#f59e0b',
                                  fontWeight: 700,
                                  fontSize: '1.08rem',
                                  letterSpacing: '0.5px',
                                  lineHeight: 1.5,
                                }}
                              >
                                C·∫£nh b√°o: ƒê·ªô d√†i chu k·ª≥ kh√¥ng kh·ªõp!
                              </Typography>

                              {(compareCycleResultWithLast !== null && compareCycleResultWithLast.lastCycleLength !== compareCycleResultWithLast.actualCycleLength) && (
                                <Typography
                                  sx={{
                                    color: '#f59e0b',
                                    fontSize: '0.97rem',
                                    marginTop: '2px',
                                    lineHeight: 2,
                                  }}
                                >
                                  Chu k·ª≥ tr∆∞·ªõc ({compareCycleResultWithLast?.lastCycle?.startDate && formatDate(compareCycleResultWithLast.lastCycle.startDate)},
                                   d√†i {compareCycleResultWithLast.lastCycleLength} ng√†y)
                                   c√°ch chu k·ª≥ ƒë∆∞·ª£c nh·∫≠p: {compareCycleResultWithLast.actualCycleLength.toFixed(0)} ng√†y.
                                  <br />
                                </Typography>
                              )}
                              {(compareCycleResultWithNext !== null && compareCycleResultWithNext.nextCycleLength !== compareCycleResultWithNext.actualCycleLength) && (
                              <Typography
                                sx={{
                                  color: '#f59e0b',
                                  fontSize: '0.97rem',
                                  marginTop: '2px',
                                  lineHeight: 2,
                                }}
                              >
                                Chu k·ª≥ sau ({compareCycleResultWithNext?.nextCycle?.startDate && formatDate(compareCycleResultWithNext.nextCycle.startDate)},
                                 d√†i {compareCycleResultWithNext.nextCycleLength} ng√†y)
                                 c√°ch chu k·ª≥ ƒë∆∞·ª£c nh·∫≠p:  {compareCycleResultWithNext.actualCycleLength.toFixed(0)} ng√†y.
                                <br />
                              </Typography>
                              )}

                              <Typography
                                sx={{
                                  color: '#f59e0b',
                                  fontSize: '0.97rem',
                                  marginTop: '2px',
                                  lineHeight: 2,
                                }}
                              >
                                H√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£ nh·∫≠p ƒë√∫ng th√¥ng tin v·ªÅ chu k·ª≥ kinh nguy·ªát c·ªßa m√¨nh tr∆∞·ªõc khi l∆∞u th√¥ng tin v√†o h·ªì s∆° ƒë·ªÉ d·ªØ li·ªáu ƒë∆∞·ª£c t√≠nh to√°n ch√≠nh x√°c h∆°n.
                              </Typography>
                            </div>
                          </Card>
                        )}
                        

                      </Box>

                      {/* Button actions */}
                      <Box sx={{ textAlign: 'center', marginTop: 3 }}>
                        <Box
                          sx={{
                            display: 'flex',
                            justifyContent: 'center',
                            marginBottom: '12px',
                            gap: '12px',
                            flexWrap: { xs: 'wrap', sm: 'nowrap' },
                          }}
                        >
                          <button
                            className={styles.addCycleButton}
                            onClick={() => {
                              setCalculationResult(null);
                              setShowForm(true);
                            }}
                          >
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              width="20"
                              height="20"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              style={{ marginRight: '8px' }}
                            >
                              <path d="M21 12a9 9 0 01-9 9"></path>
                              <path d="M3 12a9 9 0 009-9"></path>
                              <path d="M12 7l-3-3 3-3"></path>
                              <path d="M12 17l3 3-3 3"></path>
                            </svg>
                            T√≠nh to√°n l·∫°i
                          </button>
                          {isLoggedIn && (
                            <button
                              className={styles.saveButton}
                              onClick={handleSaveCycleToDatabase}
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="20"
                                height="20"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                strokeWidth="2"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                style={{ marginRight: '8px' }}
                              >
                                <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path>
                                <polyline points="17 21 17 13 7 13 7 21"></polyline>
                                <polyline points="7 3 7 8 15 8"></polyline>
                              </svg>
                              L∆∞u chu k·ª≥ v√†o h·ªì s∆°
                            </button>
                          )}
                        </Box>
                        <button
                          className={styles.resetButton}
                          onClick={handleClearCalculationResult}
                        >
                          ƒê√≥ng k·∫øt qu·∫£
                        </button>
                      </Box>

                      {/* L∆∞u √Ω */}
                      <Box className={styles.healthAdviceNote}>
                        <b>L∆∞u √Ω:</b> ƒê√¢y ch·ªâ l√† k·∫øt qu·∫£ t√≠nh to√°n d·ª± ƒëo√°n. K·∫øt
                        qu·∫£ th·ª±c t·∫ø c√≥ th·ªÉ kh√°c do nhi·ªÅu y·∫øu t·ªë ·∫£nh h∆∞·ªüng.
                        {isLoggedIn && (
                          <span>
                            {' '}
                            B·∫°n c√≥ th·ªÉ l∆∞u k·∫øt qu·∫£ t√≠nh to√°n n√†y v√†o h·ªì s∆° b·∫±ng
                            c√°ch b·∫•m n√∫t "L∆∞u chu k·ª≥ v√†o h·ªì s∆°".
                          </span>
                        )}
                        {!isLoggedIn && (
                          <span>
                            {' '}
                            ƒêƒÉng nh·∫≠p ƒë·ªÉ l∆∞u chu k·ª≥ v√†o h·ªì s∆° c√° nh√¢n c·ªßa b·∫°n.
                          </span>
                        )}
                      </Box>
                    </Card>
                  </Box>
                )}

                {/* Health Advice Section */}
                <Box className={styles.healthAdviceSection}>
                  <Card className={styles.healthAdviceCard}>
                    <Box className={styles.healthAdviceHeader}>
                      <Box className={styles.healthAdviceIconWrapper}>
                        <FavoriteBorderIcon
                          className={styles.healthAdviceIcon}
                        />
                      </Box>
                      <Box>
                        <Typography
                          variant="h6"
                          className={styles.healthAdviceTitle}
                        >
                          L·ªùi khuy√™n s·ª©c kh·ªèe
                        </Typography>
                        <Typography className={styles.healthAdviceSubtitle}>
                          D·ª±a tr√™n d·ªØ li·ªáu chu k·ª≥ c·ªßa b·∫°n
                        </Typography>
                      </Box>
                    </Box>

                    <Box>
                      {advice.map((item, index) => (
                        <Card
                          key={index}
                          className={`${styles.adviceCardRegular} ${styles[`adviceCard${item.color.charAt(0).toUpperCase() + item.color.slice(1)}`]}`}
                        >
                          <Box className={styles.adviceCardHeader}>
                            <Box className={styles.adviceCardIconRegular}>
                              {item.icon}
                            </Box>
                            <Box>
                              <Typography
                                className={styles.adviceCardTitleRegular}
                              >
                                {item.title}
                              </Typography>
                              <Typography
                                className={styles.adviceCardTextRegular}
                              >
                                {item.description}
                              </Typography>
                            </Box>
                          </Box>
                          <List className={styles.adviceCardList}>
                            {item.tips.map((tip, tipIndex) => (
                              <ListItem
                                key={tipIndex}
                                className={styles.adviceCardListItem}
                              >
                                {tip}
                              </ListItem>
                            ))}
                          </List>
                        </Card>
                      ))}
                    </Box>

                    {/* L∆∞u √Ω */}
                    <Box className={styles.healthAdviceNote}>
                      <b>L∆∞u √Ω:</b> Nh·ªØng l·ªùi khuy√™n n√†y ch·ªâ mang t√≠nh ch·∫•t tham
                      kh·∫£o. N·∫øu c√≥ b·∫•t th∆∞·ªùng ho·∫∑c lo l·∫Øng, h√£y tham kh·∫£o √Ω ki·∫øn
                      b√°c sƒ© chuy√™n khoa.
                    </Box>
                  </Card>
                </Box>
              </>
            )}
          </>
        ) : (
          <div className={styles.introduction}>
            {/* Header */}
            <div className={styles.header}>
              <div className="text-center">
                <h2 className={styles.headerTitle}>
                  L·ª£i √çch C·ªßa Vi·ªác Theo D√µi Chu K·ª≥ & ChƒÉm S√≥c B·∫£n Th√¢n
                </h2>
                <p className={styles.headerSubtitle}>
                  Hi·ªÉu r√µ c∆° th·ªÉ ƒë·ªÉ chƒÉm s√≥c b·∫£n th√¢n t·ªët h∆°n
                </p>
              </div>
            </div>

            <div className={styles.content}>
              {/* Benefits Grid */}
              <div className={styles.benefitsGrid}>
                {benefits.map((benefit, index) => (
                  <div key={index} className={styles.benefitCard}>
                    <div className="flex items-start space-x-3">
                      <div className={styles.benefitIconWrapper}>
                        {benefit.icon}
                      </div>
                      <div className="flex-1">
                        <h4 className={styles.benefitTitle}>{benefit.title}</h4>
                        <p className={styles.benefitDescription}>
                          {benefit.description}
                        </p>
                        {benefit.details.map((detail, detailIndex) => (
                          <div
                            key={detailIndex}
                            className={styles.benefitDetail}
                          >
                            <div className={styles.benefitBullet}></div>
                            <span>{detail}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Care Phases Section */}
              <div>
                <button
                  onClick={() => toggleSection('care')}
                  className={`${styles.sectionButton} ${styles.careButton}`}
                >
                  <h3 className={styles.sectionTitle}>
                    ChƒÉm S√≥c B·∫£n Th√¢n Theo T·ª´ng Giai ƒêo·∫°n
                  </h3>
                  <div
                    className={`${styles.chevronIcon} ${expandedSection === 'care' ? styles.expanded : ''}`}
                  >
                    {expandedSection === 'care' ? (
                      <ChevronUp className="h-5 w-5" />
                    ) : (
                      <ChevronDown className="h-5 w-5" />
                    )}
                  </div>
                </button>

                {expandedSection === 'care' && (
                  <div className={styles.careGrid}>
                    {carePhases.map((phase, index) => (
                      <div
                        key={index}
                        className={`${styles.carePhaseCard} ${styles[phase.color]}`}
                      >
                        <div className={styles.carePhaseHeader}>
                          <div className={styles.carePhaseIcon}>
                            {phase.icon}
                          </div>
                          <h4 className={styles.carePhaseTitle}>
                            {phase.phase}
                          </h4>
                        </div>
                        <ul className={styles.careTipsList}>
                          {phase.tips.map((tip, tipIndex) => (
                            <li key={tipIndex} className={styles.careTip}>
                              <div className={styles.tipBullet}></div>
                              <span>{tip}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Warning Signs Section */}
              <div>
                <button
                  onClick={() => toggleSection('warning')}
                  className={`${styles.sectionButton} ${styles.warningButton}`}
                >
                  <h3
                    className={`${styles.sectionTitle} flex items-center space-x-2`}
                  >
                    <AlertTriangle className="h-5 w-5 text-red-600" />
                    <span>Khi N√†o N√™n ƒêi Kh√°m?</span>
                  </h3>
                  <div
                    className={`${styles.chevronIcon} ${expandedSection === 'warning' ? styles.expanded : ''}`}
                  >
                    {expandedSection === 'warning' ? (
                      <ChevronUp className="h-5 w-5" />
                    ) : (
                      <ChevronDown className="h-5 w-5" />
                    )}
                  </div>
                </button>

                {expandedSection === 'warning' && (
                  <div className={styles.warningContent}>
                    <ul className={styles.warningList}>
                      {warningSignals.map((signal, index) => (
                        <li key={index} className={styles.warningItem}>
                          <AlertTriangle className={styles.warningIcon} />
                          <span>{signal}</span>
                        </li>
                      ))}
                    </ul>
                    <div className={styles.warningNote}>
                      <p className={styles.warningNoteText}>
                        <strong className={styles.warningNoteHighlight}>
                          L∆∞u √Ω:
                        </strong>{' '}
                        N·∫øu g·∫∑p b·∫•t k·ª≥ tri·ªáu ch·ª©ng n√†o ·ªü tr√™n, h√£y tham kh·∫£o √Ω
                        ki·∫øn b√°c sƒ© chuy√™n khoa ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† ƒëi·ªÅu tr·ªã k·ªãp
                        th·ªùi.
                      </p>
                    </div>
                  </div>
                )}
              </div>

              {/* Buttons */}
              <div className={styles.authButtons}>
                <button
                  className={styles.loginButton}
                  onClick={() => {
                    window.location.href = '/#/login';
                  }}
                >
                  ƒêƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng
                </button>
                <button
                  className={styles.refreshButton}
                  onClick={refreshAuthStatus}
                  disabled={isCheckingAuth}
                >
                  {isCheckingAuth
                    ? 'ƒêang ki·ªÉm tra...'
                    : 'Ki·ªÉm tra l·∫°i tr·∫°ng th√°i ƒëƒÉng nh·∫≠p'}
                </button>
              </div>
            </div>
          </div>
        )}
        
        {/* Modal chi ti·∫øt chu k·ª≥ */}
        {showCycleDetail && selectedCycleForDetail && (
          <Box
            sx={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: 'rgba(0, 0, 0, 0.5)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              zIndex: 9999,
              padding: '20px'
            }}
            onClick={handleCloseCycleDetail}
          >
            <Box
              sx={{
                backgroundColor: 'white',
                borderRadius: '16px',
                maxWidth: '600px',
                width: '100%',
                maxHeight: '80vh',
                overflow: 'auto',
                padding: '24px',
                boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
              }}
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                <Typography variant="h5" sx={{ fontWeight: '600', color: '#1f2937' }}>
                  Chi ti·∫øt chu k·ª≥ #{menstrualCycles.length - menstrualCycles.indexOf(selectedCycleForDetail)}
                </Typography>
                <button
                  onClick={handleCloseCycleDetail}
                  style={{
                    background: 'none',
                    border: 'none',
                    fontSize: '24px',
                    cursor: 'pointer',
                    color: '#6b7280',
                    padding: '4px'
                  }}
                >
                  √ó
                </button>
              </Box>

              {/* Th√¥ng tin c∆° b·∫£n */}
              <Box sx={{ mb: 3 }}>
                <Typography variant="h6" sx={{ mb: 2, color: '#374151', fontWeight: '600' }}>
                  üìÖ Th√¥ng tin c∆° b·∫£n
                </Typography>
                <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, gap: 2 }}>
                  <Box sx={{ p: 2, backgroundColor: '#f9fafb', borderRadius: '8px' }}>
                    <Typography sx={{ fontSize: '14px', color: '#6b7280', mb: 1 }}>Ng√†y b·∫Øt ƒë·∫ßu</Typography>
                    <Typography sx={{ fontWeight: '600', color: '#1f2937' }}>
                      {formatDate(selectedCycleForDetail.startDate)}
                    </Typography>
                  </Box>
                  <Box sx={{ p: 2, backgroundColor: '#f9fafb', borderRadius: '8px' }}>
                    <Typography sx={{ fontSize: '14px', color: '#6b7280', mb: 1 }}>S·ªë ng√†y h√†nh kinh</Typography>
                    <Typography sx={{ fontWeight: '600', color: '#1f2937' }}>
                      {selectedCycleForDetail.numberOfDays} ng√†y
                    </Typography>
                  </Box>
                  <Box sx={{ p: 2, backgroundColor: '#f9fafb', borderRadius: '8px' }}>
                    <Typography sx={{ fontSize: '14px', color: '#6b7280', mb: 1 }}>ƒê·ªô d√†i chu k·ª≥</Typography>
                    <Typography sx={{ fontWeight: '600', color: '#1f2937' }}>
                      {selectedCycleForDetail.cycleLength} ng√†y
                    </Typography>
                  </Box>
                  <Box sx={{ p: 2, backgroundColor: '#f9fafb', borderRadius: '8px' }}>
                    <Typography sx={{ fontSize: '14px', color: '#6b7280', mb: 1 }}>Ng√†y r·ª•ng tr·ª©ng d·ª± ki·∫øn</Typography>
                    <Typography sx={{ fontWeight: '600', color: '#1f2937' }}>
                      {formatDate(selectedCycleForDetail.ovulationDate)}
                    </Typography>
                  </Box>
                </Box>
              </Box>

              {/* Ph√¢n t√≠ch chi ti·∫øt */}
              <Box sx={{ mb: 3 }}>
                <Typography variant="h6" sx={{ mb: 2, color: '#374151', fontWeight: '600' }}>
                  üîç Ph√¢n t√≠ch chi ti·∫øt
                </Typography>
                <Box sx={{ display: 'grid', gap: 2 }}>
                  {/* ƒê√°nh gi√° ƒë·ªô d√†i chu k·ª≥ */}
                  <Box sx={{ p: 3, border: '1px solid #e5e7eb', borderRadius: '8px' }}>
                    <Typography sx={{ fontWeight: '600', mb: 1, color: '#374151' }}>
                      ƒê√°nh gi√° ƒë·ªô d√†i chu k·ª≥
                    </Typography>
                    <Typography sx={{ fontSize: '14px', color: '#6b7280', mb: 2 }}>
                      {selectedCycleForDetail.cycleLength < 21 
                        ? 'üî¥ Chu k·ª≥ ng·∫Øn (d∆∞·ªõi 21 ng√†y)' 
                        : selectedCycleForDetail.cycleLength > 35 
                          ? 'üî¥ Chu k·ª≥ d√†i (tr√™n 35 ng√†y)' 
                          : 'üü¢ Chu k·ª≥ b√¨nh th∆∞·ªùng (21-35 ng√†y)'}
                    </Typography>
                    {selectedCycleForDetail.cycleLength < 21 && (
                      <Typography sx={{ fontSize: '13px', color: '#ef4444', fontStyle: 'italic' }}>
                        Chu k·ª≥ ng·∫Øn c√≥ th·ªÉ do stress, t·∫≠p th·ªÉ d·ª•c qu√° m·ª©c, ho·∫∑c thi·∫øu h·ª•t dinh d∆∞·ª°ng.
                      </Typography>
                    )}
                    {selectedCycleForDetail.cycleLength > 35 && (
                      <Typography sx={{ fontSize: '13px', color: '#ef4444', fontStyle: 'italic' }}>
                        Chu k·ª≥ d√†i c√≥ th·ªÉ do PCOS, r·ªëi lo·∫°n tuy·∫øn gi√°p, ho·∫∑c stress.
                      </Typography>
                    )}
                    {selectedCycleForDetail.cycleLength >= 21 && selectedCycleForDetail.cycleLength <= 35 && (
                      <Typography sx={{ fontSize: '13px', color: '#16a34a', fontStyle: 'italic' }}>
                        ƒê·ªô d√†i chu k·ª≥ trong kho·∫£ng b√¨nh th∆∞·ªùng, ƒëi·ªÅu n√†y r·∫•t t·ªët!
                      </Typography>
                    )}
                  </Box>

                  {/* ƒê√°nh gi√° k·ª≥ kinh */}
                  <Box sx={{ p: 3, border: '1px solid #e5e7eb', borderRadius: '8px' }}>
                    <Typography sx={{ fontWeight: '600', mb: 1, color: '#374151' }}>
                      ƒê√°nh gi√° k·ª≥ kinh
                    </Typography>
                    <Typography sx={{ fontSize: '14px', color: '#6b7280', mb: 2 }}>
                      {selectedCycleForDetail.numberOfDays < 3 
                        ? 'üî¥ K·ª≥ kinh ng·∫Øn (d∆∞·ªõi 3 ng√†y)' 
                        : selectedCycleForDetail.numberOfDays > 7 
                          ? 'üî¥ K·ª≥ kinh d√†i (tr√™n 7 ng√†y)' 
                          : 'üü¢ K·ª≥ kinh b√¨nh th∆∞·ªùng (3-7 ng√†y)'}
                    </Typography>
                    {selectedCycleForDetail.numberOfDays < 3 && (
                      <Typography sx={{ fontSize: '13px', color: '#ef4444', fontStyle: 'italic' }}>
                        K·ª≥ kinh ng·∫Øn c√≥ th·ªÉ do r·ªëi lo·∫°n hormone ho·∫∑c stress.
                      </Typography>
                    )}
                    {selectedCycleForDetail.numberOfDays > 7 && (
                      <Typography sx={{ fontSize: '13px', color: '#ef4444', fontStyle: 'italic' }}>
                        K·ª≥ kinh d√†i c√≥ th·ªÉ do u x∆° t·ª≠ cung, polyp, ho·∫∑c r·ªëi lo·∫°n ƒë√¥ng m√°u.
                      </Typography>
                    )}
                    {selectedCycleForDetail.numberOfDays >= 3 && selectedCycleForDetail.numberOfDays <= 7 && (
                      <Typography sx={{ fontSize: '13px', color: '#16a34a', fontStyle: 'italic' }}>
                        ƒê·ªô d√†i k·ª≥ kinh trong kho·∫£ng b√¨nh th∆∞·ªùng.
                      </Typography>
                    )}
                  </Box>
                </Box>
              </Box>

              {/* Th·ªùi gian quan tr·ªçng */}
              <Box sx={{ mb: 3 }}>
                <Typography variant="h6" sx={{ mb: 2, color: '#374151', fontWeight: '600' }}>
                  ‚è∞ Th·ªùi gian quan tr·ªçng trong chu k·ª≥ n√†y
                </Typography>
                <Box sx={{ display: 'grid', gap: 2 }}>
                  <Box sx={{ p: 3, backgroundColor: '#fef3c7', borderRadius: '8px', border: '1px solid #fbbf24' }}>
                    <Typography sx={{ fontWeight: '600', mb: 1, color: '#92400e' }}>
                      ü•ö Th·ªùi k·ª≥ r·ª•ng tr·ª©ng
                    </Typography>
                    <Typography sx={{ fontSize: '14px', color: '#92400e' }}>
                      Ng√†y {formatDate(selectedCycleForDetail.ovulationDate)} (kho·∫£ng ng√†y th·ª© {selectedCycleForDetail.cycleLength - 14} c·ªßa chu k·ª≥)
                    </Typography>
                  </Box>
                  
                  <Box sx={{ p: 3, backgroundColor: '#fce7f3', borderRadius: '8px', border: '1px solid #f472b6' }}>
                    <Typography sx={{ fontWeight: '600', mb: 1, color: '#be185d' }}>
                      üíï Th·ªùi k·ª≥ th·ª• thai
                    </Typography>
                    <Typography sx={{ fontSize: '14px', color: '#be185d' }}>
                      T·ª´ 5 ng√†y tr∆∞·ªõc ƒë·∫øn 1 ng√†y sau ng√†y r·ª•ng tr·ª©ng (kh·∫£ nƒÉng th·ª• thai cao nh·∫•t)
                    </Typography>
                  </Box>
                </Box>
              </Box>

              {/* L∆∞u √Ω */}
              <Box sx={{ p: 3, backgroundColor: '#f0f9ff', borderRadius: '8px', border: '1px solid #0ea5e9' }}>
                <Typography sx={{ fontWeight: '600', mb: 1, color: '#0c4a6e', fontSize: '14px' }}>
                  üí° L∆∞u √Ω quan tr·ªçng
                </Typography>
                <Typography sx={{ fontSize: '13px', color: '#0c4a6e', lineHeight: 1.5 }}>
                  Th√¥ng tin n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. M·ªói ng∆∞·ªùi c√≥ chu k·ª≥ kinh nguy·ªát kh√°c nhau v√† c√≥ th·ªÉ thay ƒë·ªïi theo th·ªùi gian.
                  N·∫øu c√≥ b·∫•t k·ª≥ lo ng·∫°i n√†o, h√£y tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa.
                </Typography>
              </Box>

              {/* Action buttons */}
              <Box sx={{ display: 'flex', gap: 2, mt: 3, justifyContent: 'flex-end' }}>
                <button
                  onClick={() => {
                    handleCloseCycleDetail();
                    handleEditCycle(selectedCycleForDetail);
                  }}
                  style={{
                    backgroundColor: '#3b82f6',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    padding: '8px 16px',
                    fontSize: '14px',
                    fontWeight: '500',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px'
                  }}
                >
                  <Edit style={{ width: '16px', height: '16px' }} />
                  Ch·ªânh s·ª≠a
                </button>
                <button
                  onClick={handleCloseCycleDetail}
                  style={{
                    backgroundColor: '#6b7280',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    padding: '8px 16px',
                    fontSize: '14px',
                    fontWeight: '500',
                    cursor: 'pointer'
                  }}
                >
                  ƒê√≥ng
                </button>
              </Box>
            </Box>
          </Box>
        )}

        {/* Modal Calendar */}
        {showCalendarModal && selectedCycleForCalendar && (
          <MenstrualCycleCalendar
            cycle={selectedCycleForCalendar}
            onClose={handleCloseCalendarModal}
          />
        )}
      </Container>
    </LocalizationProvider>
  );
};
export default OvulationPage;
