import { Container, Box, Typography, Card, Grid } from '@mui/material';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { vi } from 'date-fns/locale';
import ovulationService from '../services/ovulationService';
import FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';
import React, { useState } from 'react';
import { useEffect } from 'react';
import { CheckCircle } from '@mui/icons-material';
import 'chart.js/auto';
import { List, ListItem } from '@mui/material';
import styles from '../styles/OvulationPage.module.css';
import {
  Heart,
  Calendar,
  TrendingUp,
  Brain,
  Stethoscope,
  ChevronDown,
  ChevronUp,
  Clock,
  Shield,
  AlertTriangle,
  AlertCircle,
  Activity,
  Zap,
  Lightbulb,
  Edit,
  Trash2,
  Bell,
  BellOff,
  Pause,
} from 'lucide-react';
import MenstrualCycleForm from '../components/MenstrualCycle/MenstrualCycleForm.js';

// const defaultStats = {
//   averageCycleLength: 28,
//   totalCycles: 10,
//   averagePeriodLength: 5,
//   nextPredictedPeriod: '2025-07-01',
//   consistency: 'irregular',
// };

const OvulationPage = ({ stats }) => {
  const [isLoggedIn, setIsLoggedIn] = React.useState(false);

  React.useEffect(() => {
    const checkLogin = async () => {
      const userData = await ovulationService.getCurrentUser();
      if (userData) {
        setIsLoggedIn(true);
      } else {
        setIsLoggedIn(false);
      }
    };

    checkLogin();
    window.addEventListener('storage', checkLogin);
    return () => {
      window.removeEventListener('storage', checkLogin);
    };
  }, []);

  // T·∫•t c·∫£ chu k·ª≥ kinh nguy·ªát
  const [menstrualCycles, setMenstrualCycles] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // H√†m fetch d·ªØ li·ªáu chu k·ª≥ kinh nguy·ªát
  const fetchMenstrualCycles = async (showRefreshLoader = false) => {
    try {
      if (showRefreshLoader) {
        setIsRefetching(true);
      } else {
        setIsLoading(true);
      }

      const response = await ovulationService.getAllMenstrualCycles();

      console.log('üîç Raw response t·ª´ API:', response);

      // Ki·ªÉm tra nhi·ªÅu tr∆∞·ªùng h·ª£p c√≥ th·ªÉ x·∫£y ra
      let data = response;

      // N·∫øu response c√≥ property data
      if (response && response.data) {
        data = response.data;
      }

      // N·∫øu response c√≥ property result ho·∫∑c items
      if (response && response.result) {
        data = response.result;
      }

      if (response && response.items) {
        data = response.items;
      }

      console.log('üîç Data sau khi extract:', data);

      // Ki·ªÉm tra data c√≥ ph·∫£i l√† m·∫£ng kh√¥ng
      if (Array.isArray(data)) {
        // Convert date arrays to Date objects
        const processedData = data.map((cycle) => ({
          ...cycle,
          startDate: new Date(
            cycle.startDate[0],
            cycle.startDate[1] - 1,
            cycle.startDate[2]
          ),
          ovulationDate: new Date(
            cycle.ovulationDate[0],
            cycle.ovulationDate[1] - 1,
            cycle.ovulationDate[2]
          ),
        }));

        setMenstrualCycles(processedData);
        console.log('ü©∏ Data ƒë√£ x·ª≠ l√Ω:', processedData);
        return processedData;
      } else {
        console.warn('‚ùå Data kh√¥ng ph·∫£i l√† m·∫£ng:', data);
        console.warn('‚ùå Type c·ªßa data:', typeof data);
        setMenstrualCycles([]);
        return [];
      }
    } catch (err) {
      console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu chu k·ª≥:', err);
      setMenstrualCycles([]);
      return [];
    } finally {
      setIsLoading(false);
      setIsRefetching(false);
    }
  };

  useEffect(() => {
    if (isLoggedIn) {
      fetchMenstrualCycles();
    }
  }, [isLoggedIn]);

  // T·ªâ l·ªá mang thai
  const [pregnancyProb, setPregnancyProb] = useState([]);
  useEffect(() => {
    const fetchData = async () => {
      try {
        const data =
          await ovulationService.getAllMenstrualCyclesWithPregnancyProb();
        setPregnancyProb(data);
      } catch (err) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ªâ l·ªá mang thai:', err);
      }
    };
    fetchData();
  }, []);

  // ƒê·ªô d√†i chu k·ª≥ trung b√¨nh
  const getAverageCycleLength = (menstrualCycles) => {
    if (!Array.isArray(menstrualCycles) || menstrualCycles.length === 0)
      return null;

    try {
      const total = menstrualCycles.reduce(
        (sum, cycle) => sum + (cycle.cycleLength || 0),
        0
      );
      const average = total / menstrualCycles.length;
      return Math.round(average);
    } catch (error) {
      console.error('L·ªói khi t√≠nh average cycle length:', error);
      return null;
    }
  };

  const averageLengthCycles = getAverageCycleLength(menstrualCycles);

  // ƒê·ªô d√†i k·ª≥ kinh trung b√¨nh
  const getAveragePeriodLength = (menstrualCycles) => {
    if (!Array.isArray(menstrualCycles) || menstrualCycles.length === 0)
      return null;

    try {
      const total = menstrualCycles.reduce(
        (sum, cycle) => sum + (cycle.numberOfDays || 0),
        0
      );
      const average = total / menstrualCycles.length;
      return Math.round(average);
    } catch (error) {
      console.error('L·ªói khi t√≠nh average period length:', error);
      return null;
    }
  };

  const averagePeriodLength = getAveragePeriodLength(menstrualCycles);

  // Chu k·ª≥ kinh nguy·ªát ti·∫øp theo
  const getNextCycle = (menstrualCycles) => {
    if (!Array.isArray(menstrualCycles) || menstrualCycles.length === 0)
      return null;

    try {
      const lastCycle = menstrualCycles[0];
      const cycleLength = lastCycle.cycleLength;

      let nextCycleStart = new Date(lastCycle.startDate);
      const today = new Date();

      // L·∫∑p cho ƒë·∫øn khi nextCycleStart v∆∞·ª£t qua h√¥m nay
      while (nextCycleStart <= today) {
        nextCycleStart.setDate(nextCycleStart.getDate() + cycleLength);
      }

      return nextCycleStart;
    } catch (error) {
      console.error('L·ªói khi t√≠nh to√°n chu k·ª≥ ti·∫øp theo:', error);
      return null;
    }
  };

  const nextCycle = getNextCycle(menstrualCycles);

  // T√≠nh ƒë·ªô ƒë·ªìng ƒë·ªÅu
  // const getConsistency = (menstrualCycles) => {
  //   if (!menstrualCycles.length) return null;

  //   let consistency = 'unknown';
  //   if (menstrualCycles.length >= 3) {
  //     const variance = menstrualCycles.reduce((sum, length) => sum + Math.pow(length - averagePeriodLength, 2), 0) / menstrualCycles.length;
  //     consistency = variance <= 4 ? 'regular' : 'irregular';
  //   }

  //   return consistency;
  // };
  const getConsistency = (menstrualCycles) => {
    console.log('üîç [getConsistency] Input data:', menstrualCycles);

    if (!Array.isArray(menstrualCycles) || menstrualCycles.length < 3) {
      console.log(
        '‚ùå [getConsistency] Kh√¥ng ƒë·ªß d·ªØ li·ªáu, c·∫ßn √≠t nh·∫•t 3 chu k·ª≥. Hi·ªán c√≥:',
        menstrualCycles?.length || 0
      );
      return 'unknown';
    }

    try {
      // L·∫•y 3 chu k·ª≥ g·∫ßn nh·∫•t ƒë·ªÉ ƒë√°nh gi√°
      const recentCycles = menstrualCycles.slice(0, 3);
      console.log('üìä [getConsistency] 3 chu k·ª≥ g·∫ßn nh·∫•t:', recentCycles);

      // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu
      for (const cycle of recentCycles) {
        console.log('üîç [getConsistency] Ki·ªÉm tra chu k·ª≥:', {
          numberOfDays: cycle.numberOfDays,
          cycleLength: cycle.cycleLength,
          startDate: cycle.startDate,
        });

        // Ki·ªÉm tra s·ªë ng√†y kinh nguy·ªát (2-7 ng√†y l√† b√¨nh th∆∞·ªùng)
        if (
          !cycle.numberOfDays ||
          cycle.numberOfDays <= 2 ||
          cycle.numberOfDays > 7
        ) {
          console.log(
            '‚ùå [getConsistency] Chu k·ª≥ kh√¥ng ƒë·ªÅu - s·ªë ng√†y kinh kh√¥ng h·ª£p l·ªá:',
            cycle.numberOfDays
          );
          return 'irregular';
        }

        // Ki·ªÉm tra ƒë·ªô d√†i chu k·ª≥ c√≥ t·ªìn t·∫°i
        if (!cycle.cycleLength || typeof cycle.cycleLength !== 'number') {
          console.log(
            '‚ùå [getConsistency] D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß - thi·∫øu cycleLength:',
            cycle.cycleLength
          );
          return 'unknown';
        }
      }

      // Ki·ªÉm tra s·ª± ƒë·ªìng ƒë·ªÅu c·ªßa ƒë·ªô d√†i chu k·ª≥
      const cycleLengths = recentCycles.map((cycle) => cycle.cycleLength);
      console.log('üìè [getConsistency] ƒê·ªô d√†i c√°c chu k·ª≥:', cycleLengths);

      let maxDifference = 0;

      for (let i = 0; i < cycleLengths.length - 1; i++) {
        const difference = Math.abs(cycleLengths[i] - cycleLengths[i + 1]);
        console.log(
          `üî¢ [getConsistency] So s√°nh chu k·ª≥ ${i} v√† ${i + 1}: ${cycleLengths[i]} vs ${cycleLengths[i + 1]} = ch√™nh l·ªách ${difference} ng√†y`
        );
        if (difference > maxDifference) {
          maxDifference = difference;
        }
      }

      console.log(
        'üìà [getConsistency] Ch√™nh l·ªách t·ªëi ƒëa:',
        maxDifference,
        'ng√†y'
      );

      // N·∫øu ch√™nh l·ªách t·ªëi ƒëa > 7 ng√†y th√¨ ƒë∆∞·ª£c coi l√† kh√¥ng ƒë·ªÅu
      const result = maxDifference <= 7 ? 'regular' : 'irregular';
      console.log('‚úÖ [getConsistency] K·∫øt qu·∫£ cu·ªëi c√πng:', result);

      return result;
    } catch (error) {
      console.error('üí• [getConsistency] L·ªói khi t√≠nh consistency:', error);
      return 'unknown';
    }
  };

  // H√†m l·∫•y th√¥ng tin tr·∫°ng th√°i nh·∫Øc nh·ªü
  const getReminderStatusInfo = (cycle) => {
    if (!cycle.reminderEnabled) {
      return {
        icon: <BellOff className={styles.reminderIcon} />,
        text: 'Kh√¥ng c√≥ nh·∫Øc nh·ªü',
        className: styles.reminderDisabled,
      };
    }

    const status = cycle.reminderStatus || 'active';
    switch (status) {
      case 'active':
        return {
          icon: <Bell className={styles.reminderIcon} />,
          text: 'Nh·∫Øc nh·ªü ƒëang ho·∫°t ƒë·ªông',
          className: styles.reminderActive,
        };
      case 'paused':
        return {
          icon: <Pause className={styles.reminderIcon} />,
          text: 'Nh·∫Øc nh·ªü t·∫°m d·ª´ng',
          className: styles.reminderPaused,
        };
      case 'disabled':
        return {
          icon: <BellOff className={styles.reminderIcon} />,
          text: 'Nh·∫Øc nh·ªü ƒë√£ t·∫Øt',
          className: styles.reminderDisabled,
        };
      default:
        return {
          icon: <Bell className={styles.reminderIcon} />,
          text: 'Nh·∫Øc nh·ªü ƒëang ho·∫°t ƒë·ªông',
          className: styles.reminderActive,
        };
    }
  };

  const consistency = getConsistency(menstrualCycles);
  console.log('üéØ [Main] K·∫øt qu·∫£ consistency ƒë√£ t√≠nh:', consistency);

  // Data cho bi·ªÉu ƒë·ªì
  const chartData = {
    labels: ['Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5'],
    datasets: [
      {
        label: 'Chu k·ª≥ th·ª±c t·∫ø',
        data: [28, 29, 28, 28, 28],
        borderColor: '#E91E63',
        backgroundColor: '#E91E63',
        tension: 0.4,
        pointRadius: 4,
        pointBackgroundColor: '#E91E63',
      },
      {
        label: 'Trung b√¨nh',
        data: [28, 28, 28, 28, 28],
        borderColor: '#9C27B0',
        backgroundColor: '#9C27B0',
        borderDash: [5, 5],
        tension: 0.4,
        pointRadius: 4,
        pointBackgroundColor: '#9C27B0',
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
    },
    scales: {
      y: {
        beginAtZero: false,
        min: 20,
        max: 35,
        ticks: {
          stepSize: 2,
          color: '#666',
          font: {
            size: 12,
          },
        },
        grid: {
          color: 'rgba(0,0,0,0.05)',
          drawBorder: false,
        },
      },
      x: {
        grid: {
          display: false,
        },
        ticks: {
          color: '#666',
          font: {
            size: 12,
          },
        },
      },
    },
  };

  const [expandedSection, setExpandedSection] = useState(null);
  const [showForm, setShowForm] = useState(false);
  const [calculationResult, setCalculationResult] = useState(null);
  const [isRefetching, setIsRefetching] = useState(false);

  // Pagination states
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  // Edit cycle states
  const [editingCycle, setEditingCycle] = useState(null);
  const [showEditForm, setShowEditForm] = useState(false);

  const toggleSection = (section) => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  const benefits = [
    {
      icon: <Heart className="h-6 w-6 text-pink-600" />,
      title: 'Hi·ªÉu r√µ c∆° th·ªÉ',
      description: 'Bi·∫øt ƒë∆∞·ª£c chu k·ª≥ kinh nguy·ªát c√≥ ƒë·ªÅu kh√¥ng',
      details: ['Theo d√µi tri·ªáu ch·ª©ng nh∆∞ ƒëau b·ª•ng, n·ªïi m·ª•n, m·ªát m·ªèi‚Ä¶'],
    },
    {
      icon: <Calendar className="h-6 w-6 text-purple-600" />,
      title: 'L·∫≠p k·∫ø ho·∫°ch t·ªët h∆°n',
      description: 'D·ªÖ d√†ng s·∫Øp x·∫øp c√¥ng vi·ªác, du l·ªãch, v·∫≠n ƒë·ªông th·ªÉ thao',
      details: ['Tr√°nh r∆°i v√†o t√¨nh hu·ªëng b·∫•t ng·ªù do kinh ƒë·∫øn ƒë·ªôt ng·ªôt'],
    },
    {
      icon: <TrendingUp className="h-6 w-6 text-indigo-600" />,
      title: 'C·∫£i thi·ªán s·ª©c kh·ªèe sinh s·∫£n',
      description:
        'D·ª± ƒëo√°n th·ªùi ƒëi·ªÉm r·ª•ng tr·ª©ng (h·ªØu √≠ch khi tr√°nh thai ho·∫∑c mong mu·ªën c√≥ con)',
      details: ['Ph√°t hi·ªán s·ªõm d·∫•u hi·ªáu r·ªëi lo·∫°n n·ªôi ti·∫øt'],
    },
    {
      icon: <Brain className="h-6 w-6 text-green-600" />,
      title: 'TƒÉng c∆∞·ªùng s·ª©c kh·ªèe tinh th·∫ßn',
      description: 'Nh·∫≠n bi·∫øt m·ªëi li√™n h·ªá gi·ªØa t√¢m tr·∫°ng v√† chu k·ª≥',
      details: [
        'Ch·ªß ƒë·ªông chƒÉm s√≥c b·∫£n th√¢n ƒë√∫ng th·ªùi ƒëi·ªÉm (ngh·ªâ ng∆°i, gi·∫£m stress)',
      ],
    },
    {
      icon: <Stethoscope className="h-6 w-6 text-blue-600" />,
      title: 'H·ªó tr·ª£ b√°c sƒ© khi c·∫ßn',
      description: 'Ghi ch√©p ƒë·∫ßy ƒë·ªß gi√∫p b√°c sƒ© d·ªÖ ch·∫©n ƒëo√°n n·∫øu c√≥ b·∫•t th∆∞·ªùng',
      details: ['Ti·∫øt ki·ªám th·ªùi gian v√† ƒëi·ªÅu tr·ªã hi·ªáu qu·∫£ h∆°n'],
    },
  ];

  const carePhases = [
    {
      phase: 'Tr∆∞·ªõc k·ª≥ kinh',
      icon: <Clock className="h-5 w-5 text-orange-600" />,
      tips: [
        'ƒÇn u·ªëng l√†nh m·∫°nh, tr√°nh ƒë∆∞·ªùng & caffeine',
        'V·∫≠n ƒë·ªông nh·∫π nh√†ng, ng·ªß ƒë·ªß gi·∫•c',
      ],
      color: 'orange',
    },
    {
      phase: 'Trong k·ª≥ kinh',
      icon: <Shield className="h-5 w-5 text-red-600" />,
      tips: [
        'Thay bƒÉng v·ªá sinh 4‚Äì6 ti·∫øng/l·∫ßn',
        'ƒÇn th·ª±c ph·∫©m gi√†u s·∫Øt (rau xanh, th·ªãt ƒë·ªè)',
        'D√πng t√∫i ch∆∞·ªùm ·∫•m ho·∫∑c thu·ªëc gi·∫£m ƒëau n·∫øu c·∫ßn',
      ],
      color: 'red',
    },
    {
      phase: 'Sau k·ª≥ kinh',
      icon: <CheckCircle className="h-5 w-5 text-green-600" />,
      tips: [
        'T·∫≠p th·ªÉ d·ª•c nh·∫π, b·ªï sung dinh d∆∞·ª°ng',
        'Theo d√µi v√† ghi nh·∫≠n b·∫•t th∆∞·ªùng',
      ],
      color: 'green',
    },
  ];

  const warningSignals = [
    'Kinh qu√° nhi·ªÅu, k√©o d√†i >7 ng√†y',
    'ƒêau b·ª•ng d·ªØ d·ªôi, tr·ªÖ kinh th∆∞·ªùng xuy√™n',
    'Kh√≠ h∆∞ c√≥ m√πi l·∫° ho·∫∑c m√†u b·∫•t th∆∞·ªùng',
  ];

  const getConsistencyClass = (consistency) => {
    switch (consistency) {
      case 'regular':
        return styles.regular;
      case 'irregular':
        return styles.irregular;
      default:
        return styles.unknown;
    }
  };

  const getConsistencyText = (consistency) => {
    switch (consistency) {
      case 'regular':
        return 'ƒê·ªÅu ƒë·∫∑n';
      case 'irregular':
        return 'Kh√¥ng ƒë·ªÅu';
      default:
        return 'Ch∆∞a ƒë·ªß d·ªØ li·ªáu';
    }
  };

  const formatDate = (dateInput) => {
    // Ki·ªÉm tra null/undefined tr∆∞·ªõc
    if (!dateInput) {
      return 'Kh√¥ng c√≥ d·ªØ li·ªáu';
    }

    let date;

    try {
      if (Array.isArray(dateInput)) {
        // Convert from [year, month, day] format
        date = new Date(dateInput[0], dateInput[1] - 1, dateInput[2]);
      } else if (typeof dateInput === 'string') {
        date = new Date(dateInput);
      } else if (dateInput instanceof Date) {
        date = dateInput;
      } else {
        // N·∫øu kh√¥ng ph·∫£i c√°c ki·ªÉu tr√™n, th·ª≠ convert
        date = new Date(dateInput);
      }

      // Ki·ªÉm tra date c√≥ h·ª£p l·ªá kh√¥ng
      if (isNaN(date.getTime())) {
        return 'Ng√†y kh√¥ng h·ª£p l·ªá';
      }

      return date.toLocaleDateString('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
      });
    } catch (error) {
      console.error('L·ªói format date:', error, 'Input:', dateInput);
      return 'L·ªói ƒë·ªãnh d·∫°ng ng√†y';
    }
  };

  const dashboardCards = [
    {
      icon: <Calendar className={`${styles.icon} ${styles.pink}`} />,
      iconWrapper: `${styles.iconWrapper} ${styles.pink}`,
      label: 'Chu k·ª≥ trung b√¨nh',
      mainValue: averageLengthCycles
        ? `${averageLengthCycles} ng√†y`
        : 'Kh√¥ng c√≥ d·ªØ li·ªáu',
      subValue: menstrualCycles.length
        ? `${menstrualCycles.length} chu k·ª≥ ƒë√£ ghi nh·∫≠n`
        : '0 chu k·ª≥ ƒë√£ ghi nh·∫≠n',
      id: 'average-cycle',
    },
    {
      icon: <Clock className={`${styles.icon} ${styles.purple}`} />,
      iconWrapper: `${styles.iconWrapper} ${styles.purple}`,
      label: 'K·ª≥ kinh trung b√¨nh',
      mainValue: averagePeriodLength
        ? `${averagePeriodLength} ng√†y`
        : 'Kh√¥ng c√≥ d·ªØ li·ªáu',
      subValue: 'ƒê·ªô d√†i k·ª≥ kinh',
      id: 'average-period',
    },
    {
      icon: <TrendingUp className={`${styles.icon} ${styles.indigo}`} />,
      iconWrapper: `${styles.iconWrapper} ${styles.indigo}`,
      label: 'D·ª± ƒëo√°n k·ª≥ t·ªõi',
      mainValue: nextCycle ? formatDate(nextCycle) : 'Kh√¥ng c√≥ d·ªØ li·ªáu',
      subValue: 'Ng√†y d·ª± ki·∫øn',
      id: 'next-prediction',
      isSpecial: true,
    },
    {
      icon: <AlertCircle className={`${styles.icon} ${styles.green}`} />,
      iconWrapper: `${styles.iconWrapper} ${styles.green}`,
      label: 'T√≠nh ƒë·ªÅu ƒë·∫∑n',
      mainValue: null,
      subValue: 'ƒê√°nh gi√° chu k·ª≥',
      id: 'consistency',
      customContent: (
        <div className="mb-2">
          <span
            className={`${styles.consistencyBadge} ${getConsistencyClass(consistency)}`}
          >
            {getConsistencyText(consistency)}
          </span>
        </div>
      ),
    },
  ];

  const getAdvice = () => {
    const advice = [];

    if (consistency === 'regular') {
      advice.push({
        icon: <Heart className="h-6 w-6 text-green-600" />,
        title: 'Chu k·ª≥ ƒë·ªÅu ƒë·∫∑n',
        description:
          'Chu k·ª≥ c·ªßa b·∫°n r·∫•t ƒë·ªÅu ƒë·∫∑n! H√£y duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh hi·ªán t·∫°i.',
        tips: [
          'Ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng c√¢n b·∫±ng',
          'T·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n',
          'Ng·ªß ƒë·ªß 7-8 ti·∫øng m·ªói ng√†y',
        ],
        color: 'green',
      });
    } else if (consistency === 'irregular') {
      advice.push({
        icon: <Activity className="h-6 w-6 text-yellow-600" />,
        title: 'Chu k·ª≥ kh√¥ng ƒë·ªÅu',
        description:
          'Chu k·ª≥ c√≥ th·ªÉ b·ªã ·∫£nh h∆∞·ªüng b·ªüi stress, thay ƒë·ªïi c√¢n n·∫∑ng ho·∫∑c l·ªëi s·ªëng.',
        tips: [
          'Gi·∫£m stress th√¥ng qua yoga ho·∫∑c thi·ªÅn',
          'Duy tr√¨ c√¢n n·∫∑ng ·ªïn ƒë·ªãnh',
          'Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© n·∫øu c·∫ßn',
        ],
        color: 'yellow',
      });
    }

    if (
      getAverageCycleLength(menstrualCycles) < 21 &&
      getAverageCycleLength(menstrualCycles) !== null
    ) {
      advice.push({
        icon: <Zap className="h-6 w-6 text-red-600" />,
        title: 'Chu k·ª≥ ng·∫Øn',
        description: 'Chu k·ª≥ ng·∫Øn h∆°n 21 ng√†y c√≥ th·ªÉ c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra y t·∫ø.',
        tips: [
          'Theo d√µi k·ªπ h∆°n c√°c tri·ªáu ch·ª©ng',
          'Ghi ch√∫ v·ªÅ stress v√† thay ƒë·ªïi l·ªëi s·ªëng',
          'N√™n thƒÉm kh√°m b√°c sƒ©',
        ],
        color: 'red',
      });
    } else if (getAverageCycleLength(menstrualCycles) > 35) {
      advice.push({
        icon: <Lightbulb className="h-6 w-6 text-blue-600" />,
        title: 'Chu k·ª≥ d√†i',
        description:
          'Chu k·ª≥ d√†i h∆°n 35 ng√†y c√≥ th·ªÉ do nhi·ªÅu nguy√™n nh√¢n kh√°c nhau.',
        tips: [
          'Ki·ªÉm tra hormone n·∫øu c√≥ th·ªÉ',
          'Duy tr√¨ ch·∫ø ƒë·ªô ƒÉn gi√†u dinh d∆∞·ª°ng',
          'Tham kh·∫£o chuy√™n gia s·ª©c kh·ªèe',
        ],
        color: 'blue',
      });
    }

    // General advice
    advice.push({
      icon: <Heart className="h-6 w-6 text-pink-600" />,
      title: 'L·ªùi khuy√™n chung',
      description: 'Nh·ªØng th√≥i quen t·ªët ƒë·ªÉ duy tr√¨ s·ª©c kh·ªèe sinh s·∫£n.',
      tips: [
        'U·ªëng ƒë·ªß 2-3 l√≠t n∆∞·ªõc m·ªói ng√†y',
        'ƒÇn nhi·ªÅu rau xanh v√† tr√°i c√¢y',
        'T·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng trong k·ª≥ kinh',
        'Theo d√µi v√† ghi ch√©p ƒë·ªÅu ƒë·∫∑n',
      ],
      color: 'pink',
    });

    return advice;
  };

  const advice = getAdvice();

  // Pagination logic
  const sortedCycles = menstrualCycles.sort(
    (a, b) => new Date(b.startDate) - new Date(a.startDate)
  );
  const totalPages = Math.ceil(sortedCycles.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentCycles = sortedCycles.slice(startIndex, endIndex);

  const handlePageChange = (page) => {
    setCurrentPage(page);
    // Scroll to cycle list section
    setTimeout(() => {
      const cycleListElement = document.querySelector(
        '[data-section="cycle-list"]'
      );
      if (cycleListElement) {
        cycleListElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }, 100);
  };

  // Reset pagination when cycles change
  React.useEffect(() => {
    if (currentPage > totalPages && totalPages > 0) {
      setCurrentPage(1);
    }
  }, [menstrualCycles.length, currentPage, totalPages]);

  const handleSubmitCycle = async (data) => {
    try {
      if (data.saveToDatabase) {
        // L∆∞u v√†o database
        await ovulationService.createMenstrualCycle(data);

        // Refetch d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t UI
        await fetchMenstrualCycles(true);

        // Reset v·ªÅ trang ƒë·∫ßu ƒë·ªÉ hi·ªÉn th·ªã chu k·ª≥ m·ªõi nh·∫•t
        setCurrentPage(1);

        setShowForm(false);
        setCalculationResult(null); // Clear calculation result

        // Show success message
        const successMessage = document.createElement('div');
        successMessage.innerHTML = '‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh c√¥ng!';
        successMessage.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: linear-gradient(135deg, #10b981, #059669);
          color: white;
          padding: 12px 24px;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
          z-index: 10000;
          font-weight: 600;
          animation: slideInRight 0.3s ease-out;
        `;
        document.body.appendChild(successMessage);

        // Remove success message after 3 seconds
        setTimeout(() => {
          if (document.body.contains(successMessage)) {
            successMessage.style.animation = 'slideOutRight 0.3s ease-in';
            setTimeout(() => {
              if (document.body.contains(successMessage)) {
                document.body.removeChild(successMessage);
              }
            }, 300);
          }
        }, 3000);

        alert('Ghi nh·∫≠n chu k·ª≥ m·ªõi th√†nh c√¥ng!');

        // Scroll to top ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y d·ªØ li·ªáu m·ªõi
        window.scrollTo({ top: 0, behavior: 'smooth' });
      } else {
        // Ch·ªâ t√≠nh to√°n v√† hi·ªÉn th·ªã k·∫øt qu·∫£
        const calculatedData = calculateCycleData(data);
        setCalculationResult(calculatedData);
        setShowForm(false);
        // Scroll to result section
        setTimeout(() => {
          const resultElement = document.getElementById('calculation-result');
          if (resultElement) {
            resultElement.scrollIntoView({ behavior: 'smooth' });
          }
        }, 100);
      }
    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω chu k·ª≥:', error);
      alert(
        data.saveToDatabase
          ? 'Ghi nh·∫≠n chu k·ª≥ th·∫•t b·∫°i!'
          : 'T√≠nh to√°n th·∫•t b·∫°i!'
      );
    }
  };

  // H√†m t√≠nh to√°n d·ªØ li·ªáu chu k·ª≥
  const calculateCycleData = (data) => {
    const startDate = new Date(data.startDate);
    const nextPeriodDate = new Date(startDate);
    nextPeriodDate.setDate(startDate.getDate() + data.cycleLength);

    const ovulationDate = new Date(startDate);
    ovulationDate.setDate(
      startDate.getDate() + Math.floor(data.cycleLength) - 14
    );

    const fertilityWindowStart = new Date(ovulationDate);
    fertilityWindowStart.setDate(ovulationDate.getDate() - 5);

    const fertilityWindowEnd = new Date(ovulationDate);
    fertilityWindowEnd.setDate(ovulationDate.getDate() + 1);

    return {
      startDate: startDate,
      endDate: new Date(
        startDate.getTime() + (data.numberOfDays - 1) * 24 * 60 * 60 * 1000
      ),
      nextPeriodDate: nextPeriodDate,
      ovulationDate: ovulationDate,
      fertilityWindow: {
        start: fertilityWindowStart,
        end: fertilityWindowEnd,
      },
      cycleLength: data.cycleLength,
      periodLength: data.numberOfDays,
    };
  };

  // H√†m x·ª≠ l√Ω edit chu k·ª≥
  const handleEditCycle = (cycle) => {
    setEditingCycle(cycle);
    setShowEditForm(true);
    setShowForm(false);
    setCalculationResult(null);
  };

  // H√†m x·ª≠ l√Ω submit khi edit chu k·ª≥
  const handleSubmitEditCycle = async (data) => {
    try {
      await ovulationService.updateMenstrualCycle(editingCycle.id, data);

      // Refetch d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t UI
      await fetchMenstrualCycles(true);

      setShowEditForm(false);
      setEditingCycle(null);

      // Show success message
      const successMessage = document.createElement('div');
      successMessage.innerHTML = '‚úÖ C·∫≠p nh·∫≠t chu k·ª≥ th√†nh c√¥ng!';
      successMessage.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
        padding: 12px 24px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        z-index: 10000;
        font-weight: 600;
        animation: slideInRight 0.3s ease-out;
      `;
      document.body.appendChild(successMessage);

      // Remove success message after 3 seconds
      setTimeout(() => {
        if (document.body.contains(successMessage)) {
          successMessage.style.animation = 'slideOutRight 0.3s ease-in';
          setTimeout(() => {
            if (document.body.contains(successMessage)) {
              document.body.removeChild(successMessage);
            }
          }, 300);
        }
      }, 3000);

      alert('C·∫≠p nh·∫≠t chu k·ª≥ th√†nh c√¥ng!');

      // Scroll to top ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t
      window.scrollTo({ top: 0, behavior: 'smooth' });
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t chu k·ª≥:', error);
      alert('C·∫≠p nh·∫≠t chu k·ª≥ th·∫•t b·∫°i!');
    }
  };

  // H√†m x·ª≠ l√Ω x√≥a chu k·ª≥
  const handleDeleteCycle = async (cycle) => {
    if (
      window.confirm(
        `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a chu k·ª≥ #${menstrualCycles.length - menstrualCycles.indexOf(cycle)} kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.`
      )
    ) {
      try {
        await ovulationService.deleteMenstrualCycle(cycle.id);

        // Refetch d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t UI
        await fetchMenstrualCycles(true);

        // Adjust current page if necessary
        const newTotalPages = Math.ceil(
          (menstrualCycles.length - 1) / itemsPerPage
        );
        if (currentPage > newTotalPages && newTotalPages > 0) {
          setCurrentPage(newTotalPages);
        }

        // Show success message
        const successMessage = document.createElement('div');
        successMessage.innerHTML = '‚úÖ X√≥a chu k·ª≥ th√†nh c√¥ng!';
        successMessage.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: linear-gradient(135deg, #ef4444, #dc2626);
          color: white;
          padding: 12px 24px;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
          z-index: 10000;
          font-weight: 600;
          animation: slideInRight 0.3s ease-out;
        `;
        document.body.appendChild(successMessage);

        // Remove success message after 3 seconds
        setTimeout(() => {
          if (document.body.contains(successMessage)) {
            successMessage.style.animation = 'slideOutRight 0.3s ease-in';
            setTimeout(() => {
              if (document.body.contains(successMessage)) {
                document.body.removeChild(successMessage);
              }
            }, 300);
          }
        }, 3000);

        alert('X√≥a chu k·ª≥ th√†nh c√¥ng!');
      } catch (error) {
        console.error('L·ªói khi x√≥a chu k·ª≥:', error);
        alert('X√≥a chu k·ª≥ th·∫•t b·∫°i!');
      }
    }
  };

  // H√†m cancel edit
  const handleCancelEdit = () => {
    setShowEditForm(false);
    setEditingCycle(null);
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={vi}>
      <Container maxWidth="lg" className={styles.container}>
        {isLoggedIn ? (
          <>
            {isLoading ? (
              <div style={{ textAlign: 'center', padding: '20px' }}>
                <Typography>ƒêang t·∫£i d·ªØ li·ªáu...</Typography>
              </div>
            ) : (
              <>
                {/* Refetching indicator */}
                {isRefetching && (
                  <Box className={styles.refetchOverlay}>
                    <div className={styles.spinner}></div>
                    <Typography className={styles.refetchText}>
                      ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu...
                    </Typography>
                  </Box>
                )}

                {/* Stats Cards */}
                <div className={styles.dashboard}>
                  {dashboardCards.map((card, index) => (
                    <div
                      key={card.id}
                      className={styles.card}
                      role="article"
                      aria-labelledby={`card-${card.id}-title`}
                      tabIndex={0}
                    >
                      <div className={styles.cardHeader}>
                        <div className={card.iconWrapper}>{card.icon}</div>
                        <span
                          className={styles.cardLabel}
                          id={`card-${card.id}-title`}
                        >
                          {card.label}
                        </span>
                      </div>

                      {card.customContent ? (
                        card.customContent
                      ) : (
                        <div className={styles.mainValue}>{card.mainValue}</div>
                      )}

                      <div className={styles.subValue}>{card.subValue}</div>
                    </div>
                  ))}
                </div>

                {/* Danh s√°ch chu k·ª≥ kinh nguy·ªát */}
                <Box sx={{ marginBottom: 4 }} data-section="cycle-list">
                  <Card className={styles.cycleListCard}>
                    <Box className={styles.cycleListHeader}>
                      <Box className={styles.cycleListIconWrapper}>
                        <Calendar className={styles.cycleListIcon} />
                      </Box>
                      <Box>
                        <Typography
                          variant="h6"
                          className={styles.cycleListTitle}
                        >
                          L·ªãch s·ª≠ chu k·ª≥ kinh nguy·ªát
                        </Typography>
                        <Typography className={styles.cycleListSubtitle}>
                          {menstrualCycles.length} chu k·ª≥ ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n
                          {menstrualCycles.length > itemsPerPage && (
                            <span>
                              {' '}
                              ‚Ä¢ Trang {currentPage}/{totalPages}
                            </span>
                          )}
                        </Typography>
                      </Box>
                    </Box>

                    {menstrualCycles.length > 0 ? (
                      <>
                        <Box className={styles.cycleListContainer}>
                          {currentCycles.map((cycle, index) => (
                            <Card
                              key={startIndex + index}
                              className={styles.cycleItem}
                            >
                              <Box className={styles.cycleItemHeader}>
                                <Box className={styles.cycleItemIconWrapper}>
                                  <Calendar className={styles.cycleItemIcon} />
                                </Box>
                                <Box className={styles.cycleItemInfo}>
                                  <Typography className={styles.cycleItemTitle}>
                                    Chu k·ª≥ #
                                    {menstrualCycles.length -
                                      (startIndex + index)}
                                  </Typography>
                                  <Typography className={styles.cycleItemDate}>
                                    {formatDate(cycle.startDate)}
                                  </Typography>
                                </Box>

                                {/* Edit and Delete buttons */}
                                <Box className={styles.cycleItemActions}>
                                  <button
                                    className={styles.editButton}
                                    onClick={() => handleEditCycle(cycle)}
                                    title="Ch·ªânh s·ª≠a chu k·ª≥"
                                  >
                                    <Edit className={styles.actionIcon} />
                                  </button>
                                  <button
                                    className={styles.deleteButton}
                                    onClick={() => handleDeleteCycle(cycle)}
                                    title="X√≥a chu k·ª≥"
                                  >
                                    <Trash2 className={styles.actionIcon} />
                                  </button>
                                </Box>
                              </Box>

                              <Box className={styles.cycleItemDetails}>
                                <Box className={styles.cycleDetailItem}>
                                  <Typography
                                    className={styles.cycleDetailLabel}
                                  >
                                    S·ªë ng√†y h√†nh kinh:
                                  </Typography>
                                  <Typography
                                    className={styles.cycleDetailValue}
                                  >
                                    {cycle.numberOfDays} ng√†y
                                  </Typography>
                                </Box>

                                <Box className={styles.cycleDetailItem}>
                                  <Typography
                                    className={styles.cycleDetailLabel}
                                  >
                                    ƒê·ªô d√†i chu k·ª≥:
                                  </Typography>
                                  <Typography
                                    className={styles.cycleDetailValue}
                                  >
                                    {cycle.cycleLength} ng√†y
                                  </Typography>
                                </Box>

                                <Box className={styles.cycleDetailItem}>
                                  <Typography
                                    className={styles.cycleDetailLabel}
                                  >
                                    Ng√†y r·ª•ng tr·ª©ng d·ª± ki·∫øn:
                                  </Typography>
                                  <Typography
                                    className={styles.cycleDetailValue}
                                  >
                                    {formatDate(cycle.ovulationDate)}
                                  </Typography>
                                </Box>

                                {/* Reminder status */}
                                <Box className={styles.cycleDetailItem}>
                                  <Typography
                                    className={styles.cycleDetailLabel}
                                  >
                                    Tr·∫°ng th√°i nh·∫Øc nh·ªü:
                                  </Typography>
                                  <Typography
                                    className={styles.cycleDetailValue}
                                  >
                                    {getReminderStatusInfo(cycle).text}
                                  </Typography>
                                </Box>

                                {/* Reminder status badge */}
                                <Box
                                  className={`${styles.cycleReminderBadge} ${getReminderStatusInfo(cycle).className}`}
                                >
                                  {getReminderStatusInfo(cycle).icon}
                                  <Typography
                                    className={styles.cycleReminderText}
                                  >
                                    {getReminderStatusInfo(cycle).text}
                                  </Typography>
                                </Box>
                              </Box>
                            </Card>
                          ))}
                        </Box>

                        {/* Pagination Controls */}
                        {totalPages > 1 && (
                          <Box className={styles.paginationContainer}>
                            <Box className={styles.paginationInfo}>
                              <Typography className={styles.paginationText}>
                                Hi·ªÉn th·ªã {startIndex + 1}-
                                {Math.min(endIndex, menstrualCycles.length)}
                                trong t·ªïng s·ªë {menstrualCycles.length} chu k·ª≥
                              </Typography>
                            </Box>

                            <Box className={styles.paginationControls}>
                              <button
                                className={`${styles.paginationButton} ${currentPage === 1 ? styles.disabled : ''}`}
                                onClick={() =>
                                  handlePageChange(currentPage - 1)
                                }
                                disabled={currentPage === 1}
                              >
                                <ChevronUp
                                  className={styles.paginationIcon}
                                  style={{ transform: 'rotate(-90deg)' }}
                                />
                                Tr∆∞·ªõc
                              </button>

                              <Box className={styles.pageNumbers}>
                                {Array.from(
                                  { length: totalPages },
                                  (_, i) => i + 1
                                ).map((page) => (
                                  <button
                                    key={page}
                                    className={`${styles.pageNumber} ${currentPage === page ? styles.active : ''}`}
                                    onClick={() => handlePageChange(page)}
                                  >
                                    {page}
                                  </button>
                                ))}
                              </Box>

                              <button
                                className={`${styles.paginationButton} ${currentPage === totalPages ? styles.disabled : ''}`}
                                onClick={() =>
                                  handlePageChange(currentPage + 1)
                                }
                                disabled={currentPage === totalPages}
                              >
                                Sau
                                <ChevronUp
                                  className={styles.paginationIcon}
                                  style={{ transform: 'rotate(90deg)' }}
                                />
                              </button>
                            </Box>
                          </Box>
                        )}
                      </>
                    ) : (
                      <Box className={styles.emptyCycleList}>
                        <Calendar className={styles.emptyCycleIcon} />
                        <Typography className={styles.emptyCycleTitle}>
                          Ch∆∞a c√≥ chu k·ª≥ n√†o ƒë∆∞·ª£c ghi nh·∫≠n
                        </Typography>
                        <Typography className={styles.emptyCycleDescription}>
                          H√£y b·∫•m n√∫t "Khai b√°o chu k·ª≥ m·ªõi" ƒë·ªÉ th√™m chu k·ª≥ ƒë·∫ßu
                          ti√™n c·ªßa b·∫°n
                        </Typography>
                      </Box>
                    )}
                  </Card>
                </Box>

                {/* Button khai b√°o chu k·ª≥ m·ªõi */}
                {!showForm && !calculationResult && !showEditForm && (
                  <Box className={styles.addCycleButtonContainer}>
                    <button
                      className={styles.addCycleButton}
                      onClick={() => {
                        setShowForm(true);
                        setCalculationResult(null);
                      }}
                    >
                      <Calendar className={styles.addCycleButtonIcon} />
                      Khai b√°o chu k·ª≥ m·ªõi
                    </button>
                  </Box>
                )}

                {/* Form t·∫°o chu k·ª≥ m·ªõi */}
                {showForm && (
                  <Box sx={{ marginBottom: 4 }}>
                    <MenstrualCycleForm
                      onSubmit={handleSubmitCycle}
                      onCancel={() => setShowForm(false)}
                    />
                  </Box>
                )}

                {/* Form ch·ªânh s·ª≠a chu k·ª≥ */}
                {showEditForm && editingCycle && (
                  <Box sx={{ marginBottom: 4 }}>
                    <MenstrualCycleForm
                      onSubmit={handleSubmitEditCycle}
                      onCancel={handleCancelEdit}
                      initialData={editingCycle}
                      isEditMode={true}
                    />
                  </Box>
                )}

                {/* K·∫øt qu·∫£ t√≠nh to√°n */}
                {calculationResult && (
                  <Box id="calculation-result" sx={{ marginBottom: 4 }}>
                    <Card className={styles.healthAdviceCard}>
                      <Box className={styles.healthAdviceHeader}>
                        <Box className={styles.healthAdviceIconWrapper}>
                          <Calendar className={styles.healthAdviceIcon} />
                        </Box>
                        <Box>
                          <Typography
                            variant="h6"
                            className={styles.healthAdviceTitle}
                          >
                            K·∫øt qu·∫£ t√≠nh to√°n chu k·ª≥
                          </Typography>
                          <Typography className={styles.healthAdviceSubtitle}>
                            D·ª± ƒëo√°n d·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p
                          </Typography>
                        </Box>
                      </Box>

                      <Box className={styles.form}>
                        {/* Th√¥ng tin chu k·ª≥ hi·ªán t·∫°i */}
                        <Card
                          className={`${styles.adviceCardRegular} ${styles.adviceCardBlue}`}
                        >
                          <Box className={styles.adviceCardHeader}>
                            <Box className={styles.adviceCardIconRegular}>
                              <Calendar
                                className={styles.adviceCardIconRegularIcon}
                              />
                            </Box>
                            <Typography
                              variant="subtitle1"
                              className={styles.adviceCardTitleRegular}
                            >
                              Chu k·ª≥ hi·ªán t·∫°i
                            </Typography>
                          </Box>
                          <Typography className={styles.adviceCardTextRegular}>
                            Th√¥ng tin v·ªÅ k·ª≥ kinh nguy·ªát ƒëang di·ªÖn ra
                          </Typography>
                          <List className={styles.adviceCardList}>
                            <ListItem className={styles.adviceCardListItem}>
                              Ng√†y b·∫Øt ƒë·∫ßu:{' '}
                              {formatDate(calculationResult.startDate)}
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              Ng√†y k·∫øt th√∫c d·ª± ki·∫øn:{' '}
                              {formatDate(calculationResult.endDate)}
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              ƒê·ªô d√†i k·ª≥ kinh: {calculationResult.periodLength}{' '}
                              ng√†y
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              ƒê·ªô d√†i chu k·ª≥: {calculationResult.cycleLength}{' '}
                              ng√†y
                            </ListItem>
                          </List>
                        </Card>

                        {/* D·ª± ƒëo√°n chu k·ª≥ ti·∫øp theo */}
                        <Card
                          className={`${styles.adviceCardRegular} ${styles.adviceCardPink}`}
                        >
                          <Box className={styles.adviceCardHeader}>
                            <Box className={styles.adviceCardIconRegular}>
                              <TrendingUp
                                className={styles.adviceCardIconRegularIcon}
                              />
                            </Box>
                            <Typography
                              variant="subtitle1"
                              className={styles.adviceCardTitleRegular}
                            >
                              D·ª± ƒëo√°n chu k·ª≥ ti·∫øp theo
                            </Typography>
                          </Box>
                          <Typography className={styles.adviceCardTextRegular}>
                            Th·ªùi ƒëi·ªÉm d·ª± ki·∫øn cho k·ª≥ kinh nguy·ªát ti·∫øp theo
                          </Typography>
                          <List className={styles.adviceCardList}>
                            <ListItem className={styles.adviceCardListItem}>
                              Ng√†y b·∫Øt ƒë·∫ßu d·ª± ki·∫øn:{' '}
                              {formatDate(calculationResult.nextPeriodDate)}
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              C√≤n kho·∫£ng:{' '}
                              {Math.ceil(
                                (calculationResult.nextPeriodDate -
                                  new Date()) /
                                  (1000 * 60 * 60 * 24)
                              )}{' '}
                              ng√†y
                            </ListItem>
                          </List>
                        </Card>

                        {/* Th·ªùi k·ª≥ r·ª•ng tr·ª©ng */}
                        <Card
                          className={`${styles.adviceCardRegular} ${styles.adviceCardGreen}`}
                        >
                          <Box className={styles.adviceCardHeader}>
                            <Box className={styles.adviceCardIconRegular}>
                              <Heart
                                className={styles.adviceCardIconRegularIcon}
                              />
                            </Box>
                            <Typography
                              variant="subtitle1"
                              className={styles.adviceCardTitleRegular}
                            >
                              Th·ªùi k·ª≥ r·ª•ng tr·ª©ng v√† th·ª• thai
                            </Typography>
                          </Box>
                          <Typography className={styles.adviceCardTextRegular}>
                            Th·ªùi ƒëi·ªÉm c√≥ kh·∫£ nƒÉng th·ª• thai cao nh·∫•t
                          </Typography>
                          <List className={styles.adviceCardList}>
                            <ListItem className={styles.adviceCardListItem}>
                              Ng√†y r·ª•ng tr·ª©ng d·ª± ki·∫øn:{' '}
                              {formatDate(calculationResult.ovulationDate)}
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              Th·ªùi k·ª≥ th·ª• thai:{' '}
                              {formatDate(
                                calculationResult.fertilityWindow.start
                              )}{' '}
                              -{' '}
                              {formatDate(
                                calculationResult.fertilityWindow.end
                              )}
                            </ListItem>
                            <ListItem className={styles.adviceCardListItem}>
                              Th·ªùi gian th·ª• thai k√©o d√†i:{' '}
                              {Math.ceil(
                                (calculationResult.fertilityWindow.end -
                                  calculationResult.fertilityWindow.start) /
                                  (1000 * 60 * 60 * 24)
                              ) + 1}{' '}
                              ng√†y
                            </ListItem>
                          </List>
                        </Card>
                      </Box>

                      {/* Button actions */}
                      <Box sx={{ textAlign: 'center', marginTop: 3 }}>
                        <button
                          className={styles.addCycleButton}
                          onClick={() => {
                            setCalculationResult(null);
                            setShowForm(true);
                          }}
                          style={{ marginRight: '12px' }}
                        >
                          T√≠nh to√°n l·∫°i
                        </button>
                        <button
                          className={styles.resetButton}
                          onClick={() => setCalculationResult(null)}
                        >
                          ƒê√≥ng k·∫øt qu·∫£
                        </button>
                      </Box>

                      {/* L∆∞u √Ω */}
                      <Box className={styles.healthAdviceNote}>
                        <b>L∆∞u √Ω:</b> ƒê√¢y ch·ªâ l√† k·∫øt qu·∫£ t√≠nh to√°n d·ª± ƒëo√°n. K·∫øt
                        qu·∫£ th·ª±c t·∫ø c√≥ th·ªÉ kh√°c do nhi·ªÅu y·∫øu t·ªë ·∫£nh h∆∞·ªüng. ƒê·ªÉ c√≥
                        d·ªØ li·ªáu ch√≠nh x√°c h∆°n, h√£y ch·ªçn "B·∫°n ƒëang t√≠nh ch·ªâ s·ªë
                        cho ch√≠nh m√¨nh?" v√† l∆∞u th√¥ng tin v√†o h·ªì s∆°.
                      </Box>
                    </Card>
                  </Box>
                )}

                {/* Chart Section */}
                {/* <Grid container spacing={3}>
                <Card className={styles.chartCard}>
                  <Box className={styles.chartHeader}>
                    <Typography variant="h6" className={styles.chartTitle}>
                      Bi·ªÉu ƒë·ªì chu k·ª≥
                    </Typography>
                    <Typography className={styles.chartSubtitle}>
                      Th·ªëng k√™ 5 chu k·ª≥ g·∫ßn nh·∫•t
                    </Typography>
                  </Box>

                  <Box className={styles.legendContainer}>
                    <Box className={styles.legendItem}>
                      <Box
                        className={styles.legendDot}
                        style={{ backgroundColor: '#E91E63' }}
                      />
                      <Typography className={styles.legendText}>
                        Chu k·ª≥ th·ª±c t·∫ø
                      </Typography>
                    </Box>
                    <Box className={styles.legendItem}>
                      <Box
                        className={styles.legendDot}
                        style={{ backgroundColor: '#9C27B0' }}
                      />
                      <Typography className={styles.legendText}>
                        Trung b√¨nh
                      </Typography>
                    </Box>
                  </Box>

                  <Box className={styles.chartContainer}>
                    <Line
                      data={chartData}
                      options={chartOptions}
                      className={styles.chartCanvas}
                    />
                  </Box>

                  <Box className={styles.statsFooterWrapper}>
                    <Box className={styles.statsFooter}>
                      <Box className={styles.statsFooterCard}>
                        <Typography className={styles.statSubtext}>
                          Chu k·ª≥ ng·∫Øn nh·∫•t
                        </Typography>
                        <Typography variant="h6" className={styles.statValue}>
                          28 ng√†y
                        </Typography>
                      </Box>
                      <Box className={styles.statsFooterCard}>
                        <Typography className={styles.statSubtext}>
                          Chu k·ª≥ d√†i nh·∫•t
                        </Typography>
                        <Typography variant="h6" className={styles.statValue}>
                          28 ng√†y
                        </Typography>
                      </Box>
                      <Box className={styles.statsFooterCard}>
                        <Typography className={styles.statSubtext}>
                          Ch√™nh l·ªách
                        </Typography>
                        <Typography variant="h6" className={styles.statValue}>
                          0 ng√†y
                        </Typography>
                      </Box>
                    </Box>
                  </Box>
                </Card>
              </Grid> */}

                {/* Health Advice Section */}
                <Box className={styles.healthAdviceSection}>
                  <Card className={styles.healthAdviceCard}>
                    <Box className={styles.healthAdviceHeader}>
                      <Box className={styles.healthAdviceIconWrapper}>
                        <FavoriteBorderIcon
                          className={styles.healthAdviceIcon}
                        />
                      </Box>
                      <Box>
                        <Typography
                          variant="h6"
                          className={styles.healthAdviceTitle}
                        >
                          L·ªùi khuy√™n s·ª©c kh·ªèe
                        </Typography>
                        <Typography className={styles.healthAdviceSubtitle}>
                          D·ª±a tr√™n d·ªØ li·ªáu chu k·ª≥ c·ªßa b·∫°n
                        </Typography>
                      </Box>
                    </Box>

                    {/* Card: Chu k·ª≥ ƒë·ªÅu ƒë·∫∑n */}
                    {/* <Card className={styles.adviceCardRegular}>
                    <Box className={styles.adviceCardHeader}>
                      <Box className={styles.adviceCardIconRegular}>
                        <FavoriteBorderIcon
                          className={styles.adviceCardIconRegularIcon}
                        />
                      </Box>
                      <Typography
                        variant="subtitle1"
                        className={styles.adviceCardTitleRegular}
                      >
                        Chu k·ª≥ ƒë·ªÅu ƒë·∫∑n
                      </Typography>
                    </Box>
                    <Typography className={styles.adviceCardTextRegular}>
                      Chu k·ª≥ c·ªßa b·∫°n r·∫•t ƒë·ªÅu ƒë·∫∑n! H√£y duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh
                      hi·ªán t·∫°i.
                    </Typography>
                    <List className={styles.adviceCardList}>
                      <ListItem className={styles.adviceCardListItem}>
                        Ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng c√¢n b·∫±ng
                      </ListItem>
                      <ListItem className={styles.adviceCardListItem}>
                        T·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n
                      </ListItem>
                      <ListItem className={styles.adviceCardListItem}>
                        Ng·ªß ƒë·ªß 7-8 ti·∫øng m·ªói ng√†y
                      </ListItem>
                    </List>
                  </Card> */}

                    {/* Card: L·ªùi khuy√™n chung */}
                    {/* <Card className={styles.adviceCardGeneral}>
                    <Box className={styles.adviceCardHeader}>
                      <Box className={styles.adviceCardIconGeneral}>
                        <FavoriteBorderIcon
                          className={styles.adviceCardIconGeneralIcon}
                        />
                      </Box>
                      <Typography
                        variant="subtitle1"
                        className={styles.adviceCardTitleGeneral}
                      >
                        L·ªùi khuy√™n chung
                      </Typography>
                    </Box>
                    <Typography className={styles.adviceCardTextGeneral}>
                      Nh·ªØng th√≥i quen t·ªët ƒë·ªÉ duy tr√¨ s·ª©c kh·ªèe sinh s·∫£n.
                    </Typography>
                    <List className={styles.adviceCardList}>
                      <ListItem className={styles.adviceCardListItem}>
                        U·ªëng ƒë·ªß 2-3 l√≠t n∆∞·ªõc m·ªói ng√†y
                      </ListItem>
                      <ListItem className={styles.adviceCardListItem}>
                        ƒÇn nhi·ªÅu rau xanh v√† tr√°i c√¢y
                      </ListItem>
                      <ListItem className={styles.adviceCardListItem}>
                        T·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng trong k·ª≥ kinh
                      </ListItem>
                      <ListItem className={styles.adviceCardListItem}>
                        Theo d√µi v√† ghi ch√©p ƒë·ªÅu ƒë·∫∑n
                      </ListItem>
                    </List>
                  </Card> */}

                    {advice.map((item, index) => (
                      <Card
                        key={index}
                        className={`${styles.adviceCardRegular} ${styles[`adviceCard${item.color.charAt(0).toUpperCase() + item.color.slice(1)}`]}`}
                      >
                        <Box className={styles.adviceCardHeader}>
                          <Box className={styles.adviceCardIconRegular}>
                            {item.icon}
                          </Box>
                          <Typography
                            variant="subtitle1"
                            className={styles.adviceCardTitleRegular}
                          >
                            {item.title}
                          </Typography>
                        </Box>
                        <Typography className={styles.adviceCardTextRegular}>
                          {item.description}
                        </Typography>
                        <List className={styles.adviceCardList}>
                          {item.tips.map((tip, tipIndex) => (
                            <ListItem
                              key={tipIndex}
                              className={styles.adviceCardListItem}
                            >
                              {tip}
                            </ListItem>
                          ))}
                        </List>
                      </Card>
                    ))}

                    {/* L∆∞u √Ω */}
                    <Box className={styles.healthAdviceNote}>
                      <b>L∆∞u √Ω:</b> Nh·ªØng l·ªùi khuy√™n n√†y ch·ªâ mang t√≠nh ch·∫•t tham
                      kh·∫£o. N·∫øu c√≥ b·∫•t th∆∞·ªùng ho·∫∑c lo l·∫Øng, h√£y tham kh·∫£o √Ω ki·∫øn
                      b√°c sƒ© chuy√™n khoa.
                    </Box>
                  </Card>
                </Box>
              </>
            )}
          </>
        ) : (
          <div className={styles.introduction}>
            {/* Header */}
            <div className={styles.header}>
              <div className="text-center">
                <h2 className={styles.headerTitle}>
                  L·ª£i √çch C·ªßa Vi·ªác Theo D√µi Chu K·ª≥ & ChƒÉm S√≥c B·∫£n Th√¢n
                </h2>
                <p className={styles.headerSubtitle}>
                  Hi·ªÉu r√µ c∆° th·ªÉ ƒë·ªÉ chƒÉm s√≥c b·∫£n th√¢n t·ªët h∆°n
                </p>
              </div>
            </div>

            <div className={styles.content}>
              {/* Benefits Grid */}
              <div className={styles.benefitsGrid}>
                {benefits.map((benefit, index) => (
                  <div key={index} className={styles.benefitCard}>
                    <div className="flex items-start space-x-3">
                      <div className={styles.benefitIconWrapper}>
                        {benefit.icon}
                      </div>
                      <div className="flex-1">
                        <h4 className={styles.benefitTitle}>{benefit.title}</h4>
                        <p className={styles.benefitDescription}>
                          {benefit.description}
                        </p>
                        {benefit.details.map((detail, detailIndex) => (
                          <div
                            key={detailIndex}
                            className={styles.benefitDetail}
                          >
                            <div className={styles.benefitBullet}></div>
                            <span>{detail}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Care Phases Section */}
              <div>
                <button
                  onClick={() => toggleSection('care')}
                  className={`${styles.sectionButton} ${styles.careButton}`}
                >
                  <h3 className={styles.sectionTitle}>
                    ChƒÉm S√≥c B·∫£n Th√¢n Theo T·ª´ng Giai ƒêo·∫°n
                  </h3>
                  <div
                    className={`${styles.chevronIcon} ${expandedSection === 'care' ? styles.expanded : ''}`}
                  >
                    {expandedSection === 'care' ? (
                      <ChevronUp className="h-5 w-5" />
                    ) : (
                      <ChevronDown className="h-5 w-5" />
                    )}
                  </div>
                </button>

                {expandedSection === 'care' && (
                  <div className={styles.careGrid}>
                    {carePhases.map((phase, index) => (
                      <div
                        key={index}
                        className={`${styles.carePhaseCard} ${styles[phase.color]}`}
                      >
                        <div className={styles.carePhaseHeader}>
                          <div className={styles.carePhaseIcon}>
                            {phase.icon}
                          </div>
                          <h4 className={styles.carePhaseTitle}>
                            {phase.phase}
                          </h4>
                        </div>
                        <ul className={styles.careTipsList}>
                          {phase.tips.map((tip, tipIndex) => (
                            <li key={tipIndex} className={styles.careTip}>
                              <div className={styles.tipBullet}></div>
                              <span>{tip}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Warning Signs Section */}
              <div>
                <button
                  onClick={() => toggleSection('warning')}
                  className={`${styles.sectionButton} ${styles.warningButton}`}
                >
                  <h3
                    className={`${styles.sectionTitle} flex items-center space-x-2`}
                  >
                    <AlertTriangle className="h-5 w-5 text-red-600" />
                    <span>Khi N√†o N√™n ƒêi Kh√°m?</span>
                  </h3>
                  <div
                    className={`${styles.chevronIcon} ${expandedSection === 'warning' ? styles.expanded : ''}`}
                  >
                    {expandedSection === 'warning' ? (
                      <ChevronUp className="h-5 w-5" />
                    ) : (
                      <ChevronDown className="h-5 w-5" />
                    )}
                  </div>
                </button>

                {expandedSection === 'warning' && (
                  <div className={styles.warningContent}>
                    <ul className={styles.warningList}>
                      {warningSignals.map((signal, index) => (
                        <li key={index} className={styles.warningItem}>
                          <AlertTriangle className={styles.warningIcon} />
                          <span>{signal}</span>
                        </li>
                      ))}
                    </ul>
                    <div className={styles.warningNote}>
                      <p className={styles.warningNoteText}>
                        <strong className={styles.warningNoteHighlight}>
                          L∆∞u √Ω:
                        </strong>{' '}
                        N·∫øu g·∫∑p b·∫•t k·ª≥ tri·ªáu ch·ª©ng n√†o ·ªü tr√™n, h√£y tham kh·∫£o √Ω
                        ki·∫øn b√°c sƒ© chuy√™n khoa ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† ƒëi·ªÅu tr·ªã k·ªãp
                        th·ªùi.
                      </p>
                    </div>
                  </div>
                )}
              </div>

              {/* Button chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p */}
              <button
                className={styles.loginButton}
                onClick={() => (window.location.href = '/login')}
              >
                ƒêƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng
              </button>
            </div>
          </div>
        )}
      </Container>
    </LocalizationProvider>
  );
};
export default OvulationPage;
